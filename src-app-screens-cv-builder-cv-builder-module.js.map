{"version":3,"sources":["./src/app/screens/cv-builder/cv-builder.module.ts","./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/collections.js","./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/drag-drop.js","./node_modules/@angular/cdk/fesm2015/coercion.js","./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/bidi.js","./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/platform.js","./src/app/screens/cv-builder/cv-builder-routing.module.ts","./src/app/screens/cv-builder/components/cvbuilder/cvbuilder.component.ts","./src/app/screens/cv-builder/components/cvbuilder/cvbuilder.component.html","./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/scrolling.js"],"names":[],"mappings":";;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+C;AAEsB;AACW;AACd;AACV;AACV;AACU;;AAiBjD,MAAM,eAAe;;8EAAf,eAAe;8FAAf,eAAe;kGAVjB;YACP,4DAAY;YACZ,iFAAsB;YACtB,0DAAW;YACX,kEAAmB;YACnB,qEAAc;YACd,2DAAY;YACZ,qEAAgB;SACjB;mIAEU,eAAe,mBAZxB,4FAAkB,aAGlB,4DAAY;QACZ,iFAAsB;QACtB,0DAAW;QACX,kEAAmB;QACnB,qEAAc;QACd,2DAAY;QACZ,qEAAgB;;;;;;;;;;;;;ACtBpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiD;AAC8B;;AAE/E;AACA;AACA;AACA;AACA;AACA;AACA;AACwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,yDAAY,4BAA4B,+CAAE;AACzD;AACA,kBAAkB;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,uBAAuB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,uBAAuB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,4CAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF,+CAA+C;AAC/H,kCAAkC,wEAAkB,EAAE,wDAAwD,wCAAwC,EAAE,wDAAwD;AAChN,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,wDAAU;AACxB,gBAAgB,qBAAqB;AACrC,KAAK,gBAAgB,WAAW,EAAE,QAAQ,EAAE;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,oBAAoB;AAC5C;AACA;AACA,oCAAoC,4DAAc;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAE8N;;AAE9N,uC;;;;;;;;;;;;ACtdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkR;AACvO;AACmD;AACN;AACwB;AACb;AAClB;AAC9B;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACwC;AACS;AACL;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,2BAA2B;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,0CAA0C;AACrD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iCAAiC,mDAAmD;AACpF;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,8BAA8B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,+BAA+B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,WAAW,GAAG,gBAAgB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,6FAA+B,EAAE,gBAAgB;AACrF;AACA,mCAAmC,6FAA+B,EAAE,iBAAiB;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA,iCAAiC;AACjC;AACA,+BAA+B,4CAAO;AACtC;AACA,wCAAwC,iDAAY;AACpD;AACA,sCAAsC,iDAAY;AAClD;AACA,mCAAmC,iDAAY;AAC/C;AACA,mCAAmC,iDAAY;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,4CAAO;AACxC;AACA,2BAA2B,4CAAO;AAClC;AACA,4BAA4B,4CAAO;AACnC;AACA,yBAAyB,4CAAO;AAChC;AACA,2BAA2B,4CAAO;AAClC;AACA,0BAA0B,4CAAO;AACjC;AACA,2BAA2B,4CAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,kBAAkB,GAAG,kBAAkB;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,mFAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,2EAAa;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2EAAa;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,2EAAa;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,eAAe;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,eAAe,EAAE;AAChD;AACA;AACA;AACA;AACA;AACA,+BAA+B,eAAe;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,aAAa;AACvD;AACA;AACA;AACA,uCAAuC;AACvC,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,yBAAyB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,gCAAgC,OAAO,GAAG,mBAAmB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,6CAA6C;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,4BAA4B;AACnD,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,qBAAqB;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,yBAAyB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,OAAO;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,4EAAc;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,cAAc,MAAM,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,iBAAiB;AAC7C,6BAA6B,kBAAkB;AAC/C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,UAAU;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,4CAAO;AACxC;AACA;AACA;AACA,2BAA2B,4CAAO;AAClC;AACA;AACA;AACA;AACA,0BAA0B,4CAAO;AACjC;AACA,2BAA2B,4CAAO;AAClC;AACA,0BAA0B,4CAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,iDAAY;AACvD;AACA;AACA;AACA;AACA;AACA,qCAAqC,4CAAO;AAC5C;AACA;AACA;AACA;AACA;AACA,YAAY,qDAAQ,IAAI,4DAAuB;AAC/C,sBAAsB,gEAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,uBAAuB,2EAAa;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,2EAAa;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,+DAA+D;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,wBAAwB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2EAAa;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,2BAA2B;AAC5F;AACA;AACA;AACA,oEAAoE,2BAA2B;AAC/F;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,mBAAmB,gBAAgB;AACnC,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,2EAAa;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2EAAa;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,uBAAuB,2EAAa;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,mBAAmB;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,2EAAa;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,aAAa;AAC/D;AACA,qBAAqB;AACrB;AACA;AACA,kDAAkD,OAAO;AACzD;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,4EAAc,CAAC,2EAAa;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,sBAAsB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,qBAAqB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,6FAA+B;AACnE;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,4CAAO;AACtC;AACA;AACA;AACA;AACA,6BAA6B,4CAAO;AACpC;AACA,0BAA0B,4CAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,8DAA8D,oCAAoC,sDAAe,CAAC,oDAAa,GAAG,sDAAe,CAAC,wDAAQ,GAAG;AAC7J,yBAAyB,wEAAkB,EAAE,+CAA+C,6BAA6B,8DAAQ,CAAC,oDAAM,GAAG,8DAAQ,CAAC,wDAAQ,GAAG,EAAE,+CAA+C;AAChN;AACA,KAAK,OAAO,oDAAM,EAAE;AACpB,KAAK,gCAAgC,OAAO,oDAAM,SAAS,wDAAQ,IAAI;AACvE;AACA,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,wDAAU;AACxB,gBAAgB,qBAAqB;AACrC,KAAK,gBAAgB,UAAU,OAAO,oDAAa,EAAE,GAAG;AACxD,sBAAsB,oDAAM;AAC5B,uBAAuB,wDAAQ;AAC/B,aAAa,GAAG,EAAE,EAAE,QAAQ,EAAE;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,4BAA4B,sDAAe,CAAC,wDAAQ,GAAG,sDAAe,CAAC,oDAAa,GAAG,sDAAe,CAAC,oEAAoB,GAAG,sDAAe,oBAAoB;AAC/M,iBAAiB,wEAAkB,EAAE,uCAAuC,qBAAqB,8DAAQ,CAAC,wDAAQ,GAAG,8DAAQ,CAAC,oDAAM,GAAG,8DAAQ,CAAC,oEAAa,GAAG,8DAAQ,oBAAoB,EAAE,uCAAuC;AACrO;AACA,KAAK,gCAAgC,OAAO,oDAAM,SAAS,wDAAQ,IAAI,GAAG;AAC1E,KAAK,OAAO,oDAAM,EAAE;AACpB,KAAK,OAAO,oEAAa,EAAE;AAC3B,KAAK;AACL;AACA,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,wDAAU;AACxB,gBAAgB,qBAAqB;AACrC,KAAK,gBAAgB,UAAU;AAC/B,sBAAsB,oDAAM;AAC5B,uBAAuB,wDAAQ;AAC/B,aAAa,GAAG,GAAG,OAAO,oDAAa,EAAE,GAAG,OAAO,oEAAoB,EAAE,GAAG,yBAAyB,EAAE,EAAE,QAAQ,EAAE;;AAEnH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,4DAAc;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,4DAAc;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,uBAAuB;AAC3C;AACA,yBAAyB,mFAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA,8DAA8D,sCAAsC;AACpG,wBAAwB,+DAAwB,EAAE,6EAA6E,qDAAqD,6CAA6C,gEAAyB,GAAG,8DAA8D,KAAK;AAChU;AACA,gBAAgB,OAAO,mDAAK,uCAAuC;AACnE;AACA,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,uDAAS;AACvB;AACA;AACA;AACA,6BAA6B,8DAA8D;AAC3F,aAAa;AACb,KAAK,gBAAgB,WAAW,EAAE,GAAG;AACrC,kBAAkB,mDAAK;AACvB;AACA,SAAS,GAAG,EAAE,EAAE;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,4DAAc;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,KAAK;AAC5B,sCAAsC,cAAc;AACpD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,4DAAc;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,4CAAO;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,mBAAmB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,mFAAqB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,gEAAS,mBAAmB,gEAAS;AAC3D;AACA;AACA;AACA,6BAA6B,yEAAW;AACxC;AACA;AACA;AACA,gGAAgG,KAAK;AACrG;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,mFAAqB;AACvD,qCAAqC,mFAAqB;AAC1D,iCAAiC,kFAAoB;AACrD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,uFAAuF;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,+BAA+B,+DAAwB,CAAC,wDAAiB,GAAG,+DAAwB,YAAY,+DAAwB,CAAC,+DAAwB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sBAAsB,+DAAwB,EAAE,oFAAoF,uCAAuC,aAAa,gEAAyB,GAAG,yDAAyD,KAAK;AAClR;AACA,KAAK,OAAO,yDAAW;AACvB;AACA;AACA,YAAY,OAAO,mDAAK,EAAE;AAC1B,iBAAiB,OAAO,mDAAK,EAAE;AAC/B;AACA,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,uDAAS;AACvB;AACA;AACA,6BAA6B,yDAAyD;AACtF,aAAa;AACb,KAAK,gBAAgB,UAAU,OAAO,yDAAkB,EAAE,EAAE,EAAE,GAAG;AACjE,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS,GAAG,EAAE,EAAE;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,4CAAO;AACrC;AACA,2BAA2B,0DAAY;AACvC;AACA,4BAA4B,0DAAY;AACxC;AACA,yBAAyB,0DAAY;AACrC;AACA,2BAA2B,0DAAY;AACvC;AACA,0BAA0B,0DAAY;AACtC;AACA,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA;AACA,yBAAyB,+CAAU;AACnC,0DAA0D,0DAAG;AAC7D;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,mFAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,2DAAI,KAAK,gEAAS;AACpC;AACA;AACA;AACA,uCAAuC,gEAAS;AAChD;AACA,YAAY,0DAAG;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,YAAY,gEAAS;AACrB,uBAAuB,kDAAK;AAC5B,mDAAmD,gEAAS;AAC5D,iBAAiB;AACjB,aAAa,GAAG,gEAAS;AACzB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2EAAa;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,qCAAqC,kFAAoB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,+BAA+B,2DAAI;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,+BAA+B,eAAe;AAC9C;AACA;AACA;AACA,SAAS;AACT;AACA,gCAAgC,eAAe;AAC/C,SAAS;AACT;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,eAAe,oHAAoH;AACnI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,2BAA2B,+DAAwB,CAAC,wDAAiB,GAAG,+DAAwB,qBAAqB,+DAAwB,CAAC,wDAAQ,GAAG,+DAAwB,CAAC,oDAAa,GAAG,+DAAwB,CAAC,8DAAuB,GAAG,+DAAwB,sBAAsB,+DAAwB,CAAC,gEAAqB,MAAM,+DAAwB,YAAY,+DAAwB,CAAC,+DAAwB,GAAG,+DAAwB,uBAAuB,+DAAwB,uBAAuB;AACzjB,eAAe,+DAAwB,EAAE,sHAAsH;AAC/J,QAAQ,4DAAqB;AAC7B,QAAQ,4DAAqB;AAC7B,QAAQ,4DAAqB;AAC7B,KAAK;AACL;AACA,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,KAAK,EAAE,iGAAiG;AACxG,QAAQ,yDAAkB;AAC1B,KAAK,EAAE,WAAW,4eAA4e,YAAY,sLAAsL,oCAAoC,gEAAyB,GAAG,iDAAiD,IAAI,kEAA2B,GAAG;AACn1B;AACA;AACA,KAAK,OAAO,wDAAU,EAAE;AACxB,KAAK,gCAAgC,OAAO,oDAAM,0BAA0B,GAAG,OAAO,sDAAQ,EAAE,GAAG,OAAO,sDAAQ,EAAE,GAAG;AACvH,KAAK,gCAAgC,OAAO,oDAAM,SAAS,wDAAQ,IAAI,GAAG;AAC1E,KAAK,OAAO,oDAAM,EAAE;AACpB,KAAK,OAAO,8DAAgB,EAAE;AAC9B,KAAK,gCAAgC,OAAO,sDAAQ,EAAE,GAAG,OAAO,oDAAM,4BAA4B,GAAG;AACrG,KAAK,OAAO,gEAAc,gBAAgB,OAAO,sDAAQ,EAAE,GAAG;AAC9D,KAAK,iBAAiB;AACtB,KAAK,OAAO,+DAAiB,EAAE;AAC/B,KAAK,oCAAoC,OAAO,sDAAQ,EAAE,GAAG,OAAO,kDAAI,EAAE,GAAG,OAAO,oDAAM,4BAA4B,GAAG;AACzH,KAAK,8BAA8B,OAAO,sDAAQ,EAAE,GAAG,OAAO,sDAAQ,EAAE,GAAG,OAAO,oDAAM,4BAA4B;AACpH;AACA;AACA,gBAAgB,OAAO,6DAAe,2BAA2B,oBAAoB,IAAI;AACzF,wBAAwB,OAAO,0DAAY,6BAA6B;AACxE,4BAA4B,OAAO,0DAAY,iCAAiC;AAChF,YAAY,OAAO,mDAAK,0BAA0B;AAClD,gBAAgB,OAAO,mDAAK,8BAA8B;AAC1D,2BAA2B,OAAO,mDAAK,iCAAiC;AACxE,uBAAuB,OAAO,mDAAK,8BAA8B;AACjE,sBAAsB,OAAO,mDAAK,gCAAgC;AAClE,wBAAwB,OAAO,mDAAK,sCAAsC;AAC1E,gBAAgB,OAAO,mDAAK,8BAA8B;AAC1D,yBAAyB,OAAO,mDAAK,uCAAuC;AAC5E,oBAAoB,OAAO,mDAAK,kCAAkC;AAClE,eAAe,OAAO,oDAAM,6BAA6B;AACzD,gBAAgB,OAAO,oDAAM,8BAA8B;AAC3D,aAAa,OAAO,oDAAM,2BAA2B;AACrD,eAAe,OAAO,oDAAM,6BAA6B;AACzD,cAAc,OAAO,oDAAM,4BAA4B;AACvD,eAAe,OAAO,oDAAM,6BAA6B;AACzD,aAAa,OAAO,oDAAM,2BAA2B;AACrD;AACA,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,uDAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,6BAA6B,iDAAiD;AAC9E,aAAa;AACb,KAAK,gBAAgB,UAAU,OAAO,wDAAiB,EAAE,GAAG;AAC5D,sBAAsB,oDAAM;AAC5B;AACA,aAAa;AACb,sBAAsB,sDAAQ;AAC9B,aAAa;AACb,sBAAsB,sDAAQ;AAC9B,aAAa,GAAG,GAAG;AACnB,sBAAsB,oDAAM;AAC5B,uBAAuB,wDAAQ;AAC/B,aAAa,GAAG,GAAG,OAAO,oDAAa,EAAE,GAAG,OAAO,8DAAuB,EAAE,GAAG;AAC/E,sBAAsB,sDAAQ;AAC9B,aAAa;AACb,sBAAsB,oDAAM;AAC5B;AACA,aAAa,GAAG,GAAG,OAAO,gEAAqB;AAC/C,sBAAsB,sDAAQ;AAC9B,aAAa,GAAG,GAAG,iBAAiB,GAAG,OAAO,+DAAwB,EAAE,GAAG;AAC3E,sBAAsB,sDAAQ;AAC9B,aAAa;AACb,sBAAsB,kDAAI;AAC1B,aAAa;AACb,sBAAsB,oDAAM;AAC5B;AACA,aAAa,GAAG,GAAG;AACnB,sBAAsB,sDAAQ;AAC9B,aAAa;AACb,sBAAsB,sDAAQ;AAC9B,aAAa;AACb,sBAAsB,oDAAM;AAC5B;AACA,aAAa,GAAG,EAAE,EAAE,GAAG;AACvB,kBAAkB,oDAAM;AACxB;AACA,SAAS;AACT,kBAAkB,oDAAM;AACxB;AACA,SAAS;AACT,kBAAkB,oDAAM;AACxB;AACA,SAAS;AACT,kBAAkB,oDAAM;AACxB;AACA,SAAS;AACT,kBAAkB,oDAAM;AACxB;AACA,SAAS;AACT,kBAAkB,oDAAM;AACxB;AACA,SAAS;AACT,kBAAkB,oDAAM;AACxB;AACA,SAAS;AACT,kBAAkB,mDAAK;AACvB;AACA,SAAS;AACT,kBAAkB,mDAAK;AACvB;AACA,SAAS;AACT,kBAAkB,mDAAK;AACvB;AACA,SAAS;AACT,kBAAkB,mDAAK;AACvB;AACA,SAAS;AACT,kBAAkB,mDAAK;AACvB;AACA,SAAS;AACT,kBAAkB,mDAAK;AACvB;AACA,SAAS;AACT,kBAAkB,mDAAK;AACvB;AACA,SAAS;AACT,kBAAkB,6DAAe;AACjC,qCAAqC,oBAAoB;AACzD,SAAS;AACT,kBAAkB,0DAAY;AAC9B;AACA,SAAS;AACT,kBAAkB,0DAAY;AAC9B;AACA,SAAS;AACT,kBAAkB,mDAAK;AACvB;AACA,SAAS;AACT,kBAAkB,mDAAK;AACvB;AACA,SAAS,GAAG,EAAE,EAAE;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,oCAAoC;AAC9F,sBAAsB,8DAAuB,EAAE,uBAAuB;AACtE,sBAAsB,8DAAuB,EAAE;AAC/C;AACA,iBAAiB,0EAAmB,GAAG;AACvC,cAAc,oDAAoD,gEAAyB,kBAAkB,4BAA4B,oGAAoG,EAAE,wBAAwB,SAAS,0EAAmB,6FAA6F,EAAE,EAAE,EAAE,EAAE;AACxY,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,sDAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,0EAAmB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK,eAAe,EAAE;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEyV;;AAEzV,qC;;;;;;;;;;;;AC/jHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,MAAM;AACrC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,MAAM;AACxD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,wDAAU;AAC7C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,mBAAmB;AACnB,6BAA6B;AAC7B,wBAAwB;AACxB,QAAQ,OAAO,QAAQ;AACvB,OAAO,OAAO,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,MAAM;AACrE;AACA,qCAAqC,YAAY;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAE2I;AAC3I;;;;;;;;;;;;;ACnIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqK;AAC1H;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACwC;AACxC,yBAAyB,4DAAc;AACvC;AACA;AACA,CAAC;AACD;AACA;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uB,EAAE,uBAAuB;AACtE,sBAAsB,8DAAuB,GAAG;AAChD,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,sDAAQ;AACtB,iBAAiB;AACjB,KAAK,eAAe,EAAE;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E;AAC1E;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,uBAAuB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;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UAAU,EAAE,UAAU,CAAC,WAAW,CAAC,CAAC;KACxE;SAAM;QACL,UAAU,CAAC,UAAU,CAAC,YAAY,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;KAC5D;AACH,CAAC;AAED,SAAS,uBAAuB,CAAC,IAAI,EAAE,SAAS,EAAE,OAAO;IACvD,IAAI,OAAO,KAAK,SAAS,CAAC,QAAQ,CAAC,MAAM,EAAE;QACzC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;KAC7B;SAAM;QACL,MAAM,UAAU,GAAG,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAC/C,UAAU,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;KACtD;AAGH,CAAC;;;;;;;;;;;;;AE/WD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4E;AACkP;AAChM;AACG;AAClB;AACpE;AACoB;AACiE;;AAEhI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACwC;AACQ;AACJ;AACO;;AAEnD;AACA;AACA,oCAAoC,4DAAc;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,4CAAO;AAC/C;AACA,kEAAkE,2EAAoB;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,uBAAuB;AAC3C,yBAAyB,kBAAkB,kFAAoB,QAAQ;AACvE;AACA;AACA;AACA;AACA,uBAAuB,0BAA0B;AACjD,4BAA4B,qBAAqB,kFAAoB,QAAQ;AAC7E;AACA;AACA;AACA,uBAAuB,0BAA0B;AACjD,4BAA4B,qBAAqB,kFAAoB,QAAQ;AAC7E;AACA;AACA;AACA;AACA,gFAAgF,+CAA+C;AAC/H,iCAAiC,+DAAwB,EAAE,yGAAyG,+EAA+E,aAAa,gEAAyB;AACzR;AACA;AACA,uBAAuB,gEAAU;AACjC,aAAa,IAAI,kEAA2B,GAAG;AAC/C;AACA,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,mBAAmB,OAAO,mDAAK,EAAE;AACjC,mBAAmB,OAAO,mDAAK,EAAE;AACjC;AACA,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,uDAAS;AACvB;AACA;AACA;AACA;AACA;AACA,+BAA+B,gEAAU;AACzC,qBAAqB;AACrB,aAAa;AACb,KAAK,gBAAgB,WAAW,EAAE,GAAG;AACrC,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS,GAAG,EAAE,EAAE;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,4CAAO;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,+CAAE;AACrB;AACA,mBAAmB,+CAAU;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,gEAAS;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,6DAAM;AACvD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,2EAAa;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,sDAAS;AAC5B,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,oCAAoC,sDAAe,CAAC,oDAAa,GAAG,sDAAe,CAAC,8DAAe,GAAG,sDAAe,CAAC,wDAAQ,MAAM;AAClM,yBAAyB,wEAAkB,EAAE,+CAA+C,6BAA6B,8DAAQ,CAAC,oDAAM,GAAG,8DAAQ,CAAC,8DAAQ,GAAG,8DAAQ,CAAC,wDAAQ,MAAM,EAAE,+CAA+C;AACvO;AACA,KAAK,OAAO,oDAAM,EAAE;AACpB,KAAK,OAAO,8DAAQ,EAAE;AACtB,KAAK,gCAAgC,OAAO,sDAAQ,EAAE,GAAG,OAAO,oDAAM,SAAS,wDAAQ,IAAI;AAC3F;AACA,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,wDAAU;AACxB,gBAAgB,qBAAqB;AACrC,KAAK,gBAAgB,UAAU,OAAO,oDAAa,EAAE,GAAG,OAAO,8DAAe,EAAE,GAAG;AACnF,sBAAsB,sDAAQ;AAC9B,aAAa;AACb,sBAAsB,oDAAM;AAC5B,uBAAuB,wDAAQ;AAC/B,aAAa,GAAG,EAAE,EAAE,QAAQ,EAAE;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,4CAAO;AACrC,oCAAoC,+CAAU,mDAAmD,sDAAS,+CAA+C,gEAAS;AAClK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kFAAoB;AACzC;AACA;AACA;AACA;AACA,gBAAgB,kFAAoB;AACpC;AACA;AACA,qBAAqB,kFAAoB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,oFAAsB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kFAAoB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,kFAAoB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,iCAAiC,+DAAwB,CAAC,wDAAiB,GAAG,+DAAwB,oBAAoB,+DAAwB,CAAC,oDAAa,GAAG,+DAAwB,CAAC,gEAAqB,MAAM;AAC/Q,qBAAqB,+DAAwB,EAAE,0FAA0F;AACzI;AACA,KAAK,OAAO,wDAAU,EAAE;AACxB,KAAK,yBAAyB;AAC9B,KAAK,OAAO,oDAAM,EAAE;AACpB,KAAK,OAAO,gEAAc,gBAAgB,OAAO,sDAAQ,EAAE;AAC3D;AACA,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,uDAAS;AACvB;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,UAAU,OAAO,wDAAiB,EAAE,GAAG,yBAAyB,GAAG,OAAO,oDAAa,EAAE,GAAG,OAAO,gEAAqB;AAC7I,sBAAsB,sDAAQ;AAC9B,aAAa,GAAG,EAAE,EAAE,QAAQ,EAAE;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,4CAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gBAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,gEAAS;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,uDAAuD;AACpE,aAAa;AACb;AACA;AACA,wDAAwD,iCAAiC,sDAAe,CAAC,8DAAe,GAAG,sDAAe,CAAC,oDAAa,GAAG,sDAAe,CAAC,wDAAQ,MAAM;AACzL,sBAAsB,wEAAkB,EAAE,4CAA4C,0BAA0B,8DAAQ,CAAC,8DAAQ,GAAG,8DAAQ,CAAC,oDAAM,GAAG,8DAAQ,CAAC,wDAAQ,MAAM,EAAE,4CAA4C;AAC3N;AACA,KAAK,OAAO,8DAAQ,EAAE;AACtB,KAAK,OAAO,oDAAM,EAAE;AACpB,KAAK,gCAAgC,OAAO,sDAAQ,EAAE,GAAG,OAAO,oDAAM,SAAS,wDAAQ,IAAI;AAC3F;AACA,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,wDAAU;AACxB,gBAAgB,qBAAqB;AACrC,KAAK,gBAAgB,UAAU,OAAO,8DAAe,EAAE,GAAG,OAAO,oDAAa,EAAE,GAAG;AACnF,sBAAsB,sDAAQ;AAC9B,aAAa;AACb,sBAAsB,oDAAM;AAC5B,uBAAuB,wDAAQ;AAC/B,aAAa,GAAG,EAAE,EAAE,QAAQ,EAAE;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,4DAAuB,GAAG,kDAAa;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,4CAAO;AAC3C;AACA,yCAAyC,4CAAO;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,+CAAU;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,iDAAY;AAC5C;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,gEAAS;AACrB;AACA;AACA;AACA,YAAY,gEAAS;AACrB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,gEAAS;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,KAAK,GAAG,+BAA+B;AAC3E;AACA;AACA,sCAAsC,KAAK;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,uBAAuB;AAC/E;AACA,mDAAmD,uBAAuB;AAC1E;AACA;AACA,8EAA8E,4CAA4C,+DAAwB,CAAC,wDAAiB,GAAG,+DAAwB,CAAC,+DAAwB,GAAG,+DAAwB,CAAC,oDAAa,GAAG,+DAAwB,8BAA8B,+DAAwB,CAAC,gEAAqB,MAAM,+DAAwB,oBAAoB,+DAAwB,iBAAiB;AACnc,gCAAgC,+DAAwB,EAAE,4IAA4I;AACtM,QAAQ,yDAAkB;AAC1B,KAAK;AACL;AACA,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,KAAK,EAAE,qIAAqI;AAC5I,QAAQ,yDAAkB;AAC1B,KAAK,EAAE,WAAW,6BAA6B,YAAY,6CAA6C,aAAa,gEAAyB;AAC9I;AACA;AACA,aAAa,IAAI,wEAAiC,6NAA6N;AAC/Q,QAAQ,6DAAsB;AAC9B,QAAQ,4DAAqB;AAC7B,QAAQ,0DAAmB;AAC3B,QAAQ,0DAAmB;AAC3B,QAAQ,uDAAgB;AACxB,KAAK;AACL,QAAQ,uDAAgB;AACxB,QAAQ,yDAAkB;AAC1B,KAAK,EAAE,wCAAwC,cAAc,kBAAkB,cAAc,eAAe,wBAAwB,4BAA4B,iCAAiC,oCAAoC,kBAAkB,MAAM,OAAO,gBAAgB,8CAA8C,QAAQ,UAAU,+EAA+E,gBAAgB,+ZAA+Z,eAAe,gBAAgB,cAAc,eAAe,oBAAoB,qBAAqB,aAAa,6EAA6E,eAAe,uZAAuZ,cAAc,iBAAiB,aAAa,gBAAgB,mBAAmB,sBAAsB,aAAa,2BAA2B,kBAAkB,MAAM,OAAO,WAAW,UAAU,qBAAqB,qCAAqC,QAAQ,UAAU,wBAAwB,4CAA4C;AACxwD;AACA,KAAK,OAAO,wDAAU,EAAE;AACxB,KAAK,OAAO,+DAAiB,EAAE;AAC/B,KAAK,OAAO,oDAAM,EAAE;AACpB,KAAK,gCAAgC,OAAO,sDAAQ,EAAE,GAAG,OAAO,oDAAM,oCAAoC,GAAG;AAC7G,KAAK,OAAO,gEAAc,gBAAgB,OAAO,sDAAQ,EAAE,GAAG;AAC9D,KAAK,yBAAyB;AAC9B,KAAK;AACL;AACA;AACA,mBAAmB,OAAO,mDAAK,EAAE;AACjC,2BAA2B,OAAO,oDAAM,EAAE;AAC1C,uBAAuB,OAAO,uDAAS,4BAA4B,eAAe,IAAI;AACtF;AACA,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,uDAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,+BAA+B,+DAAiB;AAChD,iCAAiC,qEAAuB;AACxD;AACA;AACA;AACA,qBAAqB;AACrB,sDAAsD,cAAc,kBAAkB,cAAc,eAAe,wBAAwB,4BAA4B,iCAAiC,oCAAoC,kBAAkB,MAAM,OAAO,gBAAgB,8CAA8C,QAAQ,UAAU,+EAA+E,gBAAgB,+ZAA+Z,eAAe,gBAAgB,cAAc,eAAe,oBAAoB,qBAAqB,aAAa,6EAA6E,eAAe,uZAAuZ,cAAc,iBAAiB,aAAa,gBAAgB,mBAAmB,sBAAsB,aAAa,2BAA2B,kBAAkB,MAAM,OAAO,WAAW,UAAU,qBAAqB,qCAAqC,QAAQ,UAAU,wBAAwB;AACnuD,aAAa;AACb,KAAK,gBAAgB,UAAU,OAAO,wDAAiB,EAAE,GAAG,OAAO,+DAAwB,EAAE,GAAG,OAAO,oDAAa,EAAE,GAAG;AACzH,sBAAsB,sDAAQ;AAC9B,aAAa;AACb,sBAAsB,oDAAM;AAC5B;AACA,aAAa,GAAG,GAAG,OAAO,gEAAqB;AAC/C,sBAAsB,sDAAQ;AAC9B,aAAa,GAAG,GAAG,yBAAyB,GAAG,sBAAsB,EAAE,EAAE,GAAG;AAC5E,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,uDAAS;AAC3B,sCAAsC,eAAe;AACrD,SAAS,GAAG,EAAE,EAAE;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,4CAAO;AACrC;AACA,sCAAsC,4CAAO;AAC7C;AACA;AACA;AACA;AACA,QAAQ,gEAAS;AACjB;AACA,QAAQ,+DAAQ;AAChB;AACA;AACA;AACA,QAAQ,gEAAS;AACjB;AACA,QAAQ,kEAAW;AACnB;AACA;AACA;AACA;AACA,8BAA8B,4CAAO;AACrC;AACA;AACA;AACA,SAAS;AACT,gDAAgD,gEAAS;AACzD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,6EAAY;AACxB;AACA;AACA;AACA;AACA,6CAA6C,wEAAe,CAAC,yDAAY;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,kFAAoB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,QAAQ;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAAE;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,4DAA4D,mCAAmC,+DAAwB,CAAC,8DAAuB,GAAG,+DAAwB,CAAC,yDAAkB,GAAG,+DAAwB,CAAC,6DAAsB,GAAG,+DAAwB,CAAC,gFAAuB,GAAG,+DAAwB,+BAA+B,+DAAwB,CAAC,oDAAa,GAAG;AACrY,uBAAuB,+DAAwB,EAAE,gGAAgG,qMAAqM,aAAa,gEAAyB;AAC5X,aAAa,UAAU,gFAAuB,YAAY,qFAA4B,EAAE;AACxF,aAAa;AACb;AACA,KAAK,OAAO,8DAAgB,EAAE;AAC9B,KAAK,OAAO,yDAAW,EAAE;AACzB,KAAK,OAAO,6DAAe,EAAE;AAC7B,KAAK,OAAO,qFAA4B,gBAAgB,OAAO,oDAAM,SAAS,gFAAuB,IAAI,GAAG;AAC5G,KAAK,+CAA+C,OAAO,sDAAQ,EAAE,GAAG;AACxE,KAAK,OAAO,oDAAM;AAClB;AACA;AACA,uBAAuB,OAAO,mDAAK,EAAE;AACrC,4BAA4B,OAAO,mDAAK,EAAE;AAC1C,6BAA6B,OAAO,mDAAK,EAAE;AAC3C,sCAAsC,OAAO,mDAAK,EAAE;AACpD;AACA,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,uDAAS;AACvB;AACA;AACA;AACA,qBAAqB,UAAU,gFAAuB,YAAY,qFAA4B,EAAE;AAChG;AACA,aAAa;AACb,KAAK,gBAAgB,UAAU,OAAO,8DAAuB,EAAE,GAAG,OAAO,yDAAkB,EAAE,GAAG,OAAO,6DAAsB,EAAE,GAAG,OAAO,qFAAmC;AAC5K,sBAAsB,oDAAM;AAC5B,uBAAuB,gFAAuB;AAC9C,aAAa,GAAG,GAAG;AACnB,sBAAsB,sDAAQ;AAC9B,aAAa,GAAG,GAAG,OAAO,oDAAa,EAAE,EAAE,EAAE,GAAG;AAChD,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS,GAAG,EAAE,EAAE;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,yCAAyC;AAC7G,2BAA2B,8DAAuB,EAAE,4BAA4B;AAChF,2BAA2B,8DAAuB,GAAG;AACrD,cAAc,oDAAoD,gEAAyB,uBAAuB,0DAA0D,EAAE,EAAE;AAChL,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,sDAAQ;AACtB;AACA;AACA;AACA,aAAa;AACb,KAAK,eAAe,EAAE;AACtB;AACA;AACA;AACA;AACA;AACA,4DAA4D,qCAAqC;AACjG,uBAAuB,8DAAuB,EAAE,wBAAwB;AACxE,uBAAuB,8DAAuB,EAAE;AAChD,YAAY,4DAAU;AACtB,YAAY,oEAAc;AAC1B;AACA,WAAW,4DAAU,wBAAwB;AAC7C,cAAc,oDAAoD,gEAAyB,mBAAmB,4BAA4B,+EAA+E,EAAE,wBAAwB,SAAS,4DAAU;AACtQ,QAAQ,oEAAc,uBAAuB,EAAE,wBAAwB,SAAS,4DAAU,6FAA6F,EAAE,EAAE,EAAE,EAAE;AAC/L,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,sDAAQ;AACtB;AACA;AACA,oBAAoB,4DAAU;AAC9B,oBAAoB,oEAAc;AAClC;AACA;AACA;AACA,oBAAoB,4DAAU;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK,eAAe,EAAE;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEiT;;AAEjT,qC","file":"src-app-screens-cv-builder-cv-builder-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CvBuilderRoutingModule } from './cv-builder-routing.module';\nimport { CvbuilderComponent } from './components/cvbuilder/cvbuilder.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { SwiperModule } from 'swiper/angular';\nimport { HttpClientModule } from '@angular/common/http';\n\n\n@NgModule({\n  declarations: [\n    CvbuilderComponent\n  ],\n  imports: [\n    CommonModule,\n    CvBuilderRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    DragDropModule,\n    SwiperModule,\n    HttpClientModule\n  ]\n})\nexport class CvBuilderModule { }\n","import { isObservable, of, Subject } from 'rxjs';\nimport { ɵɵdefineInjectable, Injectable, InjectionToken } from '@angular/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nclass DataSource {\n}\n/** Checks whether an object is a data source. */\nfunction isDataSource(value) {\n    // Check if the value is a DataSource by observing if it has a connect function. Cannot\n    // be checked as an `instanceof DataSource` since people could create their own sources\n    // that match the interface, but don't extend DataSource.\n    return value && typeof value.connect === 'function';\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** DataSource wrapper for a native array. */\nclass ArrayDataSource extends DataSource {\n    constructor(_data) {\n        super();\n        this._data = _data;\n    }\n    connect() {\n        return isObservable(this._data) ? this._data : of(this._data);\n    }\n    disconnect() { }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A repeater that destroys views when they are removed from a\n * {@link ViewContainerRef}. When new items are inserted into the container,\n * the repeater will always construct a new embedded view for each item.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nclass _DisposeViewRepeaterStrategy {\n    applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {\n        changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\n            let view;\n            let operation;\n            if (record.previousIndex == null) {\n                const insertContext = itemContextFactory(record, adjustedPreviousIndex, currentIndex);\n                view = viewContainerRef.createEmbeddedView(insertContext.templateRef, insertContext.context, insertContext.index);\n                operation = 1 /* INSERTED */;\n            }\n            else if (currentIndex == null) {\n                viewContainerRef.remove(adjustedPreviousIndex);\n                operation = 3 /* REMOVED */;\n            }\n            else {\n                view = viewContainerRef.get(adjustedPreviousIndex);\n                viewContainerRef.move(view, currentIndex);\n                operation = 2 /* MOVED */;\n            }\n            if (itemViewChanged) {\n                itemViewChanged({\n                    context: view === null || view === void 0 ? void 0 : view.context,\n                    operation,\n                    record,\n                });\n            }\n        });\n    }\n    detach() {\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A repeater that caches views when they are removed from a\n * {@link ViewContainerRef}. When new items are inserted into the container,\n * the repeater will reuse one of the cached views instead of creating a new\n * embedded view. Recycling cached views reduces the quantity of expensive DOM\n * inserts.\n *\n * @template T The type for the embedded view's $implicit property.\n * @template R The type for the item in each IterableDiffer change record.\n * @template C The type for the context passed to each embedded view.\n */\nclass _RecycleViewRepeaterStrategy {\n    constructor() {\n        /**\n         * The size of the cache used to store unused views.\n         * Setting the cache size to `0` will disable caching. Defaults to 20 views.\n         */\n        this.viewCacheSize = 20;\n        /**\n         * View cache that stores embedded view instances that have been previously stamped out,\n         * but don't are not currently rendered. The view repeater will reuse these views rather than\n         * creating brand new ones.\n         *\n         * TODO(michaeljamesparsons) Investigate whether using a linked list would improve performance.\n         */\n        this._viewCache = [];\n    }\n    /** Apply changes to the DOM. */\n    applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {\n        // Rearrange the views to put them in the right location.\n        changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\n            let view;\n            let operation;\n            if (record.previousIndex == null) { // Item added.\n                const viewArgsFactory = () => itemContextFactory(record, adjustedPreviousIndex, currentIndex);\n                view = this._insertView(viewArgsFactory, currentIndex, viewContainerRef, itemValueResolver(record));\n                operation = view ? 1 /* INSERTED */ : 0 /* REPLACED */;\n            }\n            else if (currentIndex == null) { // Item removed.\n                this._detachAndCacheView(adjustedPreviousIndex, viewContainerRef);\n                operation = 3 /* REMOVED */;\n            }\n            else { // Item moved.\n                view = this._moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, itemValueResolver(record));\n                operation = 2 /* MOVED */;\n            }\n            if (itemViewChanged) {\n                itemViewChanged({\n                    context: view === null || view === void 0 ? void 0 : view.context,\n                    operation,\n                    record,\n                });\n            }\n        });\n    }\n    detach() {\n        for (const view of this._viewCache) {\n            view.destroy();\n        }\n        this._viewCache = [];\n    }\n    /**\n     * Inserts a view for a new item, either from the cache or by creating a new\n     * one. Returns `undefined` if the item was inserted into a cached view.\n     */\n    _insertView(viewArgsFactory, currentIndex, viewContainerRef, value) {\n        const cachedView = this._insertViewFromCache(currentIndex, viewContainerRef);\n        if (cachedView) {\n            cachedView.context.$implicit = value;\n            return undefined;\n        }\n        const viewArgs = viewArgsFactory();\n        return viewContainerRef.createEmbeddedView(viewArgs.templateRef, viewArgs.context, viewArgs.index);\n    }\n    /** Detaches the view at the given index and inserts into the view cache. */\n    _detachAndCacheView(index, viewContainerRef) {\n        const detachedView = viewContainerRef.detach(index);\n        this._maybeCacheView(detachedView, viewContainerRef);\n    }\n    /** Moves view at the previous index to the current index. */\n    _moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, value) {\n        const view = viewContainerRef.get(adjustedPreviousIndex);\n        viewContainerRef.move(view, currentIndex);\n        view.context.$implicit = value;\n        return view;\n    }\n    /**\n     * Cache the given detached view. If the cache is full, the view will be\n     * destroyed.\n     */\n    _maybeCacheView(view, viewContainerRef) {\n        if (this._viewCache.length < this.viewCacheSize) {\n            this._viewCache.push(view);\n        }\n        else {\n            const index = viewContainerRef.indexOf(view);\n            // The host component could remove views from the container outside of\n            // the view repeater. It's unlikely this will occur, but just in case,\n            // destroy the view on its own, otherwise destroy it through the\n            // container to ensure that all the references are removed.\n            if (index === -1) {\n                view.destroy();\n            }\n            else {\n                viewContainerRef.remove(index);\n            }\n        }\n    }\n    /** Inserts a recycled view from the cache at the given index. */\n    _insertViewFromCache(index, viewContainerRef) {\n        const cachedView = this._viewCache.pop();\n        if (cachedView) {\n            viewContainerRef.insert(cachedView, index);\n        }\n        return cachedView || null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class to be used to power selecting one or more options from a list.\n */\nclass SelectionModel {\n    constructor(_multiple = false, initiallySelectedValues, _emitChanges = true) {\n        this._multiple = _multiple;\n        this._emitChanges = _emitChanges;\n        /** Currently-selected values. */\n        this._selection = new Set();\n        /** Keeps track of the deselected options that haven't been emitted by the change event. */\n        this._deselectedToEmit = [];\n        /** Keeps track of the selected options that haven't been emitted by the change event. */\n        this._selectedToEmit = [];\n        /** Event emitted when the value has changed. */\n        this.changed = new Subject();\n        if (initiallySelectedValues && initiallySelectedValues.length) {\n            if (_multiple) {\n                initiallySelectedValues.forEach(value => this._markSelected(value));\n            }\n            else {\n                this._markSelected(initiallySelectedValues[0]);\n            }\n            // Clear the array in order to avoid firing the change event for preselected values.\n            this._selectedToEmit.length = 0;\n        }\n    }\n    /** Selected values. */\n    get selected() {\n        if (!this._selected) {\n            this._selected = Array.from(this._selection.values());\n        }\n        return this._selected;\n    }\n    /**\n     * Selects a value or an array of values.\n     */\n    select(...values) {\n        this._verifyValueAssignment(values);\n        values.forEach(value => this._markSelected(value));\n        this._emitChangeEvent();\n    }\n    /**\n     * Deselects a value or an array of values.\n     */\n    deselect(...values) {\n        this._verifyValueAssignment(values);\n        values.forEach(value => this._unmarkSelected(value));\n        this._emitChangeEvent();\n    }\n    /**\n     * Toggles a value between selected and deselected.\n     */\n    toggle(value) {\n        this.isSelected(value) ? this.deselect(value) : this.select(value);\n    }\n    /**\n     * Clears all of the selected values.\n     */\n    clear() {\n        this._unmarkAll();\n        this._emitChangeEvent();\n    }\n    /**\n     * Determines whether a value is selected.\n     */\n    isSelected(value) {\n        return this._selection.has(value);\n    }\n    /**\n     * Determines whether the model does not have a value.\n     */\n    isEmpty() {\n        return this._selection.size === 0;\n    }\n    /**\n     * Determines whether the model has a value.\n     */\n    hasValue() {\n        return !this.isEmpty();\n    }\n    /**\n     * Sorts the selected values based on a predicate function.\n     */\n    sort(predicate) {\n        if (this._multiple && this.selected) {\n            this._selected.sort(predicate);\n        }\n    }\n    /**\n     * Gets whether multiple values can be selected.\n     */\n    isMultipleSelection() {\n        return this._multiple;\n    }\n    /** Emits a change event and clears the records of selected and deselected values. */\n    _emitChangeEvent() {\n        // Clear the selected values so they can be re-cached.\n        this._selected = null;\n        if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n            this.changed.next({\n                source: this,\n                added: this._selectedToEmit,\n                removed: this._deselectedToEmit\n            });\n            this._deselectedToEmit = [];\n            this._selectedToEmit = [];\n        }\n    }\n    /** Selects a value. */\n    _markSelected(value) {\n        if (!this.isSelected(value)) {\n            if (!this._multiple) {\n                this._unmarkAll();\n            }\n            this._selection.add(value);\n            if (this._emitChanges) {\n                this._selectedToEmit.push(value);\n            }\n        }\n    }\n    /** Deselects a value. */\n    _unmarkSelected(value) {\n        if (this.isSelected(value)) {\n            this._selection.delete(value);\n            if (this._emitChanges) {\n                this._deselectedToEmit.push(value);\n            }\n        }\n    }\n    /** Clears out the selected values. */\n    _unmarkAll() {\n        if (!this.isEmpty()) {\n            this._selection.forEach(value => this._unmarkSelected(value));\n        }\n    }\n    /**\n     * Verifies the value assignment and throws an error if the specified value array is\n     * including multiple values while the selection model is not supporting multiple values.\n     */\n    _verifyValueAssignment(values) {\n        if (values.length > 1 && !this._multiple && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMultipleValuesInSingleSelectionError();\n        }\n    }\n}\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n * @docs-private\n */\nfunction getMultipleValuesInSingleSelectionError() {\n    return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nclass UniqueSelectionDispatcher {\n    constructor() {\n        this._listeners = [];\n    }\n    /**\n     * Notify other items that selection for the given name has been set.\n     * @param id ID of the item.\n     * @param name Name of the item.\n     */\n    notify(id, name) {\n        for (let listener of this._listeners) {\n            listener(id, name);\n        }\n    }\n    /**\n     * Listen for future changes to item selection.\n     * @return Function used to deregister listener\n     */\n    listen(listener) {\n        this._listeners.push(listener);\n        return () => {\n            this._listeners = this._listeners.filter((registered) => {\n                return listener !== registered;\n            });\n        };\n    }\n    ngOnDestroy() {\n        this._listeners = [];\n    }\n}\nUniqueSelectionDispatcher.ɵfac = function UniqueSelectionDispatcher_Factory(t) { return new (t || UniqueSelectionDispatcher)(); };\nUniqueSelectionDispatcher.ɵprov = ɵɵdefineInjectable({ factory: function UniqueSelectionDispatcher_Factory() { return new UniqueSelectionDispatcher(); }, token: UniqueSelectionDispatcher, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(UniqueSelectionDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return []; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token for {@link _ViewRepeater}. This token is for use by Angular Material only.\n * @docs-private\n */\nconst _VIEW_REPEATER_STRATEGY = new InjectionToken('_ViewRepeater');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ArrayDataSource, DataSource, SelectionModel, UniqueSelectionDispatcher, _DisposeViewRepeaterStrategy, _RecycleViewRepeaterStrategy, _VIEW_REPEATER_STRATEGY, getMultipleValuesInSingleSelectionError, isDataSource };\n\n//# sourceMappingURL=collections.js.map","import { ɵɵdefineInjectable, ɵɵinject, NgZone, Injectable, Inject, InjectionToken, Directive, Input, EventEmitter, ElementRef, ChangeDetectorRef, Optional, SkipSelf, Output, TemplateRef, ViewContainerRef, Self, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ViewportRuler, ScrollDispatcher, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { normalizePassiveListenerOptions, _getShadowRoot } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement, coerceArray, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge } from 'rxjs';\nimport { takeUntil, startWith, map, take, tap, switchMap } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nfunction extendStyles(dest, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            dest[key] = source[key];\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        touchAction: enable ? '' : 'none',\n        webkitUserDrag: enable ? '' : 'none',\n        webkitTapHighlightColor: enable ? '' : 'transparent',\n        userSelect: userSelect,\n        msUserSelect: userSelect,\n        webkitUserSelect: userSelect,\n        MozUserSelect: userSelect\n    });\n}\n/**\n * Toggles whether an element is visible while preserving its dimensions.\n * @param element Element whose visibility to toggle\n * @param enable Whether the element should be visible.\n * @docs-private\n */\nfunction toggleVisibility(element, enable) {\n    const styles = element.style;\n    styles.position = enable ? '' : 'fixed';\n    styles.top = styles.opacity = enable ? '' : '0';\n    styles.left = enable ? '' : '-999em';\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nfunction getTransformTransitionDurationInMs(element) {\n    const computedStyle = getComputedStyle(element);\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    const propertyIndex = transitionedProperties.indexOf(property);\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle, name) {\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map(part => part.trim());\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Gets a mutable version of an element's bounding `ClientRect`. */\nfunction getMutableClientRect(element) {\n    const clientRect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `ClientRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: clientRect.top,\n        right: clientRect.right,\n        bottom: clientRect.bottom,\n        left: clientRect.left,\n        width: clientRect.width,\n        height: clientRect.height\n    };\n}\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param clientRect ClientRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param clientRect `ClientRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustClientRect(clientRect, top, left) {\n    clientRect.top += top;\n    clientRect.bottom = clientRect.top + clientRect.height;\n    clientRect.left += left;\n    clientRect.right = clientRect.left + clientRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a ClientRect.\n * @param rect ClientRect to check against.\n * @param threshold Threshold around the ClientRect.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\nfunction isPointerNearClientRect(rect, threshold, pointerX, pointerY) {\n    const { top, right, bottom, left, width, height } = rect;\n    const xThreshold = width * threshold;\n    const yThreshold = height * threshold;\n    return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n        pointerX > left - xThreshold && pointerX < right + xThreshold;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\nclass ParentPositionTracker {\n    constructor(_document, _viewportRuler) {\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        /** Cached positions of the scrollable parent elements. */\n        this.positions = new Map();\n    }\n    /** Clears the cached positions. */\n    clear() {\n        this.positions.clear();\n    }\n    /** Caches the positions. Should be called at the beginning of a drag sequence. */\n    cache(elements) {\n        this.clear();\n        this.positions.set(this._document, {\n            scrollPosition: this._viewportRuler.getViewportScrollPosition(),\n        });\n        elements.forEach(element => {\n            this.positions.set(element, {\n                scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\n                clientRect: getMutableClientRect(element)\n            });\n        });\n    }\n    /** Handles scrolling while a drag is taking place. */\n    handleScroll(event) {\n        const target = event.target;\n        const cachedPosition = this.positions.get(target);\n        if (!cachedPosition) {\n            return null;\n        }\n        // Used when figuring out whether an element is inside the scroll parent. If the scrolled\n        // parent is the `document`, we use the `documentElement`, because IE doesn't support\n        // `contains` on the `document`.\n        const scrolledParentNode = target === this._document ? target.documentElement : target;\n        const scrollPosition = cachedPosition.scrollPosition;\n        let newTop;\n        let newLeft;\n        if (target === this._document) {\n            const viewportScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            newTop = viewportScrollPosition.top;\n            newLeft = viewportScrollPosition.left;\n        }\n        else {\n            newTop = target.scrollTop;\n            newLeft = target.scrollLeft;\n        }\n        const topDifference = scrollPosition.top - newTop;\n        const leftDifference = scrollPosition.left - newLeft;\n        // Go through and update the cached positions of the scroll\n        // parents that are inside the element that was scrolled.\n        this.positions.forEach((position, node) => {\n            if (position.clientRect && target !== node && scrolledParentNode.contains(node)) {\n                adjustClientRect(position.clientRect, topDifference, leftDifference);\n            }\n        });\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n        return { top: topDifference, left: leftDifference };\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node) {\n    const clone = node.cloneNode(true);\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    const nodeName = node.nodeName.toLowerCase();\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    if (nodeName === 'canvas') {\n        transferCanvasData(node, clone);\n    }\n    else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\n        transferInputData(node, clone);\n    }\n    transferData('canvas', node, clone, transferCanvasData);\n    transferData('input, textarea, select', node, clone, transferInputData);\n    return clone;\n}\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\nfunction transferData(selector, node, clone, callback) {\n    const descendantElements = node.querySelectorAll(selector);\n    if (descendantElements.length) {\n        const cloneElements = clone.querySelectorAll(selector);\n        for (let i = 0; i < descendantElements.length; i++) {\n            callback(descendantElements[i], cloneElements[i]);\n        }\n    }\n}\n// Counter for unique cloned radio button names.\nlet cloneUniqueId = 0;\n/** Transfers the data of one input element to another. */\nfunction transferInputData(source, clone) {\n    // Browsers throw an error when assigning the value of a file input programmatically.\n    if (clone.type !== 'file') {\n        clone.value = source.value;\n    }\n    // Radio button `name` attributes must be unique for radio button groups\n    // otherwise original radio buttons can lose their checked state\n    // once the clone is inserted in the DOM.\n    if (clone.type === 'radio' && clone.name) {\n        clone.name = `mat-clone-${clone.name}-${cloneUniqueId++}`;\n    }\n}\n/** Transfers the data of one canvas element to another. */\nfunction transferCanvasData(source, clone) {\n    const context = clone.getContext('2d');\n    if (context) {\n        // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n        // We can't do much about it so just ignore the error.\n        try {\n            context.drawImage(source, 0, 0);\n        }\n        catch (_a) { }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\nclass DragRef {\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\n         * passive transform in order for the dragged element to retain its new position\n         * after the user has stopped dragging and because we need to know the relative\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\n         */\n        this._passiveTransform = { x: 0, y: 0 };\n        /** CSS `transform` that is applied to the element while it's being dragged. */\n        this._activeTransform = { x: 0, y: 0 };\n        /** Emits when the item is being moved. */\n        this._moveEvents = new Subject();\n        /** Subscription to pointer movement events. */\n        this._pointerMoveSubscription = Subscription.EMPTY;\n        /** Subscription to the event that is dispatched when the user lifts their pointer. */\n        this._pointerUpSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being scrolled. */\n        this._scrollSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being resized. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Cached reference to the boundary element. */\n        this._boundaryElement = null;\n        /** Whether the native dragging interactions have been enabled on the root element. */\n        this._nativeInteractionsEnabled = true;\n        /** Elements that can be used to drag the draggable item. */\n        this._handles = [];\n        /** Registered handles that are currently disabled. */\n        this._disabledHandles = new Set();\n        /** Layout direction of the item. */\n        this._direction = 'ltr';\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /** Emits as the drag sequence is being prepared. */\n        this.beforeStarted = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new Subject();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new Subject();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new Subject();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new Subject();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new Subject();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = this._moveEvents;\n        /** Handler for the `mousedown`/`touchstart` events. */\n        this._pointerDown = (event) => {\n            this.beforeStarted.next();\n            // Delegate the event based on whether it started from a handle or the element itself.\n            if (this._handles.length) {\n                const targetHandle = this._handles.find(handle => {\n                    const target = event.target;\n                    return !!target && (target === handle || handle.contains(target));\n                });\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    this._initializeDragSequence(targetHandle, event);\n                }\n            }\n            else if (!this.disabled) {\n                this._initializeDragSequence(this._rootElement, event);\n            }\n        };\n        /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n        this._pointerMove = (event) => {\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            if (!this._hasStartedDragging) {\n                const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n                const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n                const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n                // Only start dragging after the user has moved more than the minimum distance in either\n                // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\n                if (isOverThreshold) {\n                    const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n                    const container = this._dropContainer;\n                    if (!isDelayElapsed) {\n                        this._endDragSequence(event);\n                        return;\n                    }\n                    // Prevent other drag sequences from starting while something in the container is still\n                    // being dragged. This can happen while we're waiting for the drop animation to finish\n                    // and can cause errors, because some elements might still be moving around.\n                    if (!container || (!container.isDragging() && !container.isReceiving())) {\n                        // Prevent the default action as soon as the dragging sequence is considered as\n                        // \"started\" since waiting for the next event can allow the device to begin scrolling.\n                        event.preventDefault();\n                        this._hasStartedDragging = true;\n                        this._ngZone.run(() => this._startDragSequence(event));\n                    }\n                }\n                return;\n            }\n            // We only need the preview dimensions if we have a boundary element.\n            if (this._boundaryElement) {\n                // Cache the preview element rect if we haven't cached it already or if\n                // we cached it too early before the element dimensions were computed.\n                if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n                    this._previewRect = (this._preview || this._rootElement).getBoundingClientRect();\n                }\n            }\n            // We prevent the default action down here so that we know that dragging has started. This is\n            // important for touch devices where doing this too early can unnecessarily block scrolling,\n            // if there's a dragging delay.\n            event.preventDefault();\n            const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n            this._hasMoved = true;\n            this._lastKnownPointerPosition = pointerPosition;\n            this._updatePointerDirectionDelta(constrainedPointerPosition);\n            if (this._dropContainer) {\n                this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\n            }\n            else {\n                const activeTransform = this._activeTransform;\n                activeTransform.x =\n                    constrainedPointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n                activeTransform.y =\n                    constrainedPointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n                this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n                // Apply transform as attribute if dragging and svg element to work for IE\n                if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n                    const appliedTransform = `translate(${activeTransform.x} ${activeTransform.y})`;\n                    this._rootElement.setAttribute('transform', appliedTransform);\n                }\n            }\n            // Since this event gets fired for every pixel while dragging, we only\n            // want to fire it if the consumer opted into it. Also we have to\n            // re-enter the zone because we run all of the events on the outside.\n            if (this._moveEvents.observers.length) {\n                this._ngZone.run(() => {\n                    this._moveEvents.next({\n                        source: this,\n                        pointerPosition: constrainedPointerPosition,\n                        event,\n                        distance: this._getDragDistance(constrainedPointerPosition),\n                        delta: this._pointerDirectionDelta\n                    });\n                });\n            }\n        };\n        /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n        this._pointerUp = (event) => {\n            this._endDragSequence(event);\n        };\n        this.withRootElement(element).withParent(_config.parentDragRef || null);\n        this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    set disabled(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._toggleNativeDragInteractions();\n            this._handles.forEach(handle => toggleNativeDragInteractions(handle, newValue));\n        }\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Gets the currently-visible element that represents the drag item.\n     * While dragging this is the placeholder, otherwise it's the root element.\n     */\n    getVisibleElement() {\n        return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n    }\n    /** Registers the handles that can be used to drag the element. */\n    withHandles(handles) {\n        this._handles = handles.map(handle => coerceElement(handle));\n        this._handles.forEach(handle => toggleNativeDragInteractions(handle, this.disabled));\n        this._toggleNativeDragInteractions();\n        // Delete any lingering disabled handles that may have been destroyed. Note that we re-create\n        // the set, rather than iterate over it and filter out the destroyed handles, because while\n        // the ES spec allows for sets to be modified while they're being iterated over, some polyfills\n        // use an array internally which may throw an error.\n        const disabledHandles = new Set();\n        this._disabledHandles.forEach(handle => {\n            if (this._handles.indexOf(handle) > -1) {\n                disabledHandles.add(handle);\n            }\n        });\n        this._disabledHandles = disabledHandles;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @param template Template that from which to stamp out the preview.\n     */\n    withPreviewTemplate(template) {\n        this._previewTemplate = template;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @param template Template that from which to stamp out the placeholder.\n     */\n    withPlaceholderTemplate(template) {\n        this._placeholderTemplate = template;\n        return this;\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     */\n    withRootElement(rootElement) {\n        const element = coerceElement(rootElement);\n        if (element !== this._rootElement) {\n            if (this._rootElement) {\n                this._removeRootElementListeners(this._rootElement);\n            }\n            this._ngZone.runOutsideAngular(() => {\n                element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n                element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n            });\n            this._initialTransform = undefined;\n            this._rootElement = element;\n        }\n        if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n            this._ownerSVGElement = this._rootElement.ownerSVGElement;\n        }\n        return this;\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     */\n    withBoundaryElement(boundaryElement) {\n        this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        this._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            this._resizeSubscription = this._viewportRuler\n                .change(10)\n                .subscribe(() => this._containInsideBoundaryOnResize());\n        }\n        return this;\n    }\n    /** Sets the parent ref that the ref is nested in.  */\n    withParent(parent) {\n        this._parentDragRef = parent;\n        return this;\n    }\n    /** Removes the dragging functionality from the DOM element. */\n    dispose() {\n        this._removeRootElementListeners(this._rootElement);\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            removeNode(this._rootElement);\n        }\n        removeNode(this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeSubscriptions();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._resizeSubscription.unsubscribe();\n        this._parentPositions.clear();\n        this._boundaryElement = this._rootElement = this._ownerSVGElement = this._placeholderTemplate =\n            this._previewTemplate = this._anchor = this._parentDragRef = null;\n    }\n    /** Checks whether the element is currently being dragged. */\n    isDragging() {\n        return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param handle Handle element that should be disabled.\n     */\n    disableHandle(handle) {\n        if (!this._disabledHandles.has(handle) && this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n            toggleNativeDragInteractions(handle, true);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param handle Handle element to be enabled.\n     */\n    enableHandle(handle) {\n        if (this._disabledHandles.has(handle)) {\n            this._disabledHandles.delete(handle);\n            toggleNativeDragInteractions(handle, this.disabled);\n        }\n    }\n    /** Sets the layout direction of the draggable item. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /** Sets the container that the item is part of. */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform.x = value.x;\n        this._passiveTransform.y = value.y;\n        if (!this._dropContainer) {\n            this._applyRootElementTransform(value.x, value.y);\n        }\n        return this;\n    }\n    /** Updates the item's sort order based on the last-known pointer position. */\n    _sortFromLastPointerPosition() {\n        const position = this._lastKnownPointerPosition;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\n        }\n    }\n    /** Unsubscribes from the global subscriptions. */\n    _removeSubscriptions() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n    }\n    /** Destroys the preview element and its ViewRef. */\n    _destroyPreview() {\n        if (this._preview) {\n            removeNode(this._preview);\n        }\n        if (this._previewRef) {\n            this._previewRef.destroy();\n        }\n        this._preview = this._previewRef = null;\n    }\n    /** Destroys the placeholder element and its ViewRef. */\n    _destroyPlaceholder() {\n        if (this._placeholder) {\n            removeNode(this._placeholder);\n        }\n        if (this._placeholderRef) {\n            this._placeholderRef.destroy();\n        }\n        this._placeholder = this._placeholderRef = null;\n    }\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @param event Browser event object that ended the sequence.\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeSubscriptions();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging) {\n            return;\n        }\n        this.released.next({ source: this });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then(() => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            });\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run(() => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(this._getPointerPositionOnPage(event))\n                });\n            });\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /** Starts the dragging sequence. */\n    _startDragSequence(event) {\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        const dropContainer = this._dropContainer;\n        if (dropContainer) {\n            const element = this._rootElement;\n            const parent = element.parentNode;\n            const preview = this._preview = this._createPreviewElement();\n            const placeholder = this._placeholder = this._createPlaceholderElement();\n            const anchor = this._anchor = this._anchor || this._document.createComment('');\n            // Needs to happen before the root element is moved.\n            const shadowRoot = this._getShadowRoot();\n            // Insert an anchor node so that we can restore the element's position in the DOM.\n            parent.insertBefore(anchor, element);\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            toggleVisibility(element, false);\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\n            getPreviewInsertionPoint(this._document, shadowRoot).appendChild(preview);\n            this.started.next({ source: this }); // Emit before notifying the container.\n            dropContainer.start();\n            this._initialContainer = dropContainer;\n            this._initialIndex = dropContainer.getItemIndex(this);\n        }\n        else {\n            this.started.next({ source: this });\n            this._initialContainer = this._initialIndex = undefined;\n        }\n        // Important to run after we've called `start` on the parent container\n        // so that it has had time to resolve its scrollable parents.\n        this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @param referenceElement Element that started the drag sequence.\n     * @param event Browser event object that started the sequence.\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Stop propagation if the item is inside another\n        // draggable so we don't start multiple drag sequences.\n        if (this._parentDragRef) {\n            event.stopPropagation();\n        }\n        const isDragging = this.isDragging();\n        const isTouchSequence = isTouchEvent(event);\n        const isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n        const rootElement = this._rootElement;\n        const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (event.target && event.target.draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor || '';\n            rootElement.style.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasStartedDragging = this._hasMoved = false;\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeSubscriptions();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry.scroll.subscribe(scrollEvent => {\n            this._updateOnScroll(scrollEvent);\n        });\n        if (this._boundaryElement) {\n            this._boundaryRect = getMutableClientRect(this._boundaryElement);\n        }\n        // If we have a custom preview we can't know ahead of time how large it'll be so we position\n        // it next to the cursor. The exception is when the consumer has opted into making the preview\n        // the same size as the root element, in which case we do know the size.\n        const previewTemplate = this._previewTemplate;\n        this._pickupPositionInElement = previewTemplate && previewTemplate.template &&\n            !previewTemplate.matchSize ? { x: 0, y: 0 } :\n            this._getPointerPositionInElement(referenceElement, event);\n        const pointerPosition = this._pickupPositionOnPage = this._lastKnownPointerPosition =\n            this._getPointerPositionOnPage(event);\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        toggleVisibility(this._rootElement, true);\n        this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._boundaryRect = this._previewRect = undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run(() => {\n            const container = this._dropContainer;\n            const currentIndex = container.getItemIndex(this);\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            const distance = this._getDragDistance(this._getPointerPositionOnPage(event));\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialIndex,\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance\n            });\n            container.drop(this, currentIndex, this._initialIndex, this._initialContainer, isPointerOverContainer, distance);\n            this._dropContainer = this._initialContainer;\n        });\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     */\n    _updateActiveDropContainer({ x, y }, { x: rawX, y: rawY }) {\n        // Drop container that draggable has been moved into.\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer && this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run(() => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: this._dropContainer });\n                this._dropContainer.exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = newContainer;\n                this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\n                    // If we're re-entering the initial container and sorting is disabled,\n                    // put item the into its starting index to begin with.\n                    newContainer.sortingDisabled ? this._initialIndex : undefined);\n                this.entered.next({\n                    item: this,\n                    container: newContainer,\n                    currentIndex: newContainer.getItemIndex(this)\n                });\n            });\n        }\n        this._dropContainer._startScrollingIfNecessary(rawX, rawY);\n        this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n        this._preview.style.transform =\n            getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n    }\n    /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     */\n    _createPreviewElement() {\n        const previewConfig = this._previewTemplate;\n        const previewClass = this.previewClass;\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        let preview;\n        if (previewTemplate && previewConfig) {\n            // Measure the element before we've inserted the preview\n            // since the insertion could throw off the measurement.\n            const rootRect = previewConfig.matchSize ? this._rootElement.getBoundingClientRect() : null;\n            const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n            viewRef.detectChanges();\n            preview = getRootNode(viewRef, this._document);\n            this._previewRef = viewRef;\n            if (previewConfig.matchSize) {\n                matchElementSize(preview, rootRect);\n            }\n            else {\n                preview.style.transform =\n                    getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n            }\n        }\n        else {\n            const element = this._rootElement;\n            preview = deepCloneNode(element);\n            matchElementSize(preview, element.getBoundingClientRect());\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            pointerEvents: 'none',\n            // We have to reset the margin, because it can throw off positioning relative to the viewport.\n            margin: '0',\n            position: 'fixed',\n            top: '0',\n            left: '0',\n            zIndex: `${this._config.zIndex || 1000}`\n        });\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('dir', this._direction);\n        if (previewClass) {\n            if (Array.isArray(previewClass)) {\n                previewClass.forEach(className => preview.classList.add(className));\n            }\n            else {\n                preview.classList.add(previewClass);\n            }\n        }\n        return preview;\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @returns Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.classList.add('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        const duration = getTransformTransitionDurationInMs(this._preview);\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular(() => {\n            return new Promise(resolve => {\n                const handler = ((event) => {\n                    if (!event || (event.target === this._preview && event.propertyName === 'transform')) {\n                        this._preview.removeEventListener('transitionend', handler);\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                });\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                const timeout = setTimeout(handler, duration * 1.5);\n                this._preview.addEventListener('transitionend', handler);\n            });\n        });\n    }\n    /** Creates an element that will be shown instead of the current element while dragging. */\n    _createPlaceholderElement() {\n        const placeholderConfig = this._placeholderTemplate;\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n            this._placeholderRef.detectChanges();\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @param referenceElement Element that initiated the dragging.\n     * @param event Event that initiated the dragging.\n     */\n    _getPointerPositionInElement(referenceElement, event) {\n        const elementRect = this._rootElement.getBoundingClientRect();\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        const scrollPosition = this._getViewportScrollPosition();\n        const x = point.pageX - referenceRect.left - scrollPosition.left;\n        const y = point.pageY - referenceRect.top - scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y\n        };\n    }\n    /** Determines the point of the page that was touched by the user. */\n    _getPointerPositionOnPage(event) {\n        const scrollPosition = this._getViewportScrollPosition();\n        const point = isTouchEvent(event) ?\n            // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n            // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\n            // to have a value, but Firefox in device emulation mode has a bug where both can be empty\n            // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\n            // throwing an error. The value returned here will be incorrect, but since this only\n            // breaks inside a developer tool and the value is only used for secondary information,\n            // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\n            (event.touches[0] || event.changedTouches[0] || { pageX: 0, pageY: 0 }) : event;\n        const x = point.pageX - scrollPosition.left;\n        const y = point.pageY - scrollPosition.top;\n        // if dragging SVG element, try to convert from the screen coordinate system to the SVG\n        // coordinate system\n        if (this._ownerSVGElement) {\n            const svgMatrix = this._ownerSVGElement.getScreenCTM();\n            if (svgMatrix) {\n                const svgPoint = this._ownerSVGElement.createSVGPoint();\n                svgPoint.x = x;\n                svgPoint.y = y;\n                return svgPoint.matrixTransform(svgMatrix.inverse());\n            }\n        }\n        return { x, y };\n    }\n    /** Gets the pointer position on the page, accounting for any position constraints. */\n    _getConstrainedPointerPosition(point) {\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        let { x, y } = this.constrainPosition ? this.constrainPosition(point, this) : point;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            y = this._pickupPositionOnPage.y;\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            x = this._pickupPositionOnPage.x;\n        }\n        if (this._boundaryRect) {\n            const { x: pickupX, y: pickupY } = this._pickupPositionInElement;\n            const boundaryRect = this._boundaryRect;\n            const previewRect = this._previewRect;\n            const minY = boundaryRect.top + pickupY;\n            const maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n            const minX = boundaryRect.left + pickupX;\n            const maxX = boundaryRect.right - (previewRect.width - pickupX);\n            x = clamp(x, minX, maxX);\n            y = clamp(y, minY, maxY);\n        }\n        return { x, y };\n    }\n    /** Updates the current drag delta, based on the user's current pointer position on the page. */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        const delta = this._pointerDirectionDelta;\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /** Toggles the native drag interactions, based on how many handles are registered. */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /** Removes the manually-added event listeners from the root element. */\n    _removeRootElementListeners(element) {\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyRootElementTransform(x, y) {\n        const transform = getTransform(x, y);\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        if (this._initialTransform == null) {\n            this._initialTransform = this._rootElement.style.transform || '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        this._rootElement.style.transform = this._initialTransform ?\n            transform + ' ' + this._initialTransform : transform;\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @param currentPosition Current position of the user's pointer.\n     */\n    _getDragDistance(currentPosition) {\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        const elementRect = this._rootElement.getBoundingClientRect();\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\n        // different tab). Don't do anything in this case so we don't clear the user's position.\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n            (elementRect.width === 0 && elementRect.height === 0)) {\n            return;\n        }\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        const topOverflow = boundaryRect.top - elementRect.top;\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n    /** Gets the drag start delay, based on the event type. */\n    _getDragStartDelay(event) {\n        const value = this.dragStartDelay;\n        if (typeof value === 'number') {\n            return value;\n        }\n        else if (isTouchEvent(event)) {\n            return value.touch;\n        }\n        return value ? value.mouse : 0;\n    }\n    /** Updates the internal state of the draggable element when scrolling has occurred. */\n    _updateOnScroll(event) {\n        const scrollDifference = this._parentPositions.handleScroll(event);\n        if (scrollDifference) {\n            const target = event.target;\n            // ClientRect dimensions are based on the scroll position of the page and its parent node so\n            // we have to update the cached boundary ClientRect if the user has scrolled. Check for\n            // the `document` specifically since IE doesn't support `contains` on it.\n            if (this._boundaryRect && (target === this._document ||\n                (target !== this._boundaryElement && target.contains(this._boundaryElement)))) {\n                adjustClientRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n            }\n            this._pickupPositionOnPage.x += scrollDifference.left;\n            this._pickupPositionOnPage.y += scrollDifference.top;\n            // If we're in free drag mode, we have to update the active transform, because\n            // it isn't relative to the viewport like the preview inside a drop list.\n            if (!this._dropContainer) {\n                this._activeTransform.x -= scrollDifference.left;\n                this._activeTransform.y -= scrollDifference.top;\n                this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n            }\n        }\n    }\n    /** Gets the scroll position of the viewport. */\n    _getViewportScrollPosition() {\n        const cachedPosition = this._parentPositions.positions.get(this._document);\n        return cachedPosition ? cachedPosition.scrollPosition :\n            this._viewportRuler.getViewportScrollPosition();\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (this._cachedShadowRoot === undefined) {\n            this._cachedShadowRoot = _getShadowRoot(this._rootElement);\n        }\n        return this._cachedShadowRoot;\n    }\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/**\n * Helper to remove a node from the DOM and to do all the necessary null checks.\n * @param node Node to be removed.\n */\nfunction removeNode(node) {\n    if (node && node.parentNode) {\n        node.parentNode.removeChild(node);\n    }\n}\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/** Gets the element into which the drag preview should be inserted. */\nfunction getPreviewInsertionPoint(documentRef, shadowRoot) {\n    // We can't use the body if the user is in fullscreen mode,\n    // because the preview will render under the fullscreen element.\n    // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n    return shadowRoot ||\n        documentRef.fullscreenElement ||\n        documentRef.webkitFullscreenElement ||\n        documentRef.mozFullScreenElement ||\n        documentRef.msFullscreenElement ||\n        documentRef.body;\n}\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\nfunction getRootNode(viewRef, _document) {\n    const rootNodes = viewRef.rootNodes;\n    if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n        return rootNodes[0];\n    }\n    const wrapper = _document.createElement('div');\n    rootNodes.forEach(node => wrapper.appendChild(node));\n    return wrapper;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param sourceRect Dimensions of the source element.\n */\nfunction matchElementSize(target, sourceRect) {\n    target.style.width = `${sourceRect.width}px`;\n    target.style.height = `${sourceRect.height}px`;\n    target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    const from = clamp$1(fromIndex, array.length - 1);\n    const to = clamp$1(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    const target = array[from];\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const from = clamp$1(currentIndex, currentArray.length - 1);\n    const to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/** Clamps a number between zero and a maximum. */\nfunction clamp$1(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\nclass DropListRef {\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        /** Whether starting a dragging sequence from this container is disabled. */\n        this.disabled = false;\n        /** Whether sorting items within the list is disabled. */\n        this.sortingDisabled = false;\n        /**\n         * Whether auto-scrolling the view when the user\n         * moves their pointer close to the edges is disabled.\n         */\n        this.autoScrollDisabled = false;\n        /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n        this.autoScrollStep = 2;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Functions that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits right before dragging has started. */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new Subject();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new Subject();\n        /** Whether an item in the list is being dragged. */\n        this._isDragging = false;\n        /** Cache of the dimensions of all the items inside the container. */\n        this._itemPositions = [];\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n         * the pointer was moving in when the swap occured and whether the user's pointer continued to\n         * overlap with the swapped item after the swapping occurred.\n         */\n        this._previousSwap = { drag: null, delta: 0, overlaps: false };\n        /** Draggable items in the container. */\n        this._draggables = [];\n        /** Drop lists that are connected to the current one. */\n        this._siblings = [];\n        /** Direction in which the list is oriented. */\n        this._orientation = 'vertical';\n        /** Connected siblings that currently have a dragged item. */\n        this._activeSiblings = new Set();\n        /** Layout direction of the drop list. */\n        this._direction = 'ltr';\n        /** Subscription to the window being scrolled. */\n        this._viewportScrollSubscription = Subscription.EMPTY;\n        /** Vertical direction in which the list is currently scrolling. */\n        this._verticalScrollDirection = 0 /* NONE */;\n        /** Horizontal direction in which the list is currently scrolling. */\n        this._horizontalScrollDirection = 0 /* NONE */;\n        /** Used to signal to the current auto-scroll sequence when to stop. */\n        this._stopScrollTimers = new Subject();\n        /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n        this._cachedShadowRoot = null;\n        /** Starts the interval that'll auto-scroll the element. */\n        this._startScrollInterval = () => {\n            this._stopScrolling();\n            interval(0, animationFrameScheduler)\n                .pipe(takeUntil(this._stopScrollTimers))\n                .subscribe(() => {\n                const node = this._scrollNode;\n                const scrollStep = this.autoScrollStep;\n                if (this._verticalScrollDirection === 1 /* UP */) {\n                    incrementVerticalScroll(node, -scrollStep);\n                }\n                else if (this._verticalScrollDirection === 2 /* DOWN */) {\n                    incrementVerticalScroll(node, scrollStep);\n                }\n                if (this._horizontalScrollDirection === 1 /* LEFT */) {\n                    incrementHorizontalScroll(node, -scrollStep);\n                }\n                else if (this._horizontalScrollDirection === 2 /* RIGHT */) {\n                    incrementHorizontalScroll(node, scrollStep);\n                }\n            });\n        };\n        this.element = coerceElement(element);\n        this._document = _document;\n        this.withScrollableParents([this.element]);\n        _dragDropRegistry.registerDropContainer(this);\n        this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n    }\n    /** Removes the drop list functionality from the DOM element. */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._viewportScrollSubscription.unsubscribe();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = null;\n        this._parentPositions.clear();\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /** Whether an item from this list is currently being dragged. */\n    isDragging() {\n        return this._isDragging;\n    }\n    /** Starts dragging an item. */\n    start() {\n        this._draggingStarted();\n        this._notifyReceivingSiblings();\n    }\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        this._draggingStarted();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        let newIndex;\n        if (index == null) {\n            newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\n            if (newIndex === -1) {\n                // We use the coordinates of where the item entered the drop\n                // zone to figure out at which index it should be inserted.\n                newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n            }\n        }\n        else {\n            newIndex = index;\n        }\n        const activeDraggables = this._activeDraggables;\n        const currentIndex = activeDraggables.indexOf(item);\n        const placeholder = item.getPlaceholderElement();\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            const element = newPositionReference.getRootElement();\n            element.parentElement.insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else if (this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n            const reference = activeDraggables[0].getRootElement();\n            reference.parentNode.insertBefore(placeholder, reference);\n            activeDraggables.unshift(item);\n        }\n        else {\n            coerceElement(this.element).appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that the positions were already cached when we called `start` above,\n        // but we need to refresh them since the amount of items has changed and also parent rects.\n        this._cacheItemPositions();\n        this._cacheParentPositions();\n        // Notify siblings at the end so that the item has been inserted into the `activeDraggables`.\n        this._notifyReceivingSiblings();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param item Item that was dragged out.\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * @param item Item being dropped into the container.\n     * @param currentIndex Index at which the item should be inserted.\n     * @param previousIndex Index of the item when dragging started.\n     * @param previousContainer Container from which the item got dragged in.\n     * @param isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param distance Distance the user has dragged since the start of the dragging sequence.\n     */\n    drop(item, currentIndex, previousIndex, previousContainer, isPointerOverContainer, distance) {\n        this._reset();\n        this.dropped.next({\n            item,\n            currentIndex,\n            previousIndex,\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @param items Items that are a part of this list.\n     */\n    withItems(items) {\n        const previousItems = this._draggables;\n        this._draggables = items;\n        items.forEach(item => item._withDropContainer(this));\n        if (this.isDragging()) {\n            const draggedItems = previousItems.filter(item => item.isDragging());\n            // If all of the items being dragged were removed\n            // from the list, abort the current drag sequence.\n            if (draggedItems.every(item => items.indexOf(item) === -1)) {\n                this._reset();\n            }\n            else {\n                this._cacheItems();\n            }\n        }\n        return this;\n    }\n    /** Sets the layout direction of the drop list. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @param connectedTo Other containers that the current containers should be connected to.\n     */\n    connectedTo(connectedTo) {\n        this._siblings = connectedTo.slice();\n        return this;\n    }\n    /**\n     * Sets the orientation of the container.\n     * @param orientation New orientation for the container.\n     */\n    withOrientation(orientation) {\n        this._orientation = orientation;\n        return this;\n    }\n    /**\n     * Sets which parent elements are can be scrolled while the user is dragging.\n     * @param elements Elements that can be scrolled.\n     */\n    withScrollableParents(elements) {\n        const element = coerceElement(this.element);\n        // We always allow the current element to be scrollable\n        // so we need to ensure that it's in the array.\n        this._scrollableElements =\n            elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n        return this;\n    }\n    /** Gets the scrollable parents that are registered with this drop container. */\n    getScrollableParents() {\n        return this._scrollableElements;\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param item Item whose index should be determined.\n     */\n    getItemIndex(item) {\n        if (!this._isDragging) {\n            return this._draggables.indexOf(item);\n        }\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        const items = this._orientation === 'horizontal' && this._direction === 'rtl' ?\n            this._itemPositions.slice().reverse() : this._itemPositions;\n        return findIndex(items, currentItem => currentItem.drag === item);\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled || !this._clientRect ||\n            !isPointerNearClientRect(this._clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n            return;\n        }\n        const siblings = this._itemPositions;\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return;\n        }\n        const isHorizontal = this._orientation === 'horizontal';\n        const currentIndex = findIndex(siblings, currentItem => currentItem.drag === item);\n        const siblingAtNewPosition = siblings[newIndex];\n        const currentPosition = siblings[currentIndex].clientRect;\n        const newPosition = siblingAtNewPosition.clientRect;\n        const delta = currentIndex > newIndex ? 1 : -1;\n        // How many pixels the item's placeholder should be offset.\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        this.sorted.next({\n            previousIndex: currentIndex,\n            currentIndex: newIndex,\n            container: this,\n            item\n        });\n        siblings.forEach((sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            const isDraggedItem = sibling.drag === item;\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            const elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = `translate3d(${Math.round(sibling.offset)}px, 0, 0)`;\n                adjustClientRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = `translate3d(0, ${Math.round(sibling.offset)}px, 0)`;\n                adjustClientRect(sibling.clientRect, offset, 0);\n            }\n        });\n        // Note that it's important that we do this after the client rects have been adjusted.\n        this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param pointerX User's pointer position along the x axis.\n     * @param pointerY User's pointer position along the y axis.\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        let scrollNode;\n        let verticalScrollDirection = 0 /* NONE */;\n        let horizontalScrollDirection = 0 /* NONE */;\n        // Check whether we should start scrolling any of the parent containers.\n        this._parentPositions.positions.forEach((position, element) => {\n            // We have special handling for the `document` below. Also this would be\n            // nicer with a  for...of loop, but it requires changing a compiler flag.\n            if (element === this._document || !position.clientRect || scrollNode) {\n                return;\n            }\n            if (isPointerNearClientRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n                [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(element, position.clientRect, pointerX, pointerY);\n                if (verticalScrollDirection || horizontalScrollDirection) {\n                    scrollNode = element;\n                }\n            }\n        });\n        // Otherwise check if we can start scrolling the viewport.\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            const clientRect = { width, height, top: 0, right: width, bottom: height, left: 0 };\n            verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode && (verticalScrollDirection !== this._verticalScrollDirection ||\n            horizontalScrollDirection !== this._horizontalScrollDirection ||\n            scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /** Stops any currently-running auto-scroll sequences. */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /** Starts the dragging sequence within the list. */\n    _draggingStarted() {\n        const styles = coerceElement(this.element).style;\n        this.beforeStarted.next();\n        this._isDragging = true;\n        // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n        // scrolling. The browser seems to round the value based on the snapping points which means\n        // that we can't increment/decrement the scroll position.\n        this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n        styles.scrollSnapType = styles.msScrollSnapType = 'none';\n        this._cacheItems();\n        this._viewportScrollSubscription.unsubscribe();\n        this._listenToScrollEvents();\n    }\n    /** Caches the positions of the configured scrollable parents. */\n    _cacheParentPositions() {\n        const element = coerceElement(this.element);\n        this._parentPositions.cache(this._scrollableElements);\n        // The list element is always in the `scrollableElements`\n        // so we can take advantage of the cached `ClientRect`.\n        this._clientRect = this._parentPositions.positions.get(element).clientRect;\n    }\n    /** Refreshes the position cache of the items and sibling containers. */\n    _cacheItemPositions() {\n        const isHorizontal = this._orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables.map(drag => {\n            const elementToMeasure = drag.getVisibleElement();\n            return { drag, offset: 0, clientRect: getMutableClientRect(elementToMeasure) };\n        }).sort((a, b) => {\n            return isHorizontal ? a.clientRect.left - b.clientRect.left :\n                a.clientRect.top - b.clientRect.top;\n        });\n    }\n    /** Resets the container to its initial state. */\n    _reset() {\n        this._isDragging = false;\n        const styles = coerceElement(this.element).style;\n        styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables.forEach(item => {\n            const rootElement = item.getRootElement();\n            if (rootElement) {\n                rootElement.style.transform = '';\n            }\n        });\n        this._siblings.forEach(sibling => sibling._stopReceiving(this));\n        this._activeDraggables = [];\n        this._itemPositions = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._previousSwap.overlaps = false;\n        this._stopScrolling();\n        this._viewportScrollSubscription.unsubscribe();\n        this._parentPositions.clear();\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @param currentIndex Index of the item currently being dragged.\n     * @param siblings All of the items in the list.\n     * @param delta Direction in which the user is moving.\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        const currentPosition = siblings[currentIndex].clientRect;\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            const start = isHorizontal ? 'left' : 'top';\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @param currentPosition Current position of the item.\n     * @param newPosition Position of the item where the current item should be moved.\n     * @param delta Direction in which the user is moving.\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        let itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n            newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\n                newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Checks if pointer is entering in the first position\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _shouldEnterAsFirstChild(pointerX, pointerY) {\n        if (!this._activeDraggables.length) {\n            return false;\n        }\n        const itemPositions = this._itemPositions;\n        const isHorizontal = this._orientation === 'horizontal';\n        // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n        // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n        const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n        if (reversed) {\n            const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n            return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n        }\n        else {\n            const firstItemRect = itemPositions[0].clientRect;\n            return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        const index = findIndex(this._itemPositions, ({ drag, clientRect }, _, array) => {\n            if (drag === item) {\n                // If there's only one item left in the container, it must be\n                // the dragged item itself so we use it as a reference.\n                return array.length < 2;\n            }\n            if (delta) {\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, their cursor hasn't left\n                // the item after we made the swap, and they didn't change the direction in which they're\n                // dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag && this._previousSwap.overlaps &&\n                    direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal ?\n                // Round these down since most browsers report client rects with\n                // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right) :\n                pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n        });\n        return (index === -1 || !this.sortPredicate(index, item, this)) ? -1 : index;\n    }\n    /** Caches the current items in the list and their positions. */\n    _cacheItems() {\n        this._activeDraggables = this._draggables.slice();\n        this._cacheItemPositions();\n        this._cacheParentPositions();\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param x Pointer position along the X axis.\n     * @param y Pointer position along the Y axis.\n     */\n    _isOverContainer(x, y) {\n        return this._clientRect != null && isInsideClientRect(this._clientRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param item Drag item that is being moved.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param item Item that is being dragged into the list.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _canReceive(item, x, y) {\n        if (!this._clientRect || !isInsideClientRect(this._clientRect, x, y) ||\n            !this.enterPredicate(item, this)) {\n            return false;\n        }\n        const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y);\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        const nativeElement = coerceElement(this.element);\n        // The `ClientRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param sibling Sibling in which dragging has started.\n     */\n    _startReceiving(sibling, items) {\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling) && items.every(item => {\n            // Note that we have to add an exception to the `enterPredicate` for items that started off\n            // in this drop list. The drag ref has logic that allows an item to return to its initial\n            // container, if it has left the initial container and none of the connected containers\n            // allow it to enter. See `DragRef._updateActiveDropContainer` for more context.\n            return this.enterPredicate(item, this) || this._draggables.indexOf(item) > -1;\n        })) {\n            activeSiblings.add(sibling);\n            this._cacheParentPositions();\n            this._listenToScrollEvents();\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param sibling Sibling whose dragging has stopped.\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollSubscription = this._dragDropRegistry.scroll.subscribe(event => {\n            if (this.isDragging()) {\n                const scrollDifference = this._parentPositions.handleScroll(event);\n                if (scrollDifference) {\n                    // Since we know the amount that the user has scrolled we can shift all of the\n                    // client rectangles ourselves. This is cheaper than re-measuring everything and\n                    // we can avoid inconsistent behavior where we might be measuring the element before\n                    // its position has changed.\n                    this._itemPositions.forEach(({ clientRect }) => {\n                        adjustClientRect(clientRect, scrollDifference.top, scrollDifference.left);\n                    });\n                    // We need two loops for this, because we want all of the cached\n                    // positions to be up-to-date before we re-sort the item.\n                    this._itemPositions.forEach(({ drag }) => {\n                        if (this._dragDropRegistry.isDragging(drag)) {\n                            // We need to re-sort the item manually, because the pointer move\n                            // events won't be dispatched while the user is scrolling.\n                            drag._sortFromLastPointerPosition();\n                        }\n                    });\n                }\n            }\n            else if (this.isReceiving()) {\n                this._cacheParentPositions();\n            }\n        });\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (!this._cachedShadowRoot) {\n            const shadowRoot = _getShadowRoot(coerceElement(this.element));\n            this._cachedShadowRoot = shadowRoot || this._document;\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Notifies any siblings that may potentially receive the item. */\n    _notifyReceivingSiblings() {\n        const draggedItems = this._activeDraggables.filter(item => item.isDragging());\n        this._siblings.forEach(sibling => sibling._startReceiving(this, draggedItems));\n    }\n}\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.findIndex` which isn't part of the standard Google typings.\n * @param array Array in which to look for matches.\n * @param predicate Function used to determine whether an item is a match.\n */\nfunction findIndex(array, predicate) {\n    for (let i = 0; i < array.length; i++) {\n        if (predicate(array[i], i, array)) {\n            return i;\n        }\n    }\n    return -1;\n}\n/**\n * Increments the vertical scroll position of a node.\n * @param node Node whose scroll position should change.\n * @param amount Amount of pixels that the `node` should be scrolled.\n */\nfunction incrementVerticalScroll(node, amount) {\n    if (node === window) {\n        node.scrollBy(0, amount);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        node.scrollTop += amount;\n    }\n}\n/**\n * Increments the horizontal scroll position of a node.\n * @param node Node whose scroll position should change.\n * @param amount Amount of pixels that the `node` should be scrolled.\n */\nfunction incrementHorizontalScroll(node, amount) {\n    if (node === window) {\n        node.scrollBy(amount, 0);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        node.scrollLeft += amount;\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return 1 /* UP */;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return 2 /* DOWN */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return 1 /* LEFT */;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return 2 /* RIGHT */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getElementScrollDirections(element, clientRect, pointerX, pointerY) {\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    let verticalScrollDirection = 0 /* NONE */;\n    let horizontalScrollDirection = 0 /* NONE */;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        const scrollTop = element.scrollTop;\n        if (computedVertical === 1 /* UP */) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = 1 /* UP */;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = 2 /* DOWN */;\n        }\n    }\n    if (computedHorizontal) {\n        const scrollLeft = element.scrollLeft;\n        if (computedHorizontal === 1 /* LEFT */) {\n            if (scrollLeft > 0) {\n                horizontalScrollDirection = 1 /* LEFT */;\n            }\n        }\n        else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n            horizontalScrollDirection = 2 /* RIGHT */;\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true\n});\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\nclass DragDropRegistry {\n    constructor(_ngZone, _document) {\n        this._ngZone = _ngZone;\n        /** Registered drop container instances. */\n        this._dropInstances = new Set();\n        /** Registered drag item instances. */\n        this._dragInstances = new Set();\n        /** Drag item instances that are currently being dragged. */\n        this._activeDragInstances = [];\n        /** Keeps track of the event listeners that we've bound to the `document`. */\n        this._globalListeners = new Map();\n        /**\n         * Predicate function to check if an item is being dragged.  Moved out into a property,\n         * because it'll be called a lot and we don't want to create a new function every time.\n         */\n        this._draggingPredicate = (item) => item.isDragging();\n        /**\n         * Emits the `touchmove` or `mousemove` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerMove = new Subject();\n        /**\n         * Emits the `touchend` or `mouseup` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerUp = new Subject();\n        /** Emits when the viewport has been scrolled while the user is dragging an item. */\n        this.scroll = new Subject();\n        /**\n         * Event listener that will prevent the default browser action while the user is dragging.\n         * @param event Event whose default action should be prevented.\n         */\n        this._preventDefaultWhileDragging = (event) => {\n            if (this._activeDragInstances.length > 0) {\n                event.preventDefault();\n            }\n        };\n        /** Event listener for `touchmove` that is bound even if no dragging is happening. */\n        this._persistentTouchmoveListener = (event) => {\n            if (this._activeDragInstances.length > 0) {\n                // Note that we only want to prevent the default action after dragging has actually started.\n                // Usually this is the same time at which the item is added to the `_activeDragInstances`,\n                // but it could be pushed back if the user has set up a drag delay or threshold.\n                if (this._activeDragInstances.some(this._draggingPredicate)) {\n                    event.preventDefault();\n                }\n                this.pointerMove.next(event);\n            }\n        };\n        this._document = _document;\n    }\n    /** Adds a drop container to the registry. */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            this._dropInstances.add(drop);\n        }\n    }\n    /** Adds a drag item instance to the registry. */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular(() => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._document.addEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n            });\n        }\n    }\n    /** Removes a drop container from the registry. */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /** Removes a drag item instance from the registry. */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._document.removeEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param drag Drag instance which is being dragged.\n     * @param event Event that initiated the dragging.\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances.indexOf(drag) > -1) {\n            return;\n        }\n        this._activeDragInstances.push(drag);\n        if (this._activeDragInstances.length === 1) {\n            const isTouchEvent = event.type.startsWith('touch');\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            this._globalListeners\n                .set(isTouchEvent ? 'touchend' : 'mouseup', {\n                handler: (e) => this.pointerUp.next(e),\n                options: true\n            })\n                .set('scroll', {\n                handler: (e) => this.scroll.next(e),\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                options: true\n            })\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                .set('selectstart', {\n                handler: this._preventDefaultWhileDragging,\n                options: activeCapturingEventOptions\n            });\n            // We don't have to bind a move event for touch drag sequences, because\n            // we already have a persistent global one bound from `registerDragItem`.\n            if (!isTouchEvent) {\n                this._globalListeners.set('mousemove', {\n                    handler: (e) => this.pointerMove.next(e),\n                    options: activeCapturingEventOptions\n                });\n            }\n            this._ngZone.runOutsideAngular(() => {\n                this._globalListeners.forEach((config, name) => {\n                    this._document.addEventListener(name, config.handler, config.options);\n                });\n            });\n        }\n    }\n    /** Stops dragging a drag item instance. */\n    stopDragging(drag) {\n        const index = this._activeDragInstances.indexOf(drag);\n        if (index > -1) {\n            this._activeDragInstances.splice(index, 1);\n            if (this._activeDragInstances.length === 0) {\n                this._clearGlobalListeners();\n            }\n        }\n    }\n    /** Gets whether a drag item instance is currently being dragged. */\n    isDragging(drag) {\n        return this._activeDragInstances.indexOf(drag) > -1;\n    }\n    ngOnDestroy() {\n        this._dragInstances.forEach(instance => this.removeDragItem(instance));\n        this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /** Clears out the global event listeners from the `document`. */\n    _clearGlobalListeners() {\n        this._globalListeners.forEach((config, name) => {\n            this._document.removeEventListener(name, config.handler, config.options);\n        });\n        this._globalListeners.clear();\n    }\n}\nDragDropRegistry.ɵfac = function DragDropRegistry_Factory(t) { return new (t || DragDropRegistry)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\nDragDropRegistry.ɵprov = ɵɵdefineInjectable({ factory: function DragDropRegistry_Factory() { return new DragDropRegistry(ɵɵinject(NgZone), ɵɵinject(DOCUMENT)); }, token: DragDropRegistry, providedIn: \"root\" });\nDragDropRegistry.ctorParameters = () => [\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DragDropRegistry, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @param element Element to which to attach the dragging functionality.\n     * @param config Object used to configure the dragging behavior.\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @param element Element to which to attach the drop list functionality.\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n}\nDragDrop.ɵfac = function DragDrop_Factory(t) { return new (t || DragDrop)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DragDropRegistry)); };\nDragDrop.ɵprov = ɵɵdefineInjectable({ factory: function DragDrop_Factory() { return new DragDrop(ɵɵinject(DOCUMENT), ɵɵinject(NgZone), ɵɵinject(ViewportRuler), ɵɵinject(DragDropRegistry)); }, token: DragDrop, providedIn: \"root\" });\nDragDrop.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewportRuler },\n    { type: DragDropRegistry }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DragDrop, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.ViewportRuler }, { type: DragDropRegistry }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST_GROUP = new InjectionToken('CdkDropListGroup');\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\nclass CdkDropListGroup {\n    constructor() {\n        /** Drop lists registered inside the group. */\n        this._items = new Set();\n        this._disabled = false;\n    }\n    /** Whether starting a dragging sequence from inside this group is disabled. */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    ngOnDestroy() {\n        this._items.clear();\n    }\n}\nCdkDropListGroup.ɵfac = function CdkDropListGroup_Factory(t) { return new (t || CdkDropListGroup)(); };\nCdkDropListGroup.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDropListGroup, selectors: [[\"\", \"cdkDropListGroup\", \"\"]], inputs: { disabled: [\"cdkDropListGroupDisabled\", \"disabled\"] }, exportAs: [\"cdkDropListGroup\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }])] });\nCdkDropListGroup.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDropListGroupDisabled',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDropListGroup, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDropListGroup]',\n                exportAs: 'cdkDropListGroup',\n                providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }]\n            }]\n    }], function () { return []; }, { disabled: [{\n            type: Input,\n            args: ['cdkDropListGroupDisabled']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Asserts that a particular node is an element.\n * @param node Node to be checked.\n * @param name Name to attach to the error message.\n */\nfunction assertElementNode(node, name) {\n    if (node.nodeType !== 1) {\n        throw Error(`${name} must be attached to an element node. ` +\n            `Currently attached to \"${node.nodeName}\".`);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n/**\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST = new InjectionToken('CdkDropList');\nconst ɵ0 = undefined;\n/** Container that wraps a set of draggable items. */\nclass CdkDropList {\n    constructor(\n    /** Element that the drop list is attached to. */\n    element, dragDrop, _changeDetectorRef, _scrollDispatcher, _dir, _group, config) {\n        this.element = element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._dir = _dir;\n        this._group = _group;\n        /** Emits when the list has been destroyed. */\n        this._destroyed = new Subject();\n        /**\n         * Other draggable containers that this container is connected to and into which the\n         * container's items can be transferred. Can either be references to other drop containers,\n         * or their unique IDs.\n         */\n        this.connectedTo = [];\n        /**\n         * Unique ID for the drop zone. Can be used as a reference\n         * in the `connectedTo` of another `CdkDropList`.\n         */\n        this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Functions that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new EventEmitter();\n        /**\n         * Keeps track of the items that are registered with this container. Historically we used to\n         * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n         * well which means that we can't handle cases like dragging the headers of a `mat-table`\n         * correctly. What we do instead is to have the items register themselves with the container\n         * and then we sort them based on their position in the DOM.\n         */\n        this._unsortedItems = new Set();\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDropList');\n        }\n        this._dropListRef = dragDrop.createDropList(element);\n        this._dropListRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        this._dropListRef.enterPredicate = (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        };\n        this._dropListRef.sortPredicate =\n            (index, drag, drop) => {\n                return this.sortPredicate(index, drag.data, drop.data);\n            };\n        this._setupInputSyncSubscription(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (_group) {\n            _group._items.add(this);\n        }\n    }\n    /** Whether starting a dragging sequence from this container is disabled. */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    set disabled(value) {\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n        // the user in a disabled state, so we also need to sync it as it's being set.\n        this._dropListRef.disabled = this._disabled = coerceBooleanProperty(value);\n    }\n    /** Registers an items with the drop list. */\n    addItem(item) {\n        this._unsortedItems.add(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Removes an item from the drop list. */\n    removeItem(item) {\n        this._unsortedItems.delete(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Gets the registered items in the list, sorted by their position in the DOM. */\n    getSortedItems() {\n        return Array.from(this._unsortedItems).sort((a, b) => {\n            const documentPosition = a._dragRef.getVisibleElement().compareDocumentPosition(b._dragRef.getVisibleElement());\n            // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n            // tslint:disable-next-line:no-bitwise\n            return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n        });\n    }\n    ngOnDestroy() {\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._unsortedItems.clear();\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n    _setupInputSyncSubscription(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe(value => ref.withDirection(value));\n        }\n        ref.beforeStarted.subscribe(() => {\n            const siblings = coerceArray(this.connectedTo).map(drop => {\n                if (typeof drop === 'string') {\n                    const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);\n                    if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                        console.warn(`CdkDropList could not find connected drop list with id \"${drop}\"`);\n                    }\n                    return correspondingDropList;\n                }\n                return drop;\n            });\n            if (this._group) {\n                this._group._items.forEach(drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                });\n            }\n            // Note that we resolve the scrollable parents here so that we delay the resolution\n            // as long as possible, ensuring that the element is in its final place in the DOM.\n            if (!this._scrollableParentsResolved) {\n                const scrollableParents = this._scrollDispatcher\n                    .getAncestorScrollContainers(this.element)\n                    .map(scrollable => scrollable.getElementRef().nativeElement);\n                this._dropListRef.withScrollableParents(scrollableParents);\n                // Only do this once since it involves traversing the DOM and the parents\n                // shouldn't be able to change without the drop list being destroyed.\n                this._scrollableParentsResolved = true;\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = coerceBooleanProperty(this.sortingDisabled);\n            ref.autoScrollDisabled = coerceBooleanProperty(this.autoScrollDisabled);\n            ref.autoScrollStep = coerceNumberProperty(this.autoScrollStep, 2);\n            ref\n                .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n                .withOrientation(this.orientation);\n        });\n    }\n    /** Handles events from the underlying DropListRef. */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe(() => {\n            this._syncItemsWithRef();\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data\n            });\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.sorted.subscribe(event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data\n            });\n        });\n        ref.dropped.subscribe(event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                item: event.item.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                distance: event.distance\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n        this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n        this.orientation = listOrientation || 'vertical';\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n    }\n    /** Syncs up the registered drag items with underlying drop list ref. */\n    _syncItemsWithRef() {\n        this._dropListRef.withItems(this.getSortedItems().map(item => item._dragRef));\n    }\n}\nCdkDropList.ɵfac = function CdkDropList_Factory(t) { return new (t || CdkDropList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(CDK_DROP_LIST_GROUP, 12), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8)); };\nCdkDropList.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDropList, selectors: [[\"\", \"cdkDropList\", \"\"], [\"cdk-drop-list\"]], hostAttrs: [1, \"cdk-drop-list\"], hostVars: 7, hostBindings: function CdkDropList_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id);\n        ɵngcc0.ɵɵclassProp(\"cdk-drop-list-disabled\", ctx.disabled)(\"cdk-drop-list-dragging\", ctx._dropListRef.isDragging())(\"cdk-drop-list-receiving\", ctx._dropListRef.isReceiving());\n    } }, inputs: { connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"], id: \"id\", enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"], sortPredicate: [\"cdkDropListSortPredicate\", \"sortPredicate\"], disabled: [\"cdkDropListDisabled\", \"disabled\"], sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\"], autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\"], orientation: [\"cdkDropListOrientation\", \"orientation\"], lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"], data: [\"cdkDropListData\", \"data\"], autoScrollStep: [\"cdkDropListAutoScrollStep\", \"autoScrollStep\"] }, outputs: { dropped: \"cdkDropListDropped\", entered: \"cdkDropListEntered\", exited: \"cdkDropListExited\", sorted: \"cdkDropListSorted\" }, exportAs: [\"cdkDropList\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            // Prevent child drop lists from picking up the same group as their parent.\n            { provide: CDK_DROP_LIST_GROUP, useValue: ɵ0 },\n            { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n        ])] });\n/** Keeps track of the drop lists that are currently on the page. */\nCdkDropList._dropLists = [];\nCdkDropList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: DragDrop },\n    { type: ChangeDetectorRef },\n    { type: ScrollDispatcher },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: CdkDropListGroup, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DROP_LIST_GROUP,] }, { type: SkipSelf }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DRAG_CONFIG,] }] }\n];\nCdkDropList.propDecorators = {\n    connectedTo: [{ type: Input, args: ['cdkDropListConnectedTo',] }],\n    data: [{ type: Input, args: ['cdkDropListData',] }],\n    orientation: [{ type: Input, args: ['cdkDropListOrientation',] }],\n    id: [{ type: Input }],\n    lockAxis: [{ type: Input, args: ['cdkDropListLockAxis',] }],\n    disabled: [{ type: Input, args: ['cdkDropListDisabled',] }],\n    sortingDisabled: [{ type: Input, args: ['cdkDropListSortingDisabled',] }],\n    enterPredicate: [{ type: Input, args: ['cdkDropListEnterPredicate',] }],\n    sortPredicate: [{ type: Input, args: ['cdkDropListSortPredicate',] }],\n    autoScrollDisabled: [{ type: Input, args: ['cdkDropListAutoScrollDisabled',] }],\n    autoScrollStep: [{ type: Input, args: ['cdkDropListAutoScrollStep',] }],\n    dropped: [{ type: Output, args: ['cdkDropListDropped',] }],\n    entered: [{ type: Output, args: ['cdkDropListEntered',] }],\n    exited: [{ type: Output, args: ['cdkDropListExited',] }],\n    sorted: [{ type: Output, args: ['cdkDropListSorted',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDropList, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDropList], cdk-drop-list',\n                exportAs: 'cdkDropList',\n                providers: [\n                    // Prevent child drop lists from picking up the same group as their parent.\n                    { provide: CDK_DROP_LIST_GROUP, useValue: ɵ0 },\n                    { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                ],\n                host: {\n                    'class': 'cdk-drop-list',\n                    '[attr.id]': 'id',\n                    '[class.cdk-drop-list-disabled]': 'disabled',\n                    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: DragDrop }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.ScrollDispatcher }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: CdkDropListGroup, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_DROP_LIST_GROUP]\n            }, {\n                type: SkipSelf\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_CONFIG]\n            }] }]; }, { connectedTo: [{\n            type: Input,\n            args: ['cdkDropListConnectedTo']\n        }], id: [{\n            type: Input\n        }], enterPredicate: [{\n            type: Input,\n            args: ['cdkDropListEnterPredicate']\n        }], sortPredicate: [{\n            type: Input,\n            args: ['cdkDropListSortPredicate']\n        }], dropped: [{\n            type: Output,\n            args: ['cdkDropListDropped']\n        }], entered: [{\n            type: Output,\n            args: ['cdkDropListEntered']\n        }], exited: [{\n            type: Output,\n            args: ['cdkDropListExited']\n        }], sorted: [{\n            type: Output,\n            args: ['cdkDropListSorted']\n        }], disabled: [{\n            type: Input,\n            args: ['cdkDropListDisabled']\n        }], sortingDisabled: [{\n            type: Input,\n            args: ['cdkDropListSortingDisabled']\n        }], autoScrollDisabled: [{\n            type: Input,\n            args: ['cdkDropListAutoScrollDisabled']\n        }], orientation: [{\n            type: Input,\n            args: ['cdkDropListOrientation']\n        }], lockAxis: [{\n            type: Input,\n            args: ['cdkDropListLockAxis']\n        }], data: [{\n            type: Input,\n            args: ['cdkDropListData']\n        }], autoScrollStep: [{\n            type: Input,\n            args: ['cdkDropListAutoScrollStep']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_HANDLE = new InjectionToken('CdkDragHandle');\n/** Handle that can be used to drag a CdkDrag instance. */\nclass CdkDragHandle {\n    constructor(element, parentDrag) {\n        this.element = element;\n        /** Emits when the state of the handle has changed. */\n        this._stateChanges = new Subject();\n        this._disabled = false;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDragHandle');\n        }\n        this._parentDrag = parentDrag;\n    }\n    /** Whether starting to drag through this handle is disabled. */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._stateChanges.next(this);\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n}\nCdkDragHandle.ɵfac = function CdkDragHandle_Factory(t) { return new (t || CdkDragHandle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_PARENT, 12)); };\nCdkDragHandle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDragHandle, selectors: [[\"\", \"cdkDragHandle\", \"\"]], hostAttrs: [1, \"cdk-drag-handle\"], inputs: { disabled: [\"cdkDragHandleDisabled\", \"disabled\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }])] });\nCdkDragHandle.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DRAG_PARENT,] }, { type: Optional }, { type: SkipSelf }] }\n];\nCdkDragHandle.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDragHandleDisabled',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDragHandle, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDragHandle]',\n                host: {\n                    'class': 'cdk-drag-handle'\n                },\n                providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_DRAG_PARENT]\n            }, {\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }]; }, { disabled: [{\n            type: Input,\n            args: ['cdkDragHandleDisabled']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PLACEHOLDER = new InjectionToken('CdkDragPlaceholder');\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\nclass CdkDragPlaceholder {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nCdkDragPlaceholder.ɵfac = function CdkDragPlaceholder_Factory(t) { return new (t || CdkDragPlaceholder)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkDragPlaceholder.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDragPlaceholder, selectors: [[\"ng-template\", \"cdkDragPlaceholder\", \"\"]], inputs: { data: \"data\" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }])] });\nCdkDragPlaceholder.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPlaceholder.propDecorators = {\n    data: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDragPlaceholder, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[cdkDragPlaceholder]',\n                providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }]\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, { data: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PREVIEW = new InjectionToken('CdkDragPreview');\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\nclass CdkDragPreview {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._matchSize = false;\n    }\n    /** Whether the preview should preserve the same size as the item that is being dragged. */\n    get matchSize() { return this._matchSize; }\n    set matchSize(value) { this._matchSize = coerceBooleanProperty(value); }\n}\nCdkDragPreview.ɵfac = function CdkDragPreview_Factory(t) { return new (t || CdkDragPreview)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkDragPreview.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDragPreview, selectors: [[\"ng-template\", \"cdkDragPreview\", \"\"]], inputs: { matchSize: \"matchSize\", data: \"data\" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }])] });\nCdkDragPreview.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPreview.propDecorators = {\n    data: [{ type: Input }],\n    matchSize: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDragPreview, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[cdkDragPreview]',\n                providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }]\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, { matchSize: [{\n            type: Input\n        }], data: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst DRAG_HOST_CLASS = 'cdk-drag';\n/** Element that can be moved inside a CdkDropList container. */\nclass CdkDrag {\n    constructor(\n    /** Element that the draggable is attached to. */\n    element, \n    /** Droppable container that the draggable is a part of. */\n    dropContainer, \n    /**\n     * @deprecated `_document` parameter no longer being used and will be removed.\n     * @breaking-change 12.0.0\n     */\n    _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, _selfHandle, _parentDrag) {\n        this.element = element;\n        this.dropContainer = dropContainer;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._selfHandle = _selfHandle;\n        this._parentDrag = _parentDrag;\n        this._destroyed = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new EventEmitter();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new EventEmitter();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new EventEmitter();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new EventEmitter();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new EventEmitter();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = new Observable((observer) => {\n            const subscription = this._dragRef.moved.pipe(map(movedEvent => ({\n                source: this,\n                pointerPosition: movedEvent.pointerPosition,\n                event: movedEvent.event,\n                delta: movedEvent.delta,\n                distance: movedEvent.distance\n            }))).subscribe(observer);\n            return () => {\n                subscription.unsubscribe();\n            };\n        });\n        this._dragRef = dragDrop.createDrag(element, {\n            dragStartThreshold: config && config.dragStartThreshold != null ?\n                config.dragStartThreshold : 5,\n            pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null ?\n                config.pointerDirectionChangeThreshold : 5,\n            zIndex: config === null || config === void 0 ? void 0 : config.zIndex,\n        });\n        this._dragRef.data = this;\n        // We have to keep track of the drag instances in order to be able to match an element to\n        // a drag instance. We can't go through the global registry of `DragRef`, because the root\n        // element could be different.\n        CdkDrag._dragInstances.push(this);\n        if (config) {\n            this._assignDefaults(config);\n        }\n        // Note that usually the container is assigned when the drop list is picks up the item, but in\n        // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n        // where there are no items on the first change detection pass, but the items get picked up as\n        // soon as the user triggers another pass by dragging. This is a problem, because the item would\n        // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n        // is too late since the two modes save different kinds of information. We work around it by\n        // assigning the drop container both from here and the list.\n        if (dropContainer) {\n            this._dragRef._withDropContainer(dropContainer._dropListRef);\n            dropContainer.addItem(this);\n        }\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._dragRef.disabled = this._disabled;\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._dragRef.reset();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    ngAfterViewInit() {\n        // We need to wait for the zone to stabilize, in order for the reference\n        // element to be in the proper place in the DOM. This is mostly relevant\n        // for draggable elements inside portals since they get stamped out in\n        // their original DOM position and then they get transferred to the portal.\n        this._ngZone.onStable\n            .pipe(take(1), takeUntil(this._destroyed))\n            .subscribe(() => {\n            this._updateRootElement();\n            // Listen for any newly-added handles.\n            this._handles.changes.pipe(startWith(this._handles), \n            // Sync the new handles with the DragRef.\n            tap((handles) => {\n                const childHandleElements = handles\n                    .filter(handle => handle._parentDrag === this)\n                    .map(handle => handle.element);\n                // Usually handles are only allowed to be a descendant of the drag element, but if\n                // the consumer defined a different drag root, we should allow the drag element\n                // itself to be a handle too.\n                if (this._selfHandle && this.rootElementSelector) {\n                    childHandleElements.push(this.element);\n                }\n                this._dragRef.withHandles(childHandleElements);\n            }), \n            // Listen if the state of any of the handles changes.\n            switchMap((handles) => {\n                return merge(...handles.map(item => {\n                    return item._stateChanges.pipe(startWith(item));\n                }));\n            }), takeUntil(this._destroyed)).subscribe(handleInstance => {\n                // Enabled/disable the handle that changed in the DragRef.\n                const dragRef = this._dragRef;\n                const handle = handleInstance.element.nativeElement;\n                handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n            });\n            if (this.freeDragPosition) {\n                this._dragRef.setFreeDragPosition(this.freeDragPosition);\n            }\n        });\n    }\n    ngOnChanges(changes) {\n        const rootSelectorChange = changes['rootElementSelector'];\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in `ngAfterViewInit` where it needs to be deferred.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Skip the first change since it's being handled in `ngAfterViewInit`.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    ngOnDestroy() {\n        if (this.dropContainer) {\n            this.dropContainer.removeItem(this);\n        }\n        const index = CdkDrag._dragInstances.indexOf(this);\n        if (index > -1) {\n            CdkDrag._dragInstances.splice(index, 1);\n        }\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._dragRef.dispose();\n    }\n    /** Syncs the root element with the `DragRef`. */\n    _updateRootElement() {\n        const element = this.element.nativeElement;\n        const rootElement = this.rootElementSelector ?\n            getClosestMatchingAncestor(element, this.rootElementSelector) : element;\n        if (rootElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            assertElementNode(rootElement, 'cdkDrag');\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /** Gets the boundary element, based on the `boundaryElement` value. */\n    _getBoundaryElement() {\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return getClosestMatchingAncestor(this.element.nativeElement, boundary);\n        }\n        const element = coerceElement(boundary);\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n            !element.contains(this.element.nativeElement)) {\n            throw Error('Draggable element is not inside of the node passed into cdkDragBoundary.');\n        }\n        return element;\n    }\n    /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe(() => {\n            if (!ref.isDragging()) {\n                const dir = this._dir;\n                const dragStartDelay = this.dragStartDelay;\n                const placeholder = this._placeholderTemplate ? {\n                    template: this._placeholderTemplate.templateRef,\n                    context: this._placeholderTemplate.data,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                const preview = this._previewTemplate ? {\n                    template: this._previewTemplate.templateRef,\n                    context: this._previewTemplate.data,\n                    matchSize: this._previewTemplate.matchSize,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.dragStartDelay = (typeof dragStartDelay === 'object' && dragStartDelay) ?\n                    dragStartDelay : coerceNumberProperty(dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref.previewClass = this.previewClass;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview);\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        });\n        // This only needs to be resolved once.\n        ref.beforeStarted.pipe(take(1)).subscribe(() => {\n            var _a, _b;\n            // If we managed to resolve a parent through DI, use it.\n            if (this._parentDrag) {\n                ref.withParent(this._parentDrag._dragRef);\n                return;\n            }\n            // Otherwise fall back to resolving the parent by looking up the DOM. This can happen if\n            // the item was projected into another item by something like `ngTemplateOutlet`.\n            let parent = this.element.nativeElement.parentElement;\n            while (parent) {\n                // `classList` needs to be null checked, because IE doesn't have it on some elements.\n                if ((_a = parent.classList) === null || _a === void 0 ? void 0 : _a.contains(DRAG_HOST_CLASS)) {\n                    ref.withParent(((_b = CdkDrag._dragInstances.find(drag => {\n                        return drag.element.nativeElement === parent;\n                    })) === null || _b === void 0 ? void 0 : _b._dragRef) || null);\n                    break;\n                }\n                parent = parent.parentElement;\n            }\n        });\n    }\n    /** Handles the events from the underlying `DragRef`. */\n    _handleEvents(ref) {\n        ref.started.subscribe(() => {\n            this.started.emit({ source: this });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.released.subscribe(() => {\n            this.released.emit({ source: this });\n        });\n        ref.ended.subscribe(event => {\n            this.ended.emit({ source: this, distance: event.distance });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: event.container.data,\n                item: this,\n                currentIndex: event.currentIndex\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: event.container.data,\n                item: this\n            });\n        });\n        ref.dropped.subscribe(event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                item: this,\n                distance: event.distance\n            });\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, dragStartDelay, constrainPosition, previewClass, boundaryElement, draggingDisabled, rootElementSelector } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.dragStartDelay = dragStartDelay || 0;\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n        if (constrainPosition) {\n            this.constrainPosition = constrainPosition;\n        }\n        if (previewClass) {\n            this.previewClass = previewClass;\n        }\n        if (boundaryElement) {\n            this.boundaryElement = boundaryElement;\n        }\n        if (rootElementSelector) {\n            this.rootElementSelector = rootElementSelector;\n        }\n    }\n}\nCdkDrag.ɵfac = function CdkDrag_Factory(t) { return new (t || CdkDrag)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DROP_LIST, 12), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_HANDLE, 10), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_PARENT, 12)); };\nCdkDrag.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDrag, selectors: [[\"\", \"cdkDrag\", \"\"]], contentQueries: function CdkDrag_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_PREVIEW, 1);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_PLACEHOLDER, 1);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_HANDLE, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._previewTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._placeholderTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._handles = _t);\n    } }, hostAttrs: [1, \"cdk-drag\"], hostVars: 4, hostBindings: function CdkDrag_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"cdk-drag-disabled\", ctx.disabled)(\"cdk-drag-dragging\", ctx._dragRef.isDragging());\n    } }, inputs: { disabled: [\"cdkDragDisabled\", \"disabled\"], dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"], lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"], constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"], previewClass: [\"cdkDragPreviewClass\", \"previewClass\"], boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"], rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"], data: [\"cdkDragData\", \"data\"], freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"] }, outputs: { started: \"cdkDragStarted\", released: \"cdkDragReleased\", ended: \"cdkDragEnded\", entered: \"cdkDragEntered\", exited: \"cdkDragExited\", dropped: \"cdkDragDropped\", moved: \"cdkDragMoved\" }, exportAs: [\"cdkDrag\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]), ɵngcc0.ɵɵNgOnChangesFeature] });\nCdkDrag._dragInstances = [];\nCdkDrag.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DROP_LIST,] }, { type: Optional }, { type: SkipSelf }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DRAG_CONFIG,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: DragDrop },\n    { type: ChangeDetectorRef },\n    { type: CdkDragHandle, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [CDK_DRAG_HANDLE,] }] },\n    { type: CdkDrag, decorators: [{ type: Optional }, { type: SkipSelf }, { type: Inject, args: [CDK_DRAG_PARENT,] }] }\n];\nCdkDrag.propDecorators = {\n    _handles: [{ type: ContentChildren, args: [CDK_DRAG_HANDLE, { descendants: true },] }],\n    _previewTemplate: [{ type: ContentChild, args: [CDK_DRAG_PREVIEW,] }],\n    _placeholderTemplate: [{ type: ContentChild, args: [CDK_DRAG_PLACEHOLDER,] }],\n    data: [{ type: Input, args: ['cdkDragData',] }],\n    lockAxis: [{ type: Input, args: ['cdkDragLockAxis',] }],\n    rootElementSelector: [{ type: Input, args: ['cdkDragRootElement',] }],\n    boundaryElement: [{ type: Input, args: ['cdkDragBoundary',] }],\n    dragStartDelay: [{ type: Input, args: ['cdkDragStartDelay',] }],\n    freeDragPosition: [{ type: Input, args: ['cdkDragFreeDragPosition',] }],\n    disabled: [{ type: Input, args: ['cdkDragDisabled',] }],\n    constrainPosition: [{ type: Input, args: ['cdkDragConstrainPosition',] }],\n    previewClass: [{ type: Input, args: ['cdkDragPreviewClass',] }],\n    started: [{ type: Output, args: ['cdkDragStarted',] }],\n    released: [{ type: Output, args: ['cdkDragReleased',] }],\n    ended: [{ type: Output, args: ['cdkDragEnded',] }],\n    entered: [{ type: Output, args: ['cdkDragEntered',] }],\n    exited: [{ type: Output, args: ['cdkDragExited',] }],\n    dropped: [{ type: Output, args: ['cdkDragDropped',] }],\n    moved: [{ type: Output, args: ['cdkDragMoved',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDrag, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDrag]',\n                exportAs: 'cdkDrag',\n                host: {\n                    'class': DRAG_HOST_CLASS,\n                    '[class.cdk-drag-disabled]': 'disabled',\n                    '[class.cdk-drag-dragging]': '_dragRef.isDragging()'\n                },\n                providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_DROP_LIST]\n            }, {\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_CONFIG]\n            }] }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: DragDrop }, { type: ɵngcc0.ChangeDetectorRef }, { type: CdkDragHandle, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_HANDLE]\n            }] }, { type: CdkDrag, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_PARENT]\n            }] }]; }, { started: [{\n            type: Output,\n            args: ['cdkDragStarted']\n        }], released: [{\n            type: Output,\n            args: ['cdkDragReleased']\n        }], ended: [{\n            type: Output,\n            args: ['cdkDragEnded']\n        }], entered: [{\n            type: Output,\n            args: ['cdkDragEntered']\n        }], exited: [{\n            type: Output,\n            args: ['cdkDragExited']\n        }], dropped: [{\n            type: Output,\n            args: ['cdkDragDropped']\n        }], moved: [{\n            type: Output,\n            args: ['cdkDragMoved']\n        }], disabled: [{\n            type: Input,\n            args: ['cdkDragDisabled']\n        }], dragStartDelay: [{\n            type: Input,\n            args: ['cdkDragStartDelay']\n        }], lockAxis: [{\n            type: Input,\n            args: ['cdkDragLockAxis']\n        }], constrainPosition: [{\n            type: Input,\n            args: ['cdkDragConstrainPosition']\n        }], previewClass: [{\n            type: Input,\n            args: ['cdkDragPreviewClass']\n        }], boundaryElement: [{\n            type: Input,\n            args: ['cdkDragBoundary']\n        }], rootElementSelector: [{\n            type: Input,\n            args: ['cdkDragRootElement']\n        }], _handles: [{\n            type: ContentChildren,\n            args: [CDK_DRAG_HANDLE, { descendants: true }]\n        }], _previewTemplate: [{\n            type: ContentChild,\n            args: [CDK_DRAG_PREVIEW]\n        }], _placeholderTemplate: [{\n            type: ContentChild,\n            args: [CDK_DRAG_PLACEHOLDER]\n        }], data: [{\n            type: Input,\n            args: ['cdkDragData']\n        }], freeDragPosition: [{\n            type: Input,\n            args: ['cdkDragFreeDragPosition']\n        }] }); })();\n/** Gets the closest ancestor of an element that matches a selector. */\nfunction getClosestMatchingAncestor(element, selector) {\n    let currentElement = element.parentElement;\n    while (currentElement) {\n        // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n        if (currentElement.matches ? currentElement.matches(selector) :\n            currentElement.msMatchesSelector(selector)) {\n            return currentElement;\n        }\n        currentElement = currentElement.parentElement;\n    }\n    return null;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass DragDropModule {\n}\nDragDropModule.ɵfac = function DragDropModule_Factory(t) { return new (t || DragDropModule)(); };\nDragDropModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DragDropModule });\nDragDropModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ providers: [\n        DragDrop,\n    ], imports: [CdkScrollableModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DragDropModule, { declarations: function () { return [CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder]; }, exports: function () { return [CdkScrollableModule, CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DragDropModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                exports: [\n                    CdkScrollableModule,\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                providers: [\n                    DragDrop,\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_HANDLE, CDK_DRAG_PARENT, CDK_DRAG_PLACEHOLDER, CDK_DRAG_PREVIEW, CDK_DROP_LIST, CDK_DROP_LIST_GROUP, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem };\n\n//# sourceMappingURL=drag-drop.js.map","import { ElementRef } from '@angular/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Coerces a data-bound value (typically a string) to a boolean. */\nfunction coerceBooleanProperty(value) {\n    return value != null && `${value}` !== 'false';\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction coerceNumberProperty(value, fallbackValue = 0) {\n    return _isNumberValue(value) ? Number(value) : fallbackValue;\n}\n/**\n * Whether the provided value is considered a number.\n * @docs-private\n */\nfunction _isNumberValue(value) {\n    // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,\n    // and other non-number values as NaN, where Number just uses 0) but it considers the string\n    // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.\n    return !isNaN(parseFloat(value)) && !isNaN(Number(value));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction coerceArray(value) {\n    return Array.isArray(value) ? value : [value];\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Coerces a value to a CSS pixel value. */\nfunction coerceCssPixelValue(value) {\n    if (value == null) {\n        return '';\n    }\n    return typeof value === 'string' ? value : `${value}px`;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Coerces an ElementRef or an Element into an element.\n * Useful for APIs that can accept either a ref or the native element itself.\n */\nfunction coerceElement(elementOrRef) {\n    return elementOrRef instanceof ElementRef ? elementOrRef.nativeElement : elementOrRef;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Coerces a value to an array of trimmed non-empty strings.\n * Any input that is not an array, `null` or `undefined` will be turned into a string\n * via `toString()` and subsequently split with the given separator.\n * `null` and `undefined` will result in an empty array.\n * This results in the following outcomes:\n * - `null` -&gt; `[]`\n * - `[null]` -&gt; `[\"null\"]`\n * - `[\"a\", \"b \", \" \"]` -&gt; `[\"a\", \"b\"]`\n * - `[1, [2, 3]]` -&gt; `[\"1\", \"2,3\"]`\n * - `[{ a: 0 }]` -&gt; `[\"[object Object]\"]`\n * - `{ a: 0 }` -&gt; `[\"[object\", \"Object]\"]`\n *\n * Useful for defining CSS classes or table columns.\n * @param value the value to coerce into an array of strings\n * @param separator split-separator if value isn't an array\n */\nfunction coerceStringArray(value, separator = /\\s+/) {\n    const result = [];\n    if (value != null) {\n        const sourceValues = Array.isArray(value) ? value : `${value}`.split(separator);\n        for (const sourceValue of sourceValues) {\n            const trimmedString = `${sourceValue}`.trim();\n            if (trimmedString) {\n                result.push(trimmedString);\n            }\n        }\n    }\n    return result;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport { _isNumberValue, coerceArray, coerceBooleanProperty, coerceCssPixelValue, coerceElement, coerceNumberProperty, coerceStringArray };\n//# sourceMappingURL=coercion.js.map\n","import { InjectionToken, inject, EventEmitter, ɵɵdefineInjectable, ɵɵinject, Injectable, Optional, Inject, Directive, Output, Input, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token used to inject the document into Directionality.\n * This is used so that the value can be faked in tests.\n *\n * We can't use the real document in tests because changing the real `dir` causes geometry-based\n * tests in Safari to fail.\n *\n * We also can't re-provide the DOCUMENT token from platform-brower because the unit tests\n * themselves use things like `querySelector` in test code.\n *\n * This token is defined in a separate file from Directionality as a workaround for\n * https://github.com/angular/angular/issues/22559\n *\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nconst DIR_DOCUMENT = new InjectionToken('cdk-dir-doc', {\n    providedIn: 'root',\n    factory: DIR_DOCUMENT_FACTORY,\n});\n/** @docs-private */\nfunction DIR_DOCUMENT_FACTORY() {\n    return inject(DOCUMENT);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The directionality (LTR / RTL) context for the application (or a subtree of it).\n * Exposes the current direction and a stream of direction changes.\n */\nclass Directionality {\n    constructor(_document) {\n        /** The current 'ltr' or 'rtl' value. */\n        this.value = 'ltr';\n        /** Stream that emits whenever the 'ltr' / 'rtl' state changes. */\n        this.change = new EventEmitter();\n        if (_document) {\n            // TODO: handle 'auto' value -\n            // We still need to account for dir=\"auto\".\n            // It looks like HTMLElemenet.dir is also \"auto\" when that's set to the attribute,\n            // but getComputedStyle return either \"ltr\" or \"rtl\". avoiding getComputedStyle for now\n            const bodyDir = _document.body ? _document.body.dir : null;\n            const htmlDir = _document.documentElement ? _document.documentElement.dir : null;\n            const value = bodyDir || htmlDir;\n            this.value = (value === 'ltr' || value === 'rtl') ? value : 'ltr';\n        }\n    }\n    ngOnDestroy() {\n        this.change.complete();\n    }\n}\nDirectionality.ɵfac = function Directionality_Factory(t) { return new (t || Directionality)(ɵngcc0.ɵɵinject(DIR_DOCUMENT, 8)); };\nDirectionality.ɵprov = ɵɵdefineInjectable({ factory: function Directionality_Factory() { return new Directionality(ɵɵinject(DIR_DOCUMENT, 8)); }, token: Directionality, providedIn: \"root\" });\nDirectionality.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DIR_DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Directionality, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DIR_DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Directive to listen for changes of direction of part of the DOM.\n *\n * Provides itself as Directionality such that descendant directives only need to ever inject\n * Directionality to get the closest direction.\n */\nclass Dir {\n    constructor() {\n        /** Normalized direction that accounts for invalid/unsupported values. */\n        this._dir = 'ltr';\n        /** Whether the `value` has been set to its initial value. */\n        this._isInitialized = false;\n        /** Event emitted when the direction changes. */\n        this.change = new EventEmitter();\n    }\n    /** @docs-private */\n    get dir() { return this._dir; }\n    set dir(value) {\n        const old = this._dir;\n        const normalizedValue = value ? value.toLowerCase() : value;\n        this._rawDir = value;\n        this._dir = (normalizedValue === 'ltr' || normalizedValue === 'rtl') ? normalizedValue : 'ltr';\n        if (old !== this._dir && this._isInitialized) {\n            this.change.emit(this._dir);\n        }\n    }\n    /** Current layout direction of the element. */\n    get value() { return this.dir; }\n    /** Initialize once default value has been set. */\n    ngAfterContentInit() {\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        this.change.complete();\n    }\n}\nDir.ɵfac = function Dir_Factory(t) { return new (t || Dir)(); };\nDir.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: Dir, selectors: [[\"\", \"dir\", \"\"]], hostVars: 1, hostBindings: function Dir_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"dir\", ctx._rawDir);\n    } }, inputs: { dir: \"dir\" }, outputs: { change: \"dirChange\" }, exportAs: [\"dir\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: Directionality, useExisting: Dir }])] });\nDir.propDecorators = {\n    change: [{ type: Output, args: ['dirChange',] }],\n    dir: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Dir, [{\n        type: Directive,\n        args: [{\n                selector: '[dir]',\n                providers: [{ provide: Directionality, useExisting: Dir }],\n                host: { '[attr.dir]': '_rawDir' },\n                exportAs: 'dir'\n            }]\n    }], function () { return []; }, { change: [{\n            type: Output,\n            args: ['dirChange']\n        }], dir: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass BidiModule {\n}\nBidiModule.ɵfac = function BidiModule_Factory(t) { return new (t || BidiModule)(); };\nBidiModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: BidiModule });\nBidiModule.ɵinj = ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(BidiModule, { declarations: [Dir], exports: [Dir] }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BidiModule, [{\n        type: NgModule,\n        args: [{\n                exports: [Dir],\n                declarations: [Dir]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BidiModule, DIR_DOCUMENT, Dir, Directionality, DIR_DOCUMENT_FACTORY as ɵangular_material_src_cdk_bidi_bidi_a };\n\n//# sourceMappingURL=bidi.js.map","import { ɵɵdefineInjectable, ɵɵinject, PLATFORM_ID, Injectable, Inject, NgModule } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Whether the current platform supports the V8 Break Iterator. The V8 check\n// is necessary to detect all Blink based browsers.\nimport * as ɵngcc0 from '@angular/core';\nlet hasV8BreakIterator;\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\ntry {\n    hasV8BreakIterator = (typeof Intl !== 'undefined' && Intl.v8BreakIterator);\n}\ncatch (_a) {\n    hasV8BreakIterator = false;\n}\n/**\n * Service to detect the current platform by comparing the userAgent strings and\n * checking browser-specific global properties.\n */\nclass Platform {\n    constructor(_platformId) {\n        this._platformId = _platformId;\n        // We want to use the Angular platform check because if the Document is shimmed\n        // without the navigator, the following checks will fail. This is preferred because\n        // sometimes the Document may be shimmed without the user's knowledge or intention\n        /** Whether the Angular application is being rendered in the browser. */\n        this.isBrowser = this._platformId ?\n            isPlatformBrowser(this._platformId) : typeof document === 'object' && !!document;\n        /** Whether the current browser is Microsoft Edge. */\n        this.EDGE = this.isBrowser && /(edge)/i.test(navigator.userAgent);\n        /** Whether the current rendering engine is Microsoft Trident. */\n        this.TRIDENT = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent);\n        // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.\n        /** Whether the current rendering engine is Blink. */\n        this.BLINK = this.isBrowser && (!!(window.chrome || hasV8BreakIterator) &&\n            typeof CSS !== 'undefined' && !this.EDGE && !this.TRIDENT);\n        // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to\n        // ensure that Webkit runs standalone and is not used as another engine's base.\n        /** Whether the current rendering engine is WebKit. */\n        this.WEBKIT = this.isBrowser &&\n            /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;\n        /** Whether the current platform is Apple iOS. */\n        this.IOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) &&\n            !('MSStream' in window);\n        // It's difficult to detect the plain Gecko engine, because most of the browsers identify\n        // them self as Gecko-like browsers and modify the userAgent's according to that.\n        // Since we only cover one explicit Firefox case, we can simply check for Firefox\n        // instead of having an unstable check for Gecko.\n        /** Whether the current browser is Firefox. */\n        this.FIREFOX = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);\n        /** Whether the current platform is Android. */\n        // Trident on mobile adds the android platform to the userAgent to trick detections.\n        this.ANDROID = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT;\n        // Safari browsers will include the Safari keyword in their userAgent. Some browsers may fake\n        // this and just place the Safari keyword in the userAgent. To be more safe about Safari every\n        // Safari browser should also use Webkit as its layout engine.\n        /** Whether the current browser is Safari. */\n        this.SAFARI = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;\n    }\n}\nPlatform.ɵfac = function Platform_Factory(t) { return new (t || Platform)(ɵngcc0.ɵɵinject(PLATFORM_ID)); };\nPlatform.ɵprov = ɵɵdefineInjectable({ factory: function Platform_Factory() { return new Platform(ɵɵinject(PLATFORM_ID)); }, token: Platform, providedIn: \"root\" });\nPlatform.ctorParameters = () => [\n    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Platform, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: Object, decorators: [{\n                type: Inject,\n                args: [PLATFORM_ID]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass PlatformModule {\n}\nPlatformModule.ɵfac = function PlatformModule_Factory(t) { return new (t || PlatformModule)(); };\nPlatformModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: PlatformModule });\nPlatformModule.ɵinj = ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PlatformModule, [{\n        type: NgModule,\n        args: [{}]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Cached result Set of input types support by the current browser. */\nlet supportedInputTypes;\n/** Types of `<input>` that *might* be supported. */\nconst candidateInputTypes = [\n    // `color` must come first. Chrome 56 shows a warning if we change the type to `color` after\n    // first changing it to something else:\n    // The specified value \"\" does not conform to the required format.\n    // The format is \"#rrggbb\" where rr, gg, bb are two-digit hexadecimal numbers.\n    'color',\n    'button',\n    'checkbox',\n    'date',\n    'datetime-local',\n    'email',\n    'file',\n    'hidden',\n    'image',\n    'month',\n    'number',\n    'password',\n    'radio',\n    'range',\n    'reset',\n    'search',\n    'submit',\n    'tel',\n    'text',\n    'time',\n    'url',\n    'week',\n];\n/** @returns The input types supported by this browser. */\nfunction getSupportedInputTypes() {\n    // Result is cached.\n    if (supportedInputTypes) {\n        return supportedInputTypes;\n    }\n    // We can't check if an input type is not supported until we're on the browser, so say that\n    // everything is supported when not on the browser. We don't use `Platform` here since it's\n    // just a helper function and can't inject it.\n    if (typeof document !== 'object' || !document) {\n        supportedInputTypes = new Set(candidateInputTypes);\n        return supportedInputTypes;\n    }\n    let featureTestInput = document.createElement('input');\n    supportedInputTypes = new Set(candidateInputTypes.filter(value => {\n        featureTestInput.setAttribute('type', value);\n        return featureTestInput.type === value;\n    }));\n    return supportedInputTypes;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Cached result of whether the user's browser supports passive event listeners. */\nlet supportsPassiveEvents;\n/**\n * Checks whether the user's browser supports passive event listeners.\n * See: https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n */\nfunction supportsPassiveEventListeners() {\n    if (supportsPassiveEvents == null && typeof window !== 'undefined') {\n        try {\n            window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\n                get: () => supportsPassiveEvents = true\n            }));\n        }\n        finally {\n            supportsPassiveEvents = supportsPassiveEvents || false;\n        }\n    }\n    return supportsPassiveEvents;\n}\n/**\n * Normalizes an `AddEventListener` object to something that can be passed\n * to `addEventListener` on any browser, no matter whether it supports the\n * `options` parameter.\n * @param options Object to be normalized.\n */\nfunction normalizePassiveListenerOptions(options) {\n    return supportsPassiveEventListeners() ? options : !!options.capture;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Cached result of the way the browser handles the horizontal scroll axis in RTL mode. */\nlet rtlScrollAxisType;\n/** Cached result of the check that indicates whether the browser supports scroll behaviors. */\nlet scrollBehaviorSupported;\n/** Check whether the browser supports scroll behaviors. */\nfunction supportsScrollBehavior() {\n    if (scrollBehaviorSupported == null) {\n        // If we're not in the browser, it can't be supported. Also check for `Element`, because\n        // some projects stub out the global `document` during SSR which can throw us off.\n        if (typeof document !== 'object' || !document || typeof Element !== 'function' || !Element) {\n            scrollBehaviorSupported = false;\n            return scrollBehaviorSupported;\n        }\n        // If the element can have a `scrollBehavior` style, we can be sure that it's supported.\n        if ('scrollBehavior' in document.documentElement.style) {\n            scrollBehaviorSupported = true;\n        }\n        else {\n            // At this point we have 3 possibilities: `scrollTo` isn't supported at all, it's\n            // supported but it doesn't handle scroll behavior, or it has been polyfilled.\n            const scrollToFunction = Element.prototype.scrollTo;\n            if (scrollToFunction) {\n                // We can detect if the function has been polyfilled by calling `toString` on it. Native\n                // functions are obfuscated using `[native code]`, whereas if it was overwritten we'd get\n                // the actual function source. Via https://davidwalsh.name/detect-native-function. Consider\n                // polyfilled functions as supporting scroll behavior.\n                scrollBehaviorSupported = !/\\{\\s*\\[native code\\]\\s*\\}/.test(scrollToFunction.toString());\n            }\n            else {\n                scrollBehaviorSupported = false;\n            }\n        }\n    }\n    return scrollBehaviorSupported;\n}\n/**\n * Checks the type of RTL scroll axis used by this browser. As of time of writing, Chrome is NORMAL,\n * Firefox & Safari are NEGATED, and IE & Edge are INVERTED.\n */\nfunction getRtlScrollAxisType() {\n    // We can't check unless we're on the browser. Just assume 'normal' if we're not.\n    if (typeof document !== 'object' || !document) {\n        return 0 /* NORMAL */;\n    }\n    if (rtlScrollAxisType == null) {\n        // Create a 1px wide scrolling container and a 2px wide content element.\n        const scrollContainer = document.createElement('div');\n        const containerStyle = scrollContainer.style;\n        scrollContainer.dir = 'rtl';\n        containerStyle.width = '1px';\n        containerStyle.overflow = 'auto';\n        containerStyle.visibility = 'hidden';\n        containerStyle.pointerEvents = 'none';\n        containerStyle.position = 'absolute';\n        const content = document.createElement('div');\n        const contentStyle = content.style;\n        contentStyle.width = '2px';\n        contentStyle.height = '1px';\n        scrollContainer.appendChild(content);\n        document.body.appendChild(scrollContainer);\n        rtlScrollAxisType = 0 /* NORMAL */;\n        // The viewport starts scrolled all the way to the right in RTL mode. If we are in a NORMAL\n        // browser this would mean that the scrollLeft should be 1. If it's zero instead we know we're\n        // dealing with one of the other two types of browsers.\n        if (scrollContainer.scrollLeft === 0) {\n            // In a NEGATED browser the scrollLeft is always somewhere in [-maxScrollAmount, 0]. For an\n            // INVERTED browser it is always somewhere in [0, maxScrollAmount]. We can determine which by\n            // setting to the scrollLeft to 1. This is past the max for a NEGATED browser, so it will\n            // return 0 when we read it again.\n            scrollContainer.scrollLeft = 1;\n            rtlScrollAxisType =\n                scrollContainer.scrollLeft === 0 ? 1 /* NEGATED */ : 2 /* INVERTED */;\n        }\n        scrollContainer.parentNode.removeChild(scrollContainer);\n    }\n    return rtlScrollAxisType;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet shadowDomIsSupported;\n/** Checks whether the user's browser support Shadow DOM. */\nfunction _supportsShadowDom() {\n    if (shadowDomIsSupported == null) {\n        const head = typeof document !== 'undefined' ? document.head : null;\n        shadowDomIsSupported = !!(head && (head.createShadowRoot || head.attachShadow));\n    }\n    return shadowDomIsSupported;\n}\n/** Gets the shadow root of an element, if supported and the element is inside the Shadow DOM. */\nfunction _getShadowRoot(element) {\n    if (_supportsShadowDom()) {\n        const rootNode = element.getRootNode ? element.getRootNode() : null;\n        // Note that this should be caught by `_supportsShadowDom`, but some\n        // teams have been able to hit this code path on unsupported browsers.\n        if (typeof ShadowRoot !== 'undefined' && ShadowRoot && rootNode instanceof ShadowRoot) {\n            return rootNode;\n        }\n    }\n    return null;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Platform, PlatformModule, _getShadowRoot, _supportsShadowDom, getRtlScrollAxisType, getSupportedInputTypes, normalizePassiveListenerOptions, supportsPassiveEventListeners, supportsScrollBehavior };\n\n//# sourceMappingURL=platform.js.map","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { CvbuilderComponent } from './components/cvbuilder/cvbuilder.component';\n\nconst routes: Routes = [\n  {\n    path:'',\n    component:CvbuilderComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class CvBuilderRoutingModule { }\n","import { Component, OnInit, ViewChildren, QueryList, AfterViewInit, ChangeDetectorRef, HostListener } from '@angular/core';\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  CdkDragDrop,\n  moveItemInArray,\n  transferArrayItem,\n  CdkDrag\n} from \"@angular/cdk/drag-drop\";\nimport SwiperCore, { Navigation, Swiper , Pagination} from 'swiper/core';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport { ApisService } from 'src/app/services/apis.service';\nSwiperCore.use([Navigation,Pagination]);\ndeclare var xepOnline:any\n@Component({\n  selector: 'app-cvbuilder',\n  templateUrl: './cvbuilder.component.html',\n  styleUrls: ['./cvbuilder.component.scss']\n})\nexport class CvbuilderComponent implements OnInit {\n\n  title = 'cv-creator';\n  currentSection:string=\"heading\"\n  skillIndex:any=-1\n  experienceIndex:any=-1\n  educationIndex=-1\n  experinceForm:any\n  educationForm:any\n  sidebar\n  setSkillsAt=\"left\"\n  setEducationAt=\"right\"\n  setExperienceAt=\"right\"\n  setSummarryAt=\"right\"\n  currentTemplate=1\n  preview:boolean=true\n  height=\"11\"\n  @ViewChildren(CdkDrag) draggables: QueryList<CdkDrag>;\n  colors:any=[\n    'black','#436975','#305FEC',\n  '#0E9FC1','#7EBCA3','#009160',\n  '#9097BE','#AC7BAE','#F46464',\n  '#96006F','#373d48','#D39C00'\n]\npdfName:string=\"My CV\"\ncounter=0\ncurrentColor:any='#373d48'\n  heading={\n    name:'First-name Last-name',\n    position:'Position',\n    address:'Address',\n    email:\"Email\",\n    phone:'Phone',\n    summary:'Summary',\n    summaryTitle:'Summary :',\n    skillsTitle:'Skills :',\n    experienceTitle:'Work Experience :',\n    educationTitle:'Education :'\n  }\n  skills:any=[]\n  experience:any=[]\n  education:any=[]\n  customSection:any=[]\n  listOfCustomSection:any=[]\n  customSectionForm:FormGroup\n  updateCustomeIndex:number=-1\n  swiperConfig: any = {\n    slidesPerView: \"2.6\",\n    loop: true,\n    spaceBetween: \"50\",\n    pagination: { clickable: true},\n    navigation: \"false\",\n    breakpoints: {\n      0: {\n        slidesPerView: 1,\n        spaceBetween: 20,\n      }\n    }\n\n  }\n  openSideNave:boolean=false\n  innerWidth\n  downlloadLoading=false\n  fontsize=false\n  constructor(private fb:FormBuilder,\n    private apis:ApisService,\n    private cd:ChangeDetectorRef) {\n\n  }\n  \n  ngOnInit(): void {\n    this.innerWidth=window.innerWidth\n    console.log(this.innerWidth)\n    this.customSectionForm= this.createCustomeSectionForm(\"init\")\n    this.addContent() \n    this.addList(0)\n    this.returnExperienceForm()\n    this.returnEducationForm()\n  this.getCounter()\n}\n\n  downloadPDF() {\n    this.apis.downloadCV({templateType:`${this.currentTemplate} , ${this.heading.name} , ${this.currentColor}`}).subscribe(\n      res => {\n        console.log(res)\n        this.getCounter()\n      } , err =>  {\n        console.log(err)\n      }\n    )\n    // end counter api counter++\n    return  xepOnline.Formatter.Format('content',{\n      render:'download',\n      filename:this.pdfName,\n      pageMargin:'0.0',\n      pageHeight:`${this.height}in`\n    }\n    )\n// end download cv method\n  }\n  // start skills crud\n  addSkills(input:any) {\n    if(input.value) {\n      if(input.value.trim().length>0) {\n        if(this.skillIndex!=-1) {\n          this.skills[this.skillIndex]=input.value\n          this.skillIndex=-1\n        } else {\n          this.skills.push(input.value)\n        }\n        input.value=''\n      }\n    }\n  }\n  removeSkill(index:any) {\n    this.skills.splice(index,1)\n  }\n  editSkill(index:any,input:any) {\n    input.value=this.skills[index]\n    this.skillIndex=index\n  }\n// end skills crud\n\n  getCounter() {\n    this.apis.getCounter().subscribe(\n      (res:any) => {\n        console.log(res)\n        this.counter=res?.counter[0].counter\n      } , err =>  {\n        console.log(err)\n      }\n    )\n  }\n  get wdth() {\n    return window.innerWidth\n  }\n  // start experience crud\n  returnExperienceForm() {\n    return this.experinceForm = this.fb.group({\n      jopbTitle:['',Validators.required],\n      employer:['',Validators.required],\n      startDate:['',Validators.required],\n      endDate:[''],\n      current:[false],\n      summary:['']\n    })\n  }\n  get controls() {\n    return this.experinceForm.controls\n  }\n  addExperience(formValue:any) {\n   if(this.experinceForm.valid) {\n   if(this.experienceIndex==-1) {\n    this.experience.push(formValue)\n   } else {\n    this.experience[this.experienceIndex]=formValue\n    this.experienceIndex=-1\n   } \n   this.experinceForm.reset()\n   }\n  }\n  removeExperience(index:any) {\n    this.experience.splice(index,1)\n  }\n  editExperience(index:any,value:any,el: HTMLElement) {\n    this.experinceForm.patchValue(value)\n    this.experienceIndex=index\n    el.scrollIntoView();\n  }\n   // end experience crud\n    // start education crud\n  returnEducationForm() {\n    return this.educationForm = this.fb.group({\n      university:['',Validators.required],\n      graduationDate:''\n    })\n  }\n  addEducation(value:any) {\n    if(this.educationForm.valid) {\n      if(this.educationIndex==-1) this.education.push(value)\n      else {\n        this.education[this.educationIndex]=value\n        this.educationIndex=-1\n      }\n      this.educationForm.reset()\n    }\n  }\n  removeEducation(index:any) {\n    this.education.splice(index,1)\n  }\n  editEducation(index:any,value:any,el:any) {\n    this.educationForm.patchValue(value)\n    this.educationIndex=index\n    el.scrollIntoView();\n  }\n   // end education crud\n  scrollToTheSection(el:any) {\n    this.openSideNave=false\n    el.scrollIntoView();\n  }\n  ngAfterViewInit() {\n    const arr = this.draggables.toArray();\n    this.sidebar = [...arr];\n this.cd.detectChanges()\n  }\n\n// start drag drop angular material\n  drop(event: CdkDragDrop<any[]>) {\n    const nodeToMove = event.item.element.nativeElement;\n    const { previousContainer, container, previousIndex, currentIndex } = event;\n\n   \n\n    if (previousContainer === container) {\n      moveItemInArray(container.data, previousIndex, currentIndex);\n\n      moveWithinContainer(\n        container.element.nativeElement,\n        previousIndex,\n        currentIndex\n      );\n    } else {\n      transferArrayItem(\n        previousContainer.data,\n        container.data,\n        previousIndex,\n        currentIndex\n      );\n      transferNodeToContainer(\n        nodeToMove,\n        container.element.nativeElement,\n        currentIndex\n      );\n\n      Promise.resolve().then(() => {\n        previousContainer.removeItem(event.item);\n        event.item.dropContainer = container;\n        event.item._dragRef._withDropContainer(container._dropListRef);\n        container.addItem(event.item);\n      });\n    }\n  }\n//////////// start build custome section  ////////////\n\n createCustomeSectionForm(itemType: string): FormGroup {\n  let formItem = this.fb.group({})\n  switch (itemType) {\n    case \"init\":\n      formItem = this.fb.group({\n        sectionTitle: [\"\",Validators.required],\n        leftOrRight: [\"\",Validators.required],\n        content: this.fb.array([])\n      });\n      break;\n    case 'content':\n      formItem = this.fb.group({\n        bold: [\"\"],\n        normal: [\"\"],\n        list: this.fb.array([])\n      });\n      break;\n      case 'list':\n        formItem = this.fb.group({\n          listItem: [\"\"]\n        });\n        break;\n  }\n  return formItem\n}\n//////////// end build custome section  ////////////\ngetContent(): FormArray {\n  return this.customSectionForm.get(\"content\") as FormArray\n}\naddContent() {\n  this.getContent().push(this.createCustomeSectionForm(\"content\"))\n}\ndeleteContent(index:any) {\n  this.getContent().removeAt(index)\n}\ngetList(index): FormArray {\n  return this.getContent().at(index).get('list') as FormArray\n}\naddList(index) {\n  this.getList(index).push(this.createCustomeSectionForm(\"list\"))\n}\ndeleteList(contentIndex,listIndex) {\n   this.getList(contentIndex).removeAt(listIndex)\n}\naddCustomeSection(value) {\n  if(this.updateCustomeIndex!=-1) this.customSection[this.updateCustomeIndex]=value \n  else   this.customSection.push(value)\n  this.customSectionForm.reset()\n  for(let i = 0 ; i < value.content.length;i++) {\n    this.deleteContent(i)\n  }\n  console.log(value)\n  if(this.getContent().length) this.deleteContent(0)\n  this.updateCustomeIndex=-1\n}\nremoveCustomeSection(index) {\n  this.customSection.splice(index,1)\n}\neditCustomeSection(index,item) {\n  this.updateCustomeIndex=index\n  for (let i = 0; i < item.content.length;i++) {\n    this.addContent()\n    for(let j = 0; j < item.content[i].list?.length;j++) {\n      this.addList(i)\n    }\n  }\n  this.customSectionForm.patchValue(item)\n\n}\nremoveValidatorr() {\n \n this.customSectionForm.get('leftOrRight').clearValidators()\n this.customSectionForm.get('leftOrRight').updateValueAndValidity(); \n}\nsetValidator() {\n \n  this.customSectionForm.get('leftOrRight').setValidators([Validators.required]);\n  this.customSectionForm.get('leftOrRight').updateValueAndValidity(); \n }\n}\nfunction moveWithinContainer(container, fromIndex, toIndex) {\n  if (fromIndex === toIndex) {\n    return;\n  }\n\n  const nodeToMove = container.children[fromIndex];\n  const targetNode = container.children[toIndex];\n\n  if (fromIndex < toIndex) {\n    targetNode.parentNode.insertBefore(nodeToMove, targetNode.nextSibling);\n  } else {\n    targetNode.parentNode.insertBefore(nodeToMove, targetNode);\n  }\n}\n\nfunction transferNodeToContainer(node, container, toIndex) {\n  if (toIndex === container.children.length) {\n    container.appendChild(node);\n  } else {\n    const targetItem = container.children[toIndex];\n    targetItem.parentNode.insertBefore(node, targetItem);\n  }\n\n\n}\n","<div \n\n[style]=\"{\n  'height':openSideNave?'100vh':'auto',\n  'overflow':openSideNave?'hidden':'auto'\n}\"\nclass=\"container-fluid \" >\n<div class=\"text-center my-4\">\n  <h1 class=\"m-0\">Total CVs Created {{counter}}</h1>\n</div>\n    <div \n    #rightSectionScroll\n    class=\"row  justify-content-center pb-4\">\n      <div \n      class=\"col-md-8 mb-5\">\n      <i \n\n      (click)=\"openSideNave=!openSideNave\"\n      class=\"fas fa-cog mb-4  showsidenav\"\n      style=\"font-size: 30px;\"\n    ></i>\n        <div class=\"d-flex formsSection\">\n      \n          <div \n          (click)=\"openSideNave=!openSideNave\"\n          *ngIf=\"openSideNave\" class=\"rgbacover\"></div>\n          <ul \n          style=\"transition: .5s;\"\n          [style.left]=\"openSideNave?'0':'-100%'\"\n          class=\"sections sidenavv list-unstyled mb-0 me-4\">\n          <li  \n          *ngIf=\"openSideNave\"\n          (click)=\"openSideNave=!openSideNave\">\n            <i class=\"fas fa-times\" style=\"color:#b1b6b7\"></i>\n          </li>\n            <li (click)=\"downloadPDF();openSideNave=false\">\n              <i class=\"fas fa-arrow-down\" style=\"color:#b1b6b7\"></i>\n              Download PDF\n            </li>\n            <li (click)=\"currentSection='settings';openSideNave=false\">\n              <i \n               class=\"fas fa-highlighter\"\n              [style.color]=\"currentSection=='settings' ? '#023642' : ' #b1b6b7'\"\n            ></i>\n              Edit Template</li>\n            <li (click)=\"currentSection='heading';scrollToTheSection(rightSectionScroll)\">\n              <i \n              [style.color]=\"currentSection=='heading' ? '#023642' : ' #b1b6b7'\"\n              class=\"fas fa-user\"></i>\n              Heading & Contact</li>\n            <li (click)=\"currentSection='summary';scrollToTheSection(rightSectionScroll)\">\n              <i \n              [style.color]=\"currentSection=='summary' ? '#023642' : ' #b1b6b7'\"\n              class=\"fas fa-trophy\"></i>\n              Summary</li>\n            <li (click)=\"currentSection='skills';scrollToTheSection(rightSectionScroll)\" >\n              <i \n              [style.color]=\"currentSection=='skills' ? '#023642' : ' #b1b6b7'\"\n              class=\"fas fa-file\"></i>\n              Skills</li>\n            <li (click)=\"currentSection='experience';scrollToTheSection(rightSectionScroll)\">\n              <i \n              [style.color]=\"currentSection=='experience' ? '#023642' : ' #b1b6b7'\"\n              class=\"fas fa-briefcase\"></i>\n              Experience</li>\n            <li (click)=\"currentSection='education';scrollToTheSection(rightSectionScroll)\">\n              <i \n              [style.color]=\"currentSection=='education' ? '#023642' : ' #b1b6b7'\"\n              class=\"fas fa-user-graduate\"></i>\n              Education</li>\n            <li (click)=\"currentSection='custom';scrollToTheSection(rightSectionScroll)\">\n              <i \n              [style.color]=\"currentSection=='custom' ? '#023642' : ' #b1b6b7'\"\n              class=\"fas fa-folder-plus\"></i>\n              Custom Section</li>\n          </ul>\n          <div [hidden]=\"currentSection!='settings'\"> \n            <div class=\"containerOfColors mb-3\">\n              <h3>Color</h3>\n              <ul  class=\"  list-unstyled color  d-flex justify-content-center flex-wrap\" >\n                <li [style.background]=\"item\"\n                    (click)=\"currentColor=item\"\n                     *ngFor=\"let item of colors|slice:0:6\">\n                  <i *ngIf=\"currentColor==item\" class=\"fa fa-check text-white\"></i>\n                </li>\n               \n              </ul>\n              <ul  class=\"  list-unstyled color m-0 d-flex justify-content-center flex-wrap\" >\n                <li [style.background]=\"item\"\n                    (click)=\"currentColor=item\"\n                     *ngFor=\"let item of colors|slice:6\">\n                  <i *ngIf=\"currentColor==item\" class=\"fa fa-check text-white\"></i>\n                </li>\n               \n              </ul>\n             </div>\n             <div class=\"mb-3\">\n              <label for=\"\">PDF Name</label>\n              <input type=\"text\" placeholder=\"PDF Name\" [(ngModel)]=\"pdfName\" class=\"form-control\">\n            </div>\n            <div>\n              <label for=\"\">PDF Page Height </label>\n              <input type=\"text\" placeholder=\"Height of PDF page\" [(ngModel)]=\"height\" class=\"form-control\">\n            </div>\n          </div>\n          <div [hidden]=\"currentSection!='heading'\">\n            <h2 class=\"m-0\">Let's complete your Resume Heading</h2>\n            <p class='mb-4'>How do you want employers to contact you?</p>\n            <div class=\"form-group mb-3\">\n              <label>Name</label>\n              <input [(ngModel)]=\"heading.name\" type=\"text\" class=\"form-control\">\n            </div>\n            <!-- end user name -->\n            <div class=\"form-group mb-3\">\n              <label>Position</label>\n              <input [(ngModel)]=\"heading.position\" type=\"text\" class=\"form-control\">\n            </div>\n            <!-- end user position -->\n            <div class=\"form-group mb-3\">\n              <label>Address</label>\n              <input [(ngModel)]=\"heading.address\" type=\"text\" class=\"form-control\">\n            </div>\n            <!-- end user address -->\n            <div class=\"form-group mb-3\">\n              <label>Phone</label>\n              <input [(ngModel)]=\"heading.phone\" type=\"text\" class=\"form-control\">\n            </div>\n            <!-- end user phone -->\n            <div class=\"form-group mb-3\">\n              <label>Email</label>\n              <input [(ngModel)]=\"heading.email\" type=\"text\" class=\"form-control\">\n            </div>\n            <!-- end user Email -->\n            <button (click)=\"currentSection='summary';scrollToTheSection(rightSectionScroll);\" class=\"btn btn-success\">Save & Next</button>\n          </div>\n          <!-- end heading -->\n          <div  #experienceFormId [hidden]=\"currentSection!='experience'\">\n            <h2 class=\"m-0\">Experience</h2>\n            <p class='mb-4'>What work experience do you have?</p>\n            <label>Section Title</label>\n            <input [(ngModel)]=\"heading.experienceTitle\" type=\"text\" class=\"form-control mb-3\">\n            <form [formGroup]=\"experinceForm\" (ngSubmit)=\"addExperience(experinceForm.value)\">\n              <div class=\"form-group mb-3\">\n                <label>Job Title</label>\n                <input formControlName=\"jopbTitle\" type=\"text\" class=\"form-control\">\n                <p *ngIf=\"controls.jopbTitle?.errors!=null && controls.jopbTitle.touched\" class=\"py-2 text-danger\">Required\n                </p>\n              </div>\n              <!-- end user job title -->\n              <div class=\"form-group mb-3\">\n                <label>Employer</label>\n                <input formControlName=\"employer\" type=\"text\" class=\"form-control\">\n                <p *ngIf=\"controls.employer?.errors!=null && controls.employer.touched\" class=\"py-2 text-danger\">Required\n                </p>\n              </div>\n              <!-- end user Employer -->\n              <div class=\"form-group mb-3\">\n                <label>job responsibilities ( optional )</label>\n                <textarea formControlName=\"summary\" class=\"form-control\" name=\"\" id=\"\" cols=\"30\" rows=\"3\"></textarea>\n              </div>\n              <!-- end job responsibilities -->\n              <div class=\"form-group mb-3\">\n                <label>Start Date</label>\n                <input formControlName=\"startDate\" type=\"month\" class=\"form-control\">\n                <p *ngIf=\"controls.startDate?.errors!=null && controls.startDate.touched\" class=\"py-2 text-danger\">Required\n                </p>\n              </div>\n              <!-- end start date -->\n              <div class=\"form-group mb-3\">\n                <label>End Date</label>\n                <input formControlName=\"endDate\" type=\"month\" class=\"form-control\">\n                <p *ngIf=\"controls.endDate?.errors!=null && controls.endDate.touched\" class=\"py-2 text-danger\">Required</p>\n              </div>\n              <!-- end end date -->\n              <div class=\"form-check\">\n                <input formControlName=\"current\" class=\"form-check-input\" type=\"checkbox\" value=\"true\"\n                  id=\"flexCheckDefault\">\n                <label class=\"form-check-label\" for=\"flexCheckDefault\">\n                  I currently work here\n                </label>\n              </div>\n              <ng-container *ngIf=\"currentTemplate!=2\">\n                <div class=\"form-check\">\n                  <input  \n                  checked\n                  (change)=\"setExperienceAt='right'\"\n                  class=\"form-check-input\"  type=\"radio\" name=\"rightOrLeftEx\" id=\"ex1\">\n                  <label class=\"form-check-label\" for=\"ex1\">\n                    Right Section\n                  </label>\n                </div>\n                <div class=\"form-check\">\n                  <input \n                  (change)=\"setExperienceAt='left'\"\n                  class=\"form-check-input\" type=\"radio\" name=\"rightOrLeftEx\" id=\"ex2\" >\n                  <label class=\"form-check-label\" for=\"ex2\">\n                    Left Section\n                  </label>\n                </div>\n                <!-- end lef or right -->\n              </ng-container>\n              <button [disabled]=\"experinceForm.invalid\" class=\"btn btn-success my-2 w-100\">\n                {{experienceIndex==-1 ? 'Submit' : 'Edit'}}\n              </button>\n            </form>\n            <!-- end add experience form -->\n            <ng-container *ngIf=\"experience?.length\">\n              <ul>\n                <li *ngFor=\"let item of experience;let experienceIndex = index\">\n    \n                  <i class=\"fas fa-trash text-success \" style=\"cursor: pointer;\"\n                    (click)=\"removeExperience(experienceIndex)\"></i>\n                  <!-- end delet experience -->\n                  <i (click)=\"editExperience(experienceIndex,item,experienceFormId)\" style=\"cursor: pointer;\"\n                    class=\"fas fa-pen text-success d-inline-block mx-2\"></i>\n                  <!-- end edit experience -->\n                  {{item?.jopbTitle}}\n                </li>\n              </ul>\n            </ng-container>\n            <!-- end edit experience -->\n            <div class=\"d-flex justify-content-between my-3\">\n              <button (click)=\"currentSection='skills';scrollToTheSection(rightSectionScroll);\" class=\"btn btn-secondary\">Back</button>\n              <button (click)=\"currentSection='education';scrollToTheSection(rightSectionScroll);\" class=\"btn btn-success\">Save & Next</button>\n            </div>\n          </div>\n          <!-- end work experience -->\n          <div #eduFormID  [hidden]=\"currentSection!='education'\">\n            <h2 class=\"m-0\">Education</h2>\n            <p class='mb-4'>Where did you go to school/university?</p>\n            <label>Section Title</label>\n            <input [(ngModel)]=\"heading.educationTitle\" type=\"text\" class=\"form-control mb-3\">\n            <form [formGroup]=\"educationForm\" (ngSubmit)=\"addEducation(educationForm.value)\">\n              <div class=\"form-group mb-3\">\n                <label>Institution & Field of study</label>\n                <input formControlName=\"university\" type=\"text\" class=\"form-control\">\n                <p *ngIf=\"educationForm.controls.university?.errors!=null &&\n                educationForm.controls.university.touched\" class=\"my-2 text-danger\">\n                  Required\n                </p>\n              </div>\n              <!-- end user Institution & Field of study -->\n              <div class=\"form-group mb-3\">\n                <label>Graduation Date ( optional )</label>\n                <input formControlName=\"graduationDate\" type=\"month\" class=\"form-control\">\n              </div>\n              <!-- end Graduation date -->\n              <ng-container *ngIf=\"currentTemplate!=2\">\n                <div class=\"form-check\">\n                  <input  \n                  checked\n                  (change)=\"setEducationAt='right'\"\n                  class=\"form-check-input\"  type=\"radio\" name=\"rightOrLeft\" id=\"edu1\">\n                  <label class=\"form-check-label\" for=\"edu1\">\n                    Right Section\n                  </label>\n                </div>\n                <div class=\"form-check\">\n                  <input \n                  (change)=\"setEducationAt='left'\"\n                  class=\"form-check-input\" type=\"radio\" name=\"rightOrLeft\" id=\"edu2\" >\n                  <label class=\"form-check-label\" for=\"edu2\">\n                    Left Section\n                  </label>\n                </div>\n                <!-- end lef or right -->\n              </ng-container>\n       \n              <button [disabled]=\"educationForm.invalid\" class=\"btn btn-success my-2 w-100\">\n                {{educationIndex==-1 ? 'Submit' : 'Edit'}}\n              </button>\n            </form>\n            <ng-container *ngIf=\"education?.length\">\n              <div *ngFor=\"let item of education;let edu =index\" class=\"my-2\">\n    \n                <i class=\"fas fa-trash text-success \" style=\"cursor: pointer;\" (click)=\"removeEducation(edu)\"></i>\n                <!-- end delet education -->\n                <i (click)=\"editEducation(edu,item,eduFormID)\" style=\"cursor: pointer;\"\n                  class=\"fas fa-pen text-success d-inline-block mx-2\"></i>\n                <!-- end edit education -->\n                {{item?.university}}\n              </div>\n            </ng-container>\n    \n            <div class=\"d-flex justify-content-between my-3\">\n              <button (click)=\"currentSection='experience';scrollToTheSection(rightSectionScroll);\" class=\"btn btn-secondary\">Back</button>\n              <button (click)=\"currentSection='custom';scrollToTheSection(rightSectionScroll);\" class=\"btn btn-success\">Save & Next</button>\n            </div>\n          </div>\n          <!-- end user education -->\n          <div [hidden]=\"currentSection!='skills'\">\n            <h2 class=\"m-0\">Skills</h2>\n            <p class='mb-4'>Highlight six to eight of your top skills</p>\n            <label>Section Title</label>\n            <input type=\"text\" class=\"form-control mb-3\" [(ngModel)]=\"heading.skillsTitle\">\n            <div class=\"form-group mb-3\">\n              <input #skill (keyup.enter)=\"addSkills(skill)\" type=\"text\" class=\"form-control mb-2\">\n              <button (click)=\"addSkills(skill)\" class=\"btn btn-success\">\n                {{skillIndex==-1 ? 'Add Skills' : 'Edit'}}\n              </button>\n            </div>\n            <div class=\"my-3\">\n              <ul *ngIf=\"skills?.length\">\n                <li *ngFor=\"let item of skills;let i =index\" style=\"border: 1px solid transparent;\">\n    \n    \n                  <i class=\"fas fa-trash text-success \" style=\"cursor: pointer;\" (click)=\"removeSkill(i)\"></i>\n                  <!-- end delet skill -->\n                  <i (click)=\"editSkill(i,skill)\" style=\"cursor: pointer;\"\n                    class=\"fas fa-pen text-success d-inline-block mx-2\"></i>\n                  <!-- end edit skill -->\n                  {{item}}\n                  <!-- end skill name -->\n                </li>\n              </ul>\n            </div>\n            <ng-container *ngIf=\"currentTemplate!=2\">\n              <div class=\"form-check\">\n                <input  (change)=\"this.setSkillsAt='right'\" class=\"form-check-input\"  type=\"radio\" name=\"flexRadioDefault\" id=\"flexRadioDefault1\">\n                <label class=\"form-check-label\" for=\"flexRadioDefault1\">\n                  Right Section\n                </label>\n              </div>\n              <div class=\"form-check\">\n                <input \n                (change)=\"this.setSkillsAt='left'\"\n                class=\"form-check-input\" type=\"radio\" name=\"flexRadioDefault\" id=\"flexRadioDefault2\" checked>\n                <label class=\"form-check-label\" for=\"flexRadioDefault2\">\n                  Left Section\n                </label>\n              </div>\n            </ng-container>\n         \n            <div class=\"d-flex justify-content-between my-3\">\n              <button (click)=\"currentSection='summary';scrollToTheSection(rightSectionScroll);\" class=\"btn btn-secondary\">Back</button>\n              <button (click)=\"currentSection='experience';scrollToTheSection(rightSectionScroll);\" class=\"btn btn-success\">Save & Next</button>\n            </div>\n          </div>\n          <!-- end user skills -->\n          <div [hidden]=\"currentSection!='summary'\">\n            <h2>Professional summary</h2>\n            <label>Section Title</label>\n            <input class=\"form-control mb-3\" [(ngModel)]=\"heading.summaryTitle\">\n            <div class=\"form-group mb-3\">\n              <textarea [(ngModel)]=\"heading.summary\" name=\"\" id=\"\" cols=\"30\" rows=\"10\" class=\"form-control\"></textarea>\n            </div>\n            <ng-container *ngIf=\"currentTemplate!=2\">\n              <div class=\"form-check\">\n                <input \n                checked\n                 (change)=\"this.setSummarryAt='right'\" class=\"form-check-input\"  type=\"radio\" name=\"summaryInput\" id=\"flexRadioDefault4\">\n                <label class=\"form-check-label\" for=\"flexRadioDefault4\">\n                  Right Section\n                </label>\n              </div>\n              <div class=\"form-check\">\n                <input\n                (change)=\"this.setSummarryAt='left'\"\n                class=\"form-check-input\" type=\"radio\" name=\"summaryInput\" id=\"flexRadioDefault3\" >\n                <label class=\"form-check-label\" for=\"flexRadioDefault3\">\n                  Left Section\n                </label>\n              </div>\n            </ng-container>\n          \n            <div class=\"d-flex justify-content-between my-3\">\n              <button (click)=\"currentSection='heading';scrollToTheSection(rightSectionScroll);\" class=\"btn btn-secondary\">Back</button>\n              <button (click)=\"currentSection='skills';scrollToTheSection(rightSectionScroll);\" class=\"btn btn-success\">Save & Next</button>\n            </div>\n          </div>\n          <!-- end user Professional summary -->\n          <div [hidden]=\"currentSection!='custom'\">\n            <h2>Add Custom Section</h2>\n            <form \n            [formGroup]=\"customSectionForm\"\n            (ngSubmit)=\"addCustomeSection(customSectionForm.value)\"\n            >\n              <div class=\"form-group mb-3\">\n                <input \n                formControlName=\"sectionTitle\"\n                placeholder=\"Section Title\"\n                type=\"text\"  class=\"form-control\">\n                <p \n                *ngIf=\"customSectionForm.controls.sectionTitle?.errors!=null &&\n                customSectionForm.controls.sectionTitle.touched\n                \"\n                class=\"p-2 text-danger\">Required</p>\n              </div>\n              <!-- end section title -->\n        \n              <div\n              class=\"mb-3\"\n              >\n                <div class=\"form-group mb-3\"\n                *ngIf=\"getContent().controls.length\"\n                formArrayName=\"content\"\n                >\n                  <ng-container *ngFor=\"let contentItem of getContent().controls;let contentItemIndex = index\">\n                      <div \n                      style=\"border: 1px solid rgb(206, 202, 202);padding: 40px;border-radius: 20px;\n                      position: relative;\n                      \"\n                      [formGroupName]=\"contentItemIndex\"\n                      class=\"form-group mb-3\">\n                          <input \n                          formControlName=\"bold\"\n                          placeholder=\"Bold Text\"\n                          type=\"text\" class=\"form-control mb-3\">\n                          <input \n                          formControlName=\"normal\"\n                          placeholder=\"Normal Text\"\n                          type=\"text\" class=\"form-control mb-3\">\n                          <div \n                          formArrayName=\"list\">\n                          <ng-container *ngFor=\"let listItem of getList(contentItemIndex).controls;let listIdex = index\">\n                            <div \n                            [class.mb-3]=\"listIdex<getList(contentItemIndex).controls?.length-1\"\n                            [formGroupName]=\"listIdex\"\n                           >\n                           <i \n                           style=\"cursor: pointer;position: absolute;right: 20px;\"\n                           (click)=\"deleteList(contentItemIndex,listIdex)\"\n                           class=\"fas fa-times\"></i>\n                              <input\n                              formControlName=\"listItem\"\n                              placeholder=\"List Item\" type=\"text\" class=\"form-control mb-3\">\n                         \n                            </div>\n                          </ng-container>\n                          <button \n                          type=\"button\"\n                          (click)=\"addList(contentItemIndex)\"\n                           class=\"btn btn-success\">add List Item</button>\n                          </div>\n                       \n                          <i \n                          style=\"cursor: pointer;position: absolute;top: 10px;right: 10px;background-color: gray;padding: 10px;border-radius: 50%;color:white\"\n                          (click)=\"deleteContent(contentItemIndex)\"\n                          class=\"fas fa-times\"></i>\n                      </div>\n                  </ng-container>\n                 \n                </div>\n             <div>\n              <button \n              type=\"button\"\n              class=\"btn btn-success\"\n              (click)=\"addContent()\">Add Item</button>\n             </div>\n              </div>\n     \n              <!-- end form array  -->\n              <div \n              *ngIf=\"currentTemplate!=2\"\n              class=\"form-group mb-3\">\n                <div class=\"form-check\">\n                  <input \n                  checked\n                  formControlName=\"leftOrRight\"\n                  value=\"right\"\n                  class=\"form-check-input\" \n                  type=\"radio\" name=\"leftOrRight\" id=\"cstm1\">\n                  <label class=\"form-check-label\" for=\"cstm1\">\n                    Right Section\n                  </label>\n                </div>\n                <div class=\"form-check\">\n                  <input\n                  formControlName=\"leftOrRight\"\n                  value=\"left\"\n                  class=\"form-check-input\" type=\"radio\" name=\"leftOrRight\" id=\"cstm2\" >\n                  <label class=\"form-check-label\" for=\"cstm2\">\n                    Left Section\n                  </label>\n                </div>\n               </div>\n                  <!-- end left or right -->\n              <button \n              [disabled]=\"customSectionForm.invalid\"\n              class=\"btn btn-success w-100\">\n                Submit\n              </button>\n            </form>\n            <!-- end custom section form -->\n            <ng-container *ngIf=\"customSection?.length\">\n              <div *ngFor=\"let item of customSection\">\n    \n              </div>\n            </ng-container>\n             <ul *ngIf=\"customSection?.length\" class=\"my-3\">\n                <li *ngFor=\"let item of customSection;let i =index\" style=\"border: 1px solid transparent;\">\n    \n    \n                  <i class=\"fas fa-trash text-success \" style=\"cursor: pointer;\" (click)=\"removeCustomeSection(i)\"></i>\n                  <!-- end delet custom section -->\n                  <i (click)=\"editCustomeSection(i,item)\" style=\"cursor: pointer;\"\n                    class=\"fas fa-pen text-success d-inline-block mx-2\"></i>\n                  <!-- end edit custom section -->\n                  {{item.sectionTitle}}\n                  <!-- end custom section name -->\n                </li>\n              </ul>\n            <!-- end edit and delete custom section -->\n            <div class=\"d-flex justify-content-between my-3\">\n              <button (click)=\"currentSection='education';scrollToTheSection(rightSectionScroll);\" class=\"btn btn-secondary\">Back</button>\n              <button (click)=\"downloadPDF()\" class=\"btn btn-success\">\n                Download PDF\n              </button>\n            </div>\n          </div>\n          <!-- end custom section -->\n        </div>\n       \n      </div>\n      <!-- end add cv forms -->\n      <div class=\"col-md-4 text-center mb-5\">\n        <div>\n          <swiper style=\"padding : 50px 0 !important\" [config]=\"swiperConfig\">\n            <ng-template  swiperSlide>\n              <div>\n                <div class=\"mb-3\">\n                  <img \n                 class=\" img-fluid\"\n                style=\"box-shadow: 0 14px 10px rgb(0 0 0 / 25%), 0 -5px 10px rgb(0 0 0 / 22%);height: 300px;\"\n                src=\"assets/templateone.png\" alt=\"\">\n                </div>\n                <button \n                (click)=\"currentTemplate=1;currentColor='#373d48';setValidator();scrollToTheSection(pre)\"\n                class=\"btn btn-success my-2\">Select This Template</button>\n              </div>\n            </ng-template>\n            <ng-template swiperSlide>\n              <div>\n                <div class=\"mb-3\">\n                  <img \n                  class=\"img-fluid\"\n                  style=\"box-shadow: 0 14px 10px rgb(0 0 0 / 25%), 0 -5px 10px rgb(0 0 0 / 22%);height: 300px;\"\n                  src=\"assets/templatetow.png\" alt=\"\">\n                </div>\n                  <button \n                  (click)=\"currentTemplate=2;currentColor='#305FEC';removeValidatorr();scrollToTheSection(pre)\"\n                  class=\"btn btn-success my-2\">Select This Template</button>\n                </div>\n            </ng-template>\n            <ng-template swiperSlide>\n              <div>\n                <div class=\"mb-3\">\n                  <img \n                  class=\"img-fluid\"\n                  style=\"box-shadow: 0 14px 10px rgb(0 0 0 / 25%), 0 -5px 10px rgb(0 0 0 / 22%);height: 300px;\"\n                  src=\"assets/template3.png\" alt=\"\">\n                </div>\n                  <button \n                  (click)=\"currentTemplate=3;currentColor='#009160';setValidator();scrollToTheSection(pre)\"\n                  class=\"btn btn-success my-2\">Select This Template</button>\n                </div>\n            </ng-template>\n          </swiper>\n        </div>\n      </div>\n      <div \n      #pre\n      class=\"col-11 cvSection\" style=\"overflow: auto\">\n    <ng-container *ngIf=\"downlloadLoading;else cvss\">\n      <div class=\"lds-dual-ring\"></div>\n    </ng-container>\n    <ng-template #cvss>\n\n   \n    \n      <div \n      class=\"wdth\"\n      style=\"box-shadow: 0 14px 10px rgb(0 0 0 / 25%), 0 -5px 10px rgb(0 0 0 / 22%);\">\n  \n      \n      <div\n      *ngIf=\"currentTemplate==1\" \n      [id]=\"currentTemplate == 1 ? 'content' : 'none'\"\n      >\n  \n      <!-- start heading -->\n        <div \n        [style.backgroundColor]=\"currentColor\"\n        style=\"color: white;padding: 30px;margin-bottom: 10px;\"\n        >\n          <h2   \n          [style.fontSize]=\"(fontsize && wdth<992)?'medium':'32px'\"\n          class=\"mb-1 mainName\">{{heading?.name}}</h2>\n          <h4 \n          [style.fontSize]=\"(fontsize && wdth<992)?'small':'24px'\"\n          class=\"mb-4\">{{heading?.position}}</h4>\n           <table style=\"border: 1px solid transparent;\"> \n             <tr>\n              <td style=\"padding-right: 10px;vertical-align: text-top;\">\n                <svg \n                style=\"color: white;\"\n                xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-geo-alt-fill\" viewBox=\"0 0 16 16\">\n                  <path d=\"M8 16s6-5.686 6-10A6 6 0 0 0 2 6c0 4.314 6 10 6 10zm0-7a3 3 0 1 1 0-6 3 3 0 0 1 0 6z\"/>\n                </svg>\n              </td>\n               <td style=\"vertical-align: text-top;\"\n               [style.fontSize]=\"(fontsize && wdth<992)?'small':'medium'\"\n               >{{heading?.address}}</td>    \n             </tr>\n           </table>\n           <table  style=\"border: 1px solid transparent;\">\n            <tr>\n             <td style=\"padding-right: 10px;vertical-align: text-top;\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"color: white;\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-telephone-fill\" viewBox=\"0 0 16 16\">\n                <path fill-rule=\"evenodd\" d=\"M1.885.511a1.745 1.745 0 0 1 2.61.163L6.29 2.98c.329.423.445.974.315 1.494l-.547 2.19a.678.678 0 0 0 .178.643l2.457 2.457a.678.678 0 0 0 .644.178l2.189-.547a1.745 1.745 0 0 1 1.494.315l2.306 1.794c.829.645.905 1.87.163 2.611l-1.034 1.034c-.74.74-1.846 1.065-2.877.702a18.634 18.634 0 0 1-7.01-4.42 18.634 18.634 0 0 1-4.42-7.009c-.362-1.03-.037-2.137.703-2.877L1.885.511z\"/>\n              </svg>\n             </td>\n              <td style=\"vertical-align: text-top;\"\n              [style.fontSize]=\"(fontsize && wdth<992)?'small':'medium'\"\n              >{{heading?.phone}}</td>    \n            </tr>\n          </table>\n          <table  style=\"border: 1px solid transparent;\">\n            <tr>\n             <td style=\"padding-right: 10px;;vertical-align: text-top\">\n               <svg \n               style=\"color: white;vertical-align: text-top;\"\n               xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-envelope-fill\" viewBox=\"0 0 16 16\">\n                 <path d=\"M.05 3.555A2 2 0 0 1 2 2h12a2 2 0 0 1 1.95 1.555L8 8.414.05 3.555ZM0 4.697v7.104l5.803-3.558L0 4.697ZM6.761 8.83l-6.57 4.027A2 2 0 0 0 2 14h12a2 2 0 0 0 1.808-1.144l-6.57-4.027L8 9.586l-1.239-.757Zm3.436-.586L16 11.801V4.697l-5.803 3.546Z\"/>\n               </svg>\n             </td>\n              <td style=\"vertical-align: text-top\"\n              [style.fontSize]=\"(fontsize && wdth<992)?'small':'medium'\"\n              >{{heading?.email}}</td>    \n            </tr>\n          </table>\n       </div>\n       <!-- end heading -->\n       <table style=\"width: 100%;border: 1px solid transparent\">\n          <tr>\n            <th \n    \n            style=\"width: 40%;vertical-align: top\">\n          \n            <div    cdkDropListGroup>\n              <div \n              cdkDropList\n           #sidebarList=\"cdkDropList\"\n            [cdkDropListData]=\"sidebar\"\n           (cdkDropListDropped)=\"drop($event)\"\n              >\n              <div \n    \n              *ngIf=\"setSummarryAt=='left' && heading.summary\"\n              cdkDrag\n              style=\"padding: 10px 30px;cursor: move;\">\n                <h2  \n                [ngStyle]=\"{\n                 'fontSize':(fontsize && wdth<992)?'small':'25px',\n                 'marginBottom':fontsize?'10px':'20px'\n                }\"    \n                [style.color]=\"currentColor\">\n                {{heading.summaryTitle}}</h2>\n                <p \n                [style.fontSize]=\"(fontsize && wdth<992)?'small':'15px'\"\n                style=\"color: #9b9b9b !important;\"\n                class=\"m-0\">{{heading.summary}}</p>\n              </div>\n              <!-- end summary -->\n                <div\n                style=\"padding: 10px 30px;cursor: move;\" \n                cdkDrag\n                *ngIf=\"skills.length && setSkillsAt=='left'\">\n                  <h2 \n                  [ngStyle]=\"{\n                    'fontSize':(fontsize && wdth<992)?'small':'25px',\n                    'marginBottom':fontsize?'10px':'20px'\n                   }\"   \n                  [style.color]=\"currentColor\">\n                   {{heading.skillsTitle}}\n                 </h2>\n            \n                  <table style=\"border:1px solid transparent\">\n                    <tr   \n                    [style.marginBottom]=\"skillsIndex<skills?.length-1 ? '10px' : '0'\"\n                    *ngFor=\"let item of skills;let skillsIndex=index\">\n                     <td \n                     class=\"pb-2\"\n                     style=\"padding-right: 5px;vertical-align: top;\">\n                      <svg xmlns=\"http://www.w3.org/2000/svg\"\n                      style=\"color: #9b9b9b\"\n                      width=\"10\" height=\"10\" fill=\"currentColor\" class=\"bi bi-square-fill\" viewBox=\"0 0 16 16\">\n                        <path d=\"M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2z\"/>\n                      </svg>\n                      \n                     </td>\n                      <td \n                      style=\"vertical-align: top;\"\n                      class=\"pb-2\"> \n                        <p   \n                        [style.fontSize]=\"(fontsize && wdth<992)?'small':'15px'\"\n                        style=\"color: #9b9b9b;margin: 0;\">\n                        {{item}}\n                      </p></td>    \n                    </tr>\n                  </table>\n                </div>\n                <!-- end skills -->\n                <div \n                cdkDrag\n                style=\"padding: 10px 30px;cursor: move;\" \n                 *ngIf=\"experience?.length && setExperienceAt=='left'\">\n                  <h2 \n                  [ngStyle]=\"{\n                    'fontSize':(fontsize && wdth<992)?'small':'25px',\n                    'marginBottom':fontsize?'10px':'20px'\n                   }\"   \n                  [style.color]=\"currentColor\">{{heading?.experienceTitle}}</h2>\n                    <div \n                    *ngFor=\"let item of experience;let experienceIndex=index\"\n                    [style.marginBottom]=\"experienceIndex<experience?.length-1 ? '40px' : '0'\"\n       \n                    >\n                    <table style=\"border: 1px solid transparent;\">\n                      <td style=\"padding-right: 5px;vertical-align: top;\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\"\n                        style=\"color: #9b9b9b\"\n                        width=\"10\" height=\"10\" fill=\"currentColor\" class=\"bi bi-square-fill\" viewBox=\"0 0 16 16\">\n                          <path d=\"M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2z\"/>\n                        </svg>\n                      </td>\n                      <td style=\"vertical-align: top;\">\n                        <h5      \n                        [ngStyle]=\"{\n                          'fontSize':(fontsize && wdth<992)?'small':'20px'\n                         }\"  \n                        style=\"color: #9b9b9b !important;\">\n                  \n                          {{item?.jopbTitle}} {{'At ' + item?.employer}}\n                      </h5>\n                     <p \n                     [ngStyle]=\"{\n                      'fontSize':(fontsize && wdth<992)?'small':'15px'\n                     }\"  \n                     style=\"color: #9b9b9b !important;\"\n                     class=\"text-secondary\" style=\"margin: 5px 0 10px 0;\">{{item?.startDate}} - {{item?.current ? 'Current' : item?.endDate}}</p>\n                     <p \n                     [ngStyle]=\"{\n                      'fontSize':(fontsize && wdth<992)?'small':'15px'\n                     }\"  \n                     style=\"color: #9b9b9b !important;\"\n                     class=\"m-0\">{{item?.summary}}</p>\n                      </td>\n                    </table>\n                   \n                    </div>\n                </div>\n                <!-- end experience -->\n                <div \n                cdkDrag\n                style=\"padding: 10px 30px;cursor: move;\" \n                 *ngIf=\"education?.length && setEducationAt=='left'\">\n                 <h2    \n                 [ngStyle]=\"{\n                  'fontSize':(fontsize && wdth<992)?'small':'25px',\n                  'marginBottom':fontsize?'10px':'20px'\n                 }\" \n                 [style.color]=\"currentColor\">{{heading?.educationTitle}}</h2>\n            \n                   <div \n                   *ngFor=\"let item of education;let eduIndex=index\"\n                   [style.marginBottom]=\"eduIndex<education?.length-1 ? '40px' : '0'\"\n                   >\n                \n                  <table style=\"border: 1px solid transparent;\">\n                      <tr>\n                        <td style=\"padding-right: 5px;vertical-align: top;\">\n                          <svg xmlns=\"http://www.w3.org/2000/svg\"\n                          style=\"color: #9b9b9b\"\n                          width=\"10\" height=\"10\" fill=\"currentColor\" class=\"bi bi-square-fill\" viewBox=\"0 0 16 16\">\n                            <path d=\"M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2z\"/>\n                          </svg>\n                        </td>\n                        <td style=\"vertical-align: top;\">\n                          <h5      \n                          [ngStyle]=\"{\n                            'fontSize':(fontsize && wdth<992)?'small':'20px'\n                           }\"\n                          style=\"color: #9b9b9b !important;\">\n                            {{item?.university}}</h5>\n                          <p \n                          [ngStyle]=\"{\n                            'fontSize':(fontsize && wdth<992)?'small':'15px'\n                           }\"\n                          style=\"color: #9b9b9b !important;\"\n                          class=\"text-secondary m-0\">{{item?.graduationDate}}</p>\n                        </td>\n                      </tr>\n                  </table>\n                   </div>\n               </div>\n               <!-- end education -->\n               <ng-container *ngIf=\"customSection?.length\">\n                <div\n            \n                 *ngFor=\"let item of customSection\">\n                 <div \n                 cdkDrag\n                 style=\"padding: 10px 30px;cursor: move;\"\n                 *ngIf=\"item.leftOrRight=='left'\">\n                   <h2   \n                   [ngStyle]=\"{\n                    'fontSize':(fontsize && wdth<992)?'small':'25px',\n                    'marginBottom':fontsize?'10px':'20px'\n                   }\" \n                   *ngIf=\"item.sectionTitle\" \n                   [style.color]=\"currentColor\">{{item?.sectionTitle}}</h2>\n                   <div \n                   [style.marginBottom]=\"contentIndex<item.content?.length-1 ? '10px' : '0'\"\n                   *ngFor=\"let content of item.content;let contentIndex=index\">\n                     <h5 \n                     [ngStyle]=\"{\n                      'fontSize':(fontsize && wdth<992)?'small':'20px'\n                     }\" \n                     *ngIf=\"content?.bold\"\n                     style=\"color: #9b9b9b !important;\"\n                     class=\"mb-1\">{{content?.bold}}</h5>\n                     <p \n                     [ngStyle]=\"{\n                      'fontSize':(fontsize && wdth<992)?'small':'15px'\n                     }\" \n                     *ngIf=\"content?.normal\"\n                     class=\"text-secondary mb-1\">{{content?.normal}}</p>\n                \n                     <table \n                     style=\"border:1px solid transparent\">\n                     <ng-container \n                     *ngFor=\"let itemList of content?.list;let cstommIndex=index\"\n                     >\n                     <tr \n                     *ngIf=\"itemList.listItem\"  \n                     [style.marginBottom]=\"cstommIndex<content?.list?.length-1 ? '10px' : '0'\"\n                    >\n                      <td \n                      class=\"pb-2\"\n                      style=\"padding-right: 5px;vertical-align: top;\">\n                       <svg xmlns=\"http://www.w3.org/2000/svg\"\n                       style=\"color: #9b9b9b\"\n                       width=\"10\" height=\"10\" fill=\"currentColor\" class=\"bi bi-square-fill\" viewBox=\"0 0 16 16\">\n                         <path d=\"M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2z\"/>\n                       </svg>\n                       \n                      </td>\n                       <td \n                       style=\"vertical-align: top;\"\n                       class=\"pb-2\"> <p   \n                        [ngStyle]=\"{\n                          'fontSize':(fontsize && wdth<992)?'small':'15px'\n                         }\" \n                        style=\"color: #9b9b9b;margin: 0;\">\n                         {{itemList.listItem}}\n                       </p></td>    \n                     </tr>\n                     </ng-container>\n                     \n                    \n                    </table>\n                      \n                   </div>\n                  </div>\n                 \n           \n                </div>\n              </ng-container>\n              <!-- end custom section -->\n              </div>\n              \n           </div>\n          \n         \n            </th>\n            <!-- end left side -->\n            <th style=\"width: 60%;vertical-align: top\"\n          \n            >\n              <div    cdkDropListGroup>\n                <div \n                cdkDropList\n             #sidebarList=\"cdkDropList\"\n              [cdkDropListData]=\"sidebar\"\n             (cdkDropListDropped)=\"drop($event)\"\n                >\n                <div \n                *ngIf=\"setSummarryAt=='right' && heading.summary\"\n                cdkDrag\n                style=\"padding: 10px 30px;cursor: move\">\n                  <h2      \n                  [ngStyle]=\"{\n                    'fontSize':(fontsize && wdth<992)?'small':'25px',\n                    'marginBottom':fontsize?'10px':'20px'\n                   }\" \n                  [style.color]=\"currentColor\">{{heading.summaryTitle}}</h2>\n                  <p \n                  [ngStyle]=\"{\n                    'fontSize':(fontsize && wdth<992)?'small':'15px'\n                   }\" \n                  style=\"color: #9b9b9b !important;\"\n                  class=\"m-0\">{{heading.summary}}</p>\n                </div>\n                <!-- end summary -->\n                <div\n                style=\"padding: 10px 30px;cursor: move;\" \n                cdkDrag\n                *ngIf=\"skills.length && setSkillsAt=='right'\">\n                  <h2 \n                  [ngStyle]=\"{\n                    'fontSize':(fontsize && wdth<992)?'small':'25px',\n                    'marginBottom':fontsize?'10px':'20px'\n                   }\" \n                  [style.color]=\"currentColor\">\n                   {{heading.skillsTitle}}\n                 </h2>\n            \n                  <table style=\"border:1px solid transparent\">\n                    <tr   \n                    [style.marginBottom]=\"skillsIndex<skills?.length-1 ? '10px' : '0'\"\n                    *ngFor=\"let item of skills;let skillsIndex=index\">\n                     <td \n                     class=\"pb-2\"\n                     style=\"padding-right: 5px;vertical-align: top;\">\n                      <svg xmlns=\"http://www.w3.org/2000/svg\"\n                      style=\"color: #9b9b9b\"\n                      width=\"10\" height=\"10\" fill=\"currentColor\" class=\"bi bi-square-fill\" viewBox=\"0 0 16 16\">\n                        <path d=\"M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2z\"/>\n                      </svg>\n                     </td>\n                      <td \n                      style=\"vertical-align: top;\"\n                      class=\"pb-2\"> <p   \n                        [ngStyle]=\"{\n                          'fontSize':(fontsize && wdth<992)?'small':'15px'\n                         }\" \n                        style=\"color: #9b9b9b;margin: 0;\">\n                        {{item}}\n                      </p></td>    \n                    </tr>\n                  </table>\n                </div>\n                <!-- end skills -->\n                  <div \n                  cdkDrag\n                  style=\"padding: 10px 30px;cursor: move;\" \n                   *ngIf=\"experience?.length && setExperienceAt=='right'\">\n                    <h2 \n                    [ngStyle]=\"{\n                      'fontSize':(fontsize && wdth<992)?'small':'25px',\n                      'marginBottom':fontsize?'10px':'20px'\n                     }\" \n                    [style.color]=\"currentColor\">{{heading?.experienceTitle}}</h2>\n                      <div \n                      *ngFor=\"let item of experience;let experienceIndex=index\"\n                      [style.marginBottom]=\"experienceIndex<experience?.length-1 ? '40px' : '0'\"\n         \n                      >\n                      <table style=\"border: 1px solid transparent;\">\n                        <td style=\"padding-right: 5px;vertical-align: top;\">\n                          <svg xmlns=\"http://www.w3.org/2000/svg\"\n                          style=\"color: #9b9b9b\"\n                          width=\"10\" height=\"10\" fill=\"currentColor\" class=\"bi bi-square-fill\" viewBox=\"0 0 16 16\">\n                            <path d=\"M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2z\"/>\n                          </svg>\n                        </td>\n                        <td style=\"vertical-align: top;\">\n                          <h5      \n                          [ngStyle]=\"{\n                            'fontSize':(fontsize && wdth<992)?'small':'20px'\n                           }\" \n                          style=\"color: #9b9b9b !important;\">\n                    \n                            {{item?.jopbTitle}} {{'At ' + item?.employer}}\n                        </h5>\n                       <p \n                       [ngStyle]=\"{\n                        'fontSize':(fontsize && wdth<992)?'small':'15px'\n                       }\" \n                       style=\"color: #9b9b9b !important;\"\n                       class=\"text-secondary\" style=\"margin: 5px 0 10px 0;\">{{item?.startDate}} - {{item?.current ? 'Current' : item?.endDate}}</p>\n                       <p \n                       [ngStyle]=\"{\n                        'fontSize':(fontsize && wdth<992)?'small':'15px'\n                       }\" \n                       style=\"color: #9b9b9b !important;\"\n                       class=\"m-0\">{{item?.summary}}</p>\n                        </td>\n                      </table>\n                     \n                      </div>\n                  </div>\n                  <!-- end experience -->\n                  <div \n                  cdkDrag\n                  style=\"padding: 10px 30px;cursor: move;\" \n                   *ngIf=\"education?.length && setEducationAt=='right'\">\n                   <h2    \n                   [ngStyle]=\"{\n                    'fontSize':(fontsize && wdth<992)?'small':'25px',\n                    'marginBottom':fontsize?'10px':'20px'\n                   }\" \n                   [style.color]=\"currentColor\">{{heading?.educationTitle}}</h2>\n              \n                     <div \n                     *ngFor=\"let item of education;let eduIndex=index\"\n                     [style.marginBottom]=\"eduIndex<education?.length-1 ? '40px' : '0'\"\n                     >\n                  \n                    <table style=\"border: 1px solid transparent;\">\n                        <tr>\n                          <td style=\"padding-right: 5px;vertical-align: top;\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\"\n                            style=\"color: #9b9b9b\"\n                            width=\"10\" height=\"10\" fill=\"currentColor\" class=\"bi bi-square-fill\" viewBox=\"0 0 16 16\">\n                              <path d=\"M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2z\"/>\n                            </svg>\n                          </td>\n                          <td\n                          style=\"vertical-align: top;\"\n                          >\n                            <h5     \n                            [ngStyle]=\"{\n                              'fontSize':(fontsize && wdth<992)?'small':'20px'\n                             }\" \n                            style=\"color: #9b9b9b !important;\">\n                              {{item?.university}}</h5>\n                            <p \n                            [ngStyle]=\"{\n                              'fontSize':(fontsize && wdth<992)?'small':'15px'\n                             }\" \n                            style=\"color: #9b9b9b !important;\"\n                            class=\"text-secondary m-0\">{{item?.graduationDate}}</p>\n                          </td>\n                        </tr>\n                    </table>\n                     </div>\n                 </div>\n                 <!-- end education -->\n                 <ng-container *ngIf=\"customSection?.length\">\n                   <div\n                    *ngFor=\"let item of customSection\">\n                    <div \n                    cdkDrag\n                    style=\"padding: 10px 30px;cursor: move;\" \n                    *ngIf=\"item.leftOrRight=='right'\">\n                      <h2  \n                      *ngIf=\"item?.sectionTitle\"  \n                      [ngStyle]=\"{\n                        'fontSize':(fontsize && wdth<992)?'small':'25px',\n                        'marginBottom':fontsize?'10px':'20px'\n                       }\" \n                      [style.color]=\"currentColor\">{{item?.sectionTitle}}</h2>\n                      <div \n                      [style.marginBottom]=\"contentIndex<item.content?.length-1 ? '10px' : '0'\"\n                      *ngFor=\"let content of item.content;let contentIndex=index\">\n                        <h5 \n                        [ngStyle]=\"{\n                          'fontSize':(fontsize && wdth<992)?'small':'20px'\n                         }\" \n                        *ngIf=\"content?.bold\"\n                        style=\"color: #9b9b9b !important;\"\n                        class=\"mb-1\">{{content?.bold}}</h5>\n                        <p \n                        [ngStyle]=\"{\n                          'fontSize':(fontsize && wdth<992)?'small':'15px'\n                         }\" \n                        *ngIf=\"content?.normal\"\n                        class=\"text-secondary mb-1\">{{content?.normal}}</p>\n                   \n                        <table \n                        style=\"border:1px solid transparent\">\n                        <ng-container \n                        *ngFor=\"let itemList of content?.list;let cstommIndex=index\"\n                        >\n                          <tr  \n                          *ngIf=\"itemList.listItem\" \n                          [style.marginBottom]=\"cstommIndex<content?.list?.length-1 ? '10px' : '0'\"\n                       >\n                           <td \n                           class=\"pb-2\"\n                           style=\"padding-right: 5px;vertical-align: top;\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\"\n                            style=\"color: #9b9b9b\"\n                            width=\"10\" height=\"10\" fill=\"currentColor\" class=\"bi bi-square-fill\" viewBox=\"0 0 16 16\">\n                              <path d=\"M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2z\"/>\n                            </svg>\n                            \n                           </td>\n                            <td \n                            style=\"vertical-align: top;\"\n                            class=\"pb-2\"> <p   \n                              [ngStyle]=\"{\n                                'fontSize':(fontsize && wdth<992)?'small':'15px'\n                               }\" \n                              style=\"color: #9b9b9b;margin: 0;\">\n                              {{itemList.listItem}}\n                            </p></td>    \n                          </tr>\n                        </ng-container>\n                        \n                       \n                       </table>\n                         \n                      </div>\n                    </div>\n                    \n              \n                   </div>\n                 </ng-container>\n                 <!-- end custom section -->\n                </div>\n                \n             </div>\n             \n            </th>\n            <!-- end right side -->\n          </tr>\n       </table>\n    \n  \n    </div>\n    <!-- end template one -->\n\n    <div\n      *ngIf=\"currentTemplate==3\" \n      [id]=\"currentTemplate == 3 ? 'content' : 'none'\"\n      >\n  \n      <!-- start heading -->\n        <div \n        [style.backgroundColor]=\"currentColor\"\n        style=\"color: white;padding: 30px;margin-bottom: 10px;\"\n        >\n          <h2   \n          [style.fontSize]=\"(fontsize && wdth<992)?'medium':'32px'\"\n          class=\"mb-1 mainName\">{{heading?.name}}</h2>\n          <h4 \n          [style.fontSize]=\"(fontsize && wdth<992)?'small':'24px'\"\n          class=\"mb-1\">{{heading?.position}}</h4>\n          <table  style=\"border: 1px solid transparent;\">\n            <tr>\n             <td style=\"padding-right: 10px;vertical-align: text-top;\">\n              <svg \n              style=\"color:white\"\n              xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-envelope-fill\" viewBox=\"0 0 16 16\">\n                <path d=\"M.05 3.555A2 2 0 0 1 2 2h12a2 2 0 0 1 1.95 1.555L8 8.414.05 3.555ZM0 4.697v7.104l5.803-3.558L0 4.697ZM6.761 8.83l-6.57 4.027A2 2 0 0 0 2 14h12a2 2 0 0 0 1.808-1.144l-6.57-4.027L8 9.586l-1.239-.757Zm3.436-.586L16 11.801V4.697l-5.803 3.546Z\"/>\n              </svg>\n             </td>\n              <td style=\"vertical-align: text-top;font-weight:normal;color:white\"\n              [style.fontSize]=\"(fontsize && wdth<992)?'small':'15px'\"\n              >{{heading?.email}}</td>    \n            </tr>\n          </table>\n       </div>\n       <!-- end heading -->\n\n       <table style=\"width: 100%;border: 1px solid transparent\">\n      \n          <tr>\n            <th \n    \n            style=\"width: 40%;vertical-align: top\">\n            <div style=\"padding: 10px 30px;\">\n              <h2  \n              [ngStyle]=\"{\n               'fontSize':(fontsize && wdth<992)?'small':'25px',\n               'marginBottom':fontsize?'10px':'20px'\n              }\"    \n              [style.color]=\"currentColor\">Contact :</h2>\n              <table style=\"border: 1px solid transparent;\"> \n                <tr>\n                 <td style=\"padding-right: 10px;vertical-align: text-top;\">\n                   <svg \n                   style=\"color:rgb(155, 155, 155)\"\n                   xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-geo-alt-fill\" viewBox=\"0 0 16 16\">\n                     <path d=\"M8 16s6-5.686 6-10A6 6 0 0 0 2 6c0 4.314 6 10 6 10zm0-7a3 3 0 1 1 0-6 3 3 0 0 1 0 6z\"/>\n                   </svg>\n                 </td>\n                  <td \n                  \n                  style=\"vertical-align: text-top;font-weight:normal;color:rgb(155, 155, 155)\"\n                  [style.fontSize]=\"(fontsize && wdth<992)?'small':'15px'\"\n                  >{{heading?.address}}</td>    \n                </tr>\n              </table>\n              <table  style=\"border: 1px solid transparent;\">\n               <tr>\n                <td style=\"padding-right: 10px;vertical-align: text-top;\">\n                 <svg \n                 style=\"color:rgb(155, 155, 155)\"\n                 xmlns=\"http://www.w3.org/2000/svg\"  width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-telephone-fill\" viewBox=\"0 0 16 16\">\n                   <path fill-rule=\"evenodd\" d=\"M1.885.511a1.745 1.745 0 0 1 2.61.163L6.29 2.98c.329.423.445.974.315 1.494l-.547 2.19a.678.678 0 0 0 .178.643l2.457 2.457a.678.678 0 0 0 .644.178l2.189-.547a1.745 1.745 0 0 1 1.494.315l2.306 1.794c.829.645.905 1.87.163 2.611l-1.034 1.034c-.74.74-1.846 1.065-2.877.702a18.634 18.634 0 0 1-7.01-4.42 18.634 18.634 0 0 1-4.42-7.009c-.362-1.03-.037-2.137.703-2.877L1.885.511z\"/>\n                 </svg>\n                </td>\n                 <td style=\"vertical-align: text-top;font-weight:normal;color:rgb(155, 155, 155)\"\n                 [style.fontSize]=\"(fontsize && wdth<992)?'small':'15px'\"\n                 >{{heading?.phone}}</td>    \n               </tr>\n             </table>\n        \n            </div>\n            <!-- end contact -->\n            <div    cdkDropListGroup>\n              <div \n              cdkDropList\n           #sidebarList=\"cdkDropList\"\n            [cdkDropListData]=\"sidebar\"\n           (cdkDropListDropped)=\"drop($event)\"\n              >\n              <div \n  \n              *ngIf=\"setSummarryAt=='left' && heading.summary\"\n              cdkDrag\n              style=\"padding: 10px 30px;cursor: move\">\n                <h2  \n                [ngStyle]=\"{\n                 'fontSize':(fontsize && wdth<992)?'small':'25px',\n                 'marginBottom':fontsize?'10px':'20px'\n                }\"    \n                [style.color]=\"currentColor\">{{heading.summaryTitle}}</h2>\n                <p \n                [style.fontSize]=\"(fontsize && wdth<992)?'small':'15px'\"\n                style=\"color: #9b9b9b !important;\"\n                class=\"m-0\">{{heading.summary}}</p>\n              </div>\n              <!-- end summary -->\n                <div\n                style=\"padding: 10px 30px;cursor: move;\" \n                cdkDrag\n                *ngIf=\"skills.length && setSkillsAt=='left'\">\n                  <h2 \n                  [ngStyle]=\"{\n                    'fontSize':(fontsize && wdth<992)?'small':'25px',\n                    'marginBottom':fontsize?'10px':'20px'\n                   }\"   \n                  [style.color]=\"currentColor\">\n                   {{heading.skillsTitle}}\n                 </h2>\n            \n                  <table style=\"border:1px solid transparent\">\n                    <tr   \n                    [style.marginBottom]=\"skillsIndex<skills?.length-1 ? '10px' : '0'\"\n                    *ngFor=\"let item of skills;let skillsIndex=index\">\n                     <td \n                     class=\"pb-2\"\n                     style=\"padding-right: 5px;vertical-align: top;\">\n                      <svg xmlns=\"http://www.w3.org/2000/svg\"\n                      style=\"color: #9b9b9b\"\n                      width=\"10\" height=\"10\" fill=\"currentColor\" class=\"bi bi-square-fill\" viewBox=\"0 0 16 16\">\n                        <path d=\"M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2z\"/>\n                      </svg>\n                      \n                     </td>\n                      <td \n                      style=\"vertical-align: top;\"\n                      class=\"pb-2\"> \n                        <p   \n                        [style.fontSize]=\"(fontsize && wdth<992)?'small':'15px'\"\n                        style=\"color: #9b9b9b;margin: 0;\">\n                        {{item}}\n                      </p></td>    \n                    </tr>\n                  </table>\n                </div>\n                <!-- end skills -->\n                <div \n                cdkDrag\n                style=\"padding: 10px 30px;cursor: move;\" \n                 *ngIf=\"experience?.length && setExperienceAt=='left'\">\n                  <h2 \n                  [ngStyle]=\"{\n                    'fontSize':(fontsize && wdth<992)?'small':'25px',\n                    'marginBottom':fontsize?'10px':'20px'\n                   }\"   \n                  [style.color]=\"currentColor\">{{heading?.experienceTitle}}</h2>\n                    <div \n                    *ngFor=\"let item of experience;let experienceIndex=index\"\n                    [style.marginBottom]=\"experienceIndex<experience?.length-1 ? '40px' : '0'\"\n       \n                    >\n                    <table style=\"border: 1px solid transparent;\">\n                      <td style=\"padding-right: 5px;vertical-align: top;\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\"\n                        style=\"color: #9b9b9b\"\n                        width=\"10\" height=\"10\" fill=\"currentColor\" class=\"bi bi-square-fill\" viewBox=\"0 0 16 16\">\n                          <path d=\"M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2z\"/>\n                        </svg>\n                      </td>\n                      <td style=\"vertical-align: top;\">\n                        <h5      \n                        [ngStyle]=\"{\n                          'fontSize':(fontsize && wdth<992)?'small':'20px'\n                         }\"  \n                        style=\"color: #9b9b9b !important;\">\n                  \n                          {{item?.jopbTitle}} {{'At ' + item?.employer}}\n                      </h5>\n                     <p \n                     [ngStyle]=\"{\n                      'fontSize':(fontsize && wdth<992)?'small':'15px'\n                     }\"  \n                     style=\"color: #9b9b9b !important;\"\n                     class=\"text-secondary\" style=\"margin: 5px 0 10px 0;\">{{item?.startDate}} - {{item?.current ? 'Current' : item?.endDate}}</p>\n                     <p \n                     [ngStyle]=\"{\n                      'fontSize':(fontsize && wdth<992)?'small':'15px'\n                     }\"  \n                     style=\"color: #9b9b9b !important;\"\n                     class=\"m-0\">{{item?.summary}}</p>\n                      </td>\n                    </table>\n                   \n                    </div>\n                </div>\n                <!-- end experience -->\n                <div \n                cdkDrag\n                style=\"padding: 10px 30px;cursor: move;\" \n                 *ngIf=\"education?.length && setEducationAt=='left'\">\n                 <h2    \n                 [ngStyle]=\"{\n                  'fontSize':(fontsize && wdth<992)?'small':'25px',\n                  'marginBottom':fontsize?'10px':'20px'\n                 }\" \n                 [style.color]=\"currentColor\">{{heading?.educationTitle}}</h2>\n            \n                   <div \n                   *ngFor=\"let item of education;let eduIndex=index\"\n                   [style.marginBottom]=\"eduIndex<education?.length-1 ? '40px' : '0'\"\n                   >\n                \n                  <table style=\"border: 1px solid transparent;\">\n                      <tr>\n                        <td style=\"padding-right: 5px;vertical-align: top;\">\n                          <svg xmlns=\"http://www.w3.org/2000/svg\"\n                          style=\"color: #9b9b9b\"\n                          width=\"10\" height=\"10\" fill=\"currentColor\" class=\"bi bi-square-fill\" viewBox=\"0 0 16 16\">\n                            <path d=\"M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2z\"/>\n                          </svg>\n                        </td>\n                        <td style=\"vertical-align: top;\">\n                          <h5      \n                          [ngStyle]=\"{\n                            'fontSize':(fontsize && wdth<992)?'small':'20px'\n                           }\"\n                          style=\"color: #9b9b9b !important;\">\n                            {{item?.university}}</h5>\n                          <p \n                          [ngStyle]=\"{\n                            'fontSize':(fontsize && wdth<992)?'small':'15px'\n                           }\"\n                          style=\"color: #9b9b9b !important;\"\n                          class=\"text-secondary m-0\">{{item?.graduationDate}}</p>\n                        </td>\n                      </tr>\n                  </table>\n                   </div>\n               </div>\n               <!-- end education -->\n               <ng-container *ngIf=\"customSection?.length\">\n                <div\n            \n                 *ngFor=\"let item of customSection\">\n                 <div \n                 cdkDrag\n                 style=\"padding: 10px 30px;cursor: move;\"\n                 *ngIf=\"item.leftOrRight=='left'\">\n                   <h2   \n                   [ngStyle]=\"{\n                    'fontSize':(fontsize && wdth<992)?'small':'25px',\n                    'marginBottom':fontsize?'10px':'20px'\n                   }\" \n                   *ngIf=\"item.sectionTitle\" \n                   [style.color]=\"currentColor\">{{item?.sectionTitle}}</h2>\n                   <div \n                   [style.marginBottom]=\"contentIndex<item.content?.length-1 ? '10px' : '0'\"\n                   *ngFor=\"let content of item.content;let contentIndex=index\">\n                     <h5 \n                     [ngStyle]=\"{\n                      'fontSize':(fontsize && wdth<992)?'small':'20px'\n                     }\" \n                     *ngIf=\"content?.bold\"\n                     style=\"color: #9b9b9b !important;\"\n                     class=\"mb-1\">{{content?.bold}}</h5>\n                     <p \n                     [ngStyle]=\"{\n                      'fontSize':(fontsize && wdth<992)?'small':'15px'\n                     }\" \n                     *ngIf=\"content?.normal\"\n                     class=\"text-secondary mb-1\">{{content?.normal}}</p>\n                \n                     <table \n                     style=\"border:1px solid transparent\">\n                     <ng-container \n                     *ngFor=\"let itemList of content?.list;let cstommIndex=index\"\n                     >\n                     <tr \n                     *ngIf=\"itemList.listItem\"  \n                     [style.marginBottom]=\"cstommIndex<content?.list?.length-1 ? '10px' : '0'\"\n                    >\n                      <td \n                      class=\"pb-2\"\n                      style=\"padding-right: 5px;vertical-align: top;\">\n                       <svg xmlns=\"http://www.w3.org/2000/svg\"\n                       style=\"color: #9b9b9b\"\n                       width=\"10\" height=\"10\" fill=\"currentColor\" class=\"bi bi-square-fill\" viewBox=\"0 0 16 16\">\n                         <path d=\"M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2z\"/>\n                       </svg>\n                       \n                      </td>\n                       <td \n                       style=\"vertical-align: top;\"\n                       class=\"pb-2\"> <p   \n                        [ngStyle]=\"{\n                          'fontSize':(fontsize && wdth<992)?'small':'15px'\n                         }\" \n                        style=\"color: #9b9b9b;margin: 0;\">\n                         {{itemList.listItem}}\n                       </p></td>    \n                     </tr>\n                     </ng-container>\n                     \n                    \n                    </table>\n                      \n                   </div>\n                  </div>\n                 \n           \n                </div>\n              </ng-container>\n              <!-- end custom section -->\n              </div>\n              \n           </div>\n          \n         \n            </th>\n            <!-- end left side -->\n            <th style=\"width: 60%;vertical-align: top\"\n          \n            >\n              <div    cdkDropListGroup>\n                <div \n                cdkDropList\n             #sidebarList=\"cdkDropList\"\n              [cdkDropListData]=\"sidebar\"\n             (cdkDropListDropped)=\"drop($event)\"\n                >\n                <div \n                *ngIf=\"setSummarryAt=='right' && heading.summary\"\n                cdkDrag\n                style=\"padding: 10px 30px;cursor: move\">\n                  <h2      \n                  [ngStyle]=\"{\n                    'fontSize':(fontsize && wdth<992)?'small':'25px',\n                    'marginBottom':fontsize?'10px':'20px'\n                   }\" \n                  [style.color]=\"currentColor\">{{heading.summaryTitle}}</h2>\n                  <p \n                  [ngStyle]=\"{\n                    'fontSize':(fontsize && wdth<992)?'small':'15px'\n                   }\" \n                  style=\"color: #9b9b9b !important;\"\n                  class=\"m-0\">{{heading.summary}}</p>\n                </div>\n                <!-- end summary -->\n                <div\n                style=\"padding: 10px 30px;cursor: move;\" \n                cdkDrag\n                *ngIf=\"skills.length && setSkillsAt=='right'\">\n                  <h2 \n                  [ngStyle]=\"{\n                    'fontSize':(fontsize && wdth<992)?'small':'25px',\n                    'marginBottom':fontsize?'10px':'20px'\n                   }\" \n                  [style.color]=\"currentColor\">\n                   {{heading.skillsTitle}}\n                 </h2>\n            \n                  <table style=\"border:1px solid transparent\">\n                    <tr   \n                    [style.marginBottom]=\"skillsIndex<skills?.length-1 ? '10px' : '0'\"\n                    *ngFor=\"let item of skills;let skillsIndex=index\">\n                     <td \n                     class=\"pb-2\"\n                     style=\"padding-right: 5px;vertical-align: top;\">\n                      <svg xmlns=\"http://www.w3.org/2000/svg\"\n                      style=\"color: #9b9b9b\"\n                      width=\"10\" height=\"10\" fill=\"currentColor\" class=\"bi bi-square-fill\" viewBox=\"0 0 16 16\">\n                        <path d=\"M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2z\"/>\n                      </svg>\n                     </td>\n                      <td \n                      style=\"vertical-align: top;\"\n                      class=\"pb-2\"> <p   \n                        [ngStyle]=\"{\n                          'fontSize':(fontsize && wdth<992)?'small':'15px'\n                         }\" \n                        style=\"color: #9b9b9b;margin: 0;\">\n                        {{item}}\n                      </p></td>    \n                    </tr>\n                  </table>\n                </div>\n                <!-- end skills -->\n                  <div \n                  cdkDrag\n                  style=\"padding: 10px 30px;cursor: move;\" \n                   *ngIf=\"experience?.length && setExperienceAt=='right'\">\n                    <h2 \n                    [ngStyle]=\"{\n                      'fontSize':(fontsize && wdth<992)?'small':'25px',\n                      'marginBottom':fontsize?'10px':'20px'\n                     }\" \n                    [style.color]=\"currentColor\">{{heading?.experienceTitle}}</h2>\n                      <div \n                      *ngFor=\"let item of experience;let experienceIndex=index\"\n                      [style.marginBottom]=\"experienceIndex<experience?.length-1 ? '40px' : '0'\"\n         \n                      >\n                      <table style=\"border: 1px solid transparent;\">\n                        <td style=\"padding-right: 5px;vertical-align: top;\">\n                          <svg xmlns=\"http://www.w3.org/2000/svg\"\n                          style=\"color: #9b9b9b\"\n                          width=\"10\" height=\"10\" fill=\"currentColor\" class=\"bi bi-square-fill\" viewBox=\"0 0 16 16\">\n                            <path d=\"M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2z\"/>\n                          </svg>\n                        </td>\n                        <td style=\"vertical-align: top;\">\n                          <h5      \n                          [ngStyle]=\"{\n                            'fontSize':(fontsize && wdth<992)?'small':'20px'\n                           }\" \n                          style=\"color: #9b9b9b !important;\">\n                    \n                            {{item?.jopbTitle}} {{'At ' + item?.employer}}\n                        </h5>\n                       <p \n                       [ngStyle]=\"{\n                        'fontSize':(fontsize && wdth<992)?'small':'15px'\n                       }\" \n                       style=\"color: #9b9b9b !important;\"\n                       class=\"text-secondary\" style=\"margin: 5px 0 10px 0;\">{{item?.startDate}} - {{item?.current ? 'Current' : item?.endDate}}</p>\n                       <p \n                       [ngStyle]=\"{\n                        'fontSize':(fontsize && wdth<992)?'small':'15px'\n                       }\" \n                       style=\"color: #9b9b9b !important;\"\n                       class=\"m-0\">{{item?.summary}}</p>\n                        </td>\n                      </table>\n                     \n                      </div>\n                  </div>\n                  <!-- end experience -->\n                  <div \n                  cdkDrag\n                  style=\"padding: 10px 30px;cursor: move;\" \n                   *ngIf=\"education?.length && setEducationAt=='right'\">\n                   <h2    \n                   [ngStyle]=\"{\n                    'fontSize':(fontsize && wdth<992)?'small':'25px',\n                    'marginBottom':fontsize?'10px':'20px'\n                   }\" \n                   [style.color]=\"currentColor\">{{heading?.educationTitle}}</h2>\n              \n                     <div \n                     *ngFor=\"let item of education;let eduIndex=index\"\n                     [style.marginBottom]=\"eduIndex<education?.length-1 ? '40px' : '0'\"\n                     >\n                  \n                    <table style=\"border: 1px solid transparent;\">\n                        <tr>\n                          <td style=\"padding-right: 5px;vertical-align: top;\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\"\n                            style=\"color: #9b9b9b\"\n                            width=\"10\" height=\"10\" fill=\"currentColor\" class=\"bi bi-square-fill\" viewBox=\"0 0 16 16\">\n                              <path d=\"M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2z\"/>\n                            </svg>\n                          </td>\n                          <td \n                          style=\"vertical-align: top;\"\n                          >\n                            <h5     \n                            [ngStyle]=\"{\n                              'fontSize':(fontsize && wdth<992)?'small':'20px'\n                             }\" \n                            style=\"color: #9b9b9b !important;\">\n                              {{item?.university}}</h5>\n                            <p \n                            [ngStyle]=\"{\n                              'fontSize':(fontsize && wdth<992)?'small':'15px'\n                             }\" \n                            style=\"color: #9b9b9b !important;\"\n                            class=\"text-secondary m-0\">{{item?.graduationDate}}</p>\n                          </td>\n                        </tr>\n                    </table>\n                     </div>\n                 </div>\n                 <!-- end education -->\n                 <ng-container *ngIf=\"customSection?.length\">\n                   <div\n                    *ngFor=\"let item of customSection\">\n                    <div \n                    cdkDrag\n                    style=\"padding: 10px 30px;cursor: move;\" \n                    *ngIf=\"item.leftOrRight=='right'\">\n                      <h2  \n                      *ngIf=\"item?.sectionTitle\"  \n                      [ngStyle]=\"{\n                        'fontSize':(fontsize && wdth<992)?'small':'25px',\n                        'marginBottom':fontsize?'10px':'20px'\n                       }\" \n                      [style.color]=\"currentColor\">{{item?.sectionTitle}}</h2>\n                      <div \n                      [style.marginBottom]=\"contentIndex<item.content?.length-1 ? '10px' : '0'\"\n                      *ngFor=\"let content of item.content;let contentIndex=index\">\n                        <h5 \n                        [ngStyle]=\"{\n                          'fontSize':(fontsize && wdth<992)?'small':'20px'\n                         }\" \n                        *ngIf=\"content?.bold\"\n                        style=\"color: #9b9b9b !important;\"\n                        class=\"mb-1\">{{content?.bold}}</h5>\n                        <p \n                        [ngStyle]=\"{\n                          'fontSize':(fontsize && wdth<992)?'small':'15px'\n                         }\" \n                        *ngIf=\"content?.normal\"\n                        class=\"text-secondary mb-1\">{{content?.normal}}</p>\n                   \n                        <table \n                        style=\"border:1px solid transparent\">\n                        <ng-container \n                        *ngFor=\"let itemList of content?.list;let cstommIndex=index\"\n                        >\n                          <tr  \n                          *ngIf=\"itemList.listItem\" \n                          [style.marginBottom]=\"cstommIndex<content?.list?.length-1 ? '10px' : '0'\"\n                       >\n                           <td \n                           class=\"pb-2\"\n                           style=\"padding-right: 5px;vertical-align: top;\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\"\n                            style=\"color: #9b9b9b\"\n                            width=\"10\" height=\"10\" fill=\"currentColor\" class=\"bi bi-square-fill\" viewBox=\"0 0 16 16\">\n                              <path d=\"M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2z\"/>\n                            </svg>\n                            \n                           </td>\n                            <td \n                            style=\"vertical-align: top;\"\n                            class=\"pb-2\"> <p   \n                              [ngStyle]=\"{\n                                'fontSize':(fontsize && wdth<992)?'small':'15px'\n                               }\" \n                              style=\"color: #9b9b9b;margin: 0;\">\n                              {{itemList.listItem}}\n                            </p></td>    \n                          </tr>\n                        </ng-container>\n                        \n                       \n                       </table>\n                         \n                      </div>\n                    </div>\n                    \n              \n                   </div>\n                 </ng-container>\n                 <!-- end custom section -->\n                </div>\n                \n             </div>\n             \n            </th>\n            <!-- end right side -->\n          </tr>\n       </table>\n    \n  \n    </div>\n    <!-- end template three -->\n    <div \n    *ngIf=\"currentTemplate==2\"  \n      cdkDropListGroup\n      class=\" cvSection\">\n        <div  \n         [id]=\"currentTemplate == 2 ? 'content' : 'none'\"\n        style=\"padding: 70px;\"\n        >\n          <div \n        style=\"margin-bottom: 30px;\">\n            <h2 \n            [ngStyle]=\"{\n              'fontSize':(fontsize && wdth<992)?'small':'32px'\n             }\" \n            [style.color]=\"currentColor\"\n            class=\"m-0 mainName\">{{heading?.name}}</h2>\n            <h4\n            [ngStyle]=\"{\n              'fontSize':(fontsize && wdth<992)?'small':'25px'\n             }\" \n            style=\"margin-bottom: 20px;\"\n            >{{heading?.position}}</h4>\n            <p \n            [ngStyle]=\"{\n              'fontSize':(fontsize && wdth<992)?'small':'15px'\n             }\" \n            class=\"m-0\">{{heading?.address}}</p>\n            <p\n            [ngStyle]=\"{\n              'fontSize':(fontsize && wdth<992)?'small':'15px'\n             }\" \n            class=\"m-0\">{{heading?.phone}}</p>\n            <p \n            [ngStyle]=\"{\n              'fontSize':(fontsize && wdth<992)?'small':'15px'\n             }\" \n            class=\"m-0 text-primary\">{{heading?.email}}</p>\n         </div>\n         <!-- end heading -->\n         <div\n         cdkDropList\n         #sidebarList=\"cdkDropList\"\n          [cdkDropListData]=\"sidebar\"\n               (cdkDropListDropped)=\"drop($event)\"\n         > \n         <div\n         style=\"cursor: move;\"\n         cdkDrag\n         class=\"mb-4\">\n           <h2   \n           [ngStyle]=\"{\n            'fontSize':(fontsize && wdth<992)?'small':'25px'\n           }\" \n           style=\"\n           font-weight: bold;margin-bottom: 10px;\"\n           [style.color]=\"currentColor\">{{heading.summaryTitle}}</h2>\n           <p\n           [ngStyle]=\"{\n            'fontSize':(fontsize && wdth<992)?'small':'15px'\n           }\" \n           >{{heading.summary}}</p>\n         </div>\n         <!-- end summary -->\n         <div\n       class=\"mb-4\"\n       style=\"cursor: move;\"\n         cdkDrag\n         *ngIf=\"skills.length\">\n           <h2 \n           [ngStyle]=\"{\n            'fontSize':(fontsize && wdth<992)?'small':'25px'\n           }\" \n           style=\"\n           font-weight: bold;margin-bottom: 10px;\"\n           [style.color]=\"currentColor\">\n            {{heading.skillsTitle}}\n          </h2>\n     \n           <table style=\"border:1px solid transparent\">\n             <tr   \n             [style.marginBottom]=\"skillsIndex<skills?.length-1 ? '10px' : '0'\"\n             *ngFor=\"let item of skills;let skillsIndex=index\">\n              <td \n              class=\"pb-2\"\n              style=\"padding-right: 5px;vertical-align: top;\">\n               <svg xmlns=\"http://www.w3.org/2000/svg\"\n               [style.color]=\"currentColor\"\n               width=\"10\" height=\"10\" fill=\"currentColor\" class=\"bi bi-square-fill\" viewBox=\"0 0 16 16\">\n                 <path d=\"M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2z\"/>\n               </svg>\n              </td>\n               <td \n               style=\"vertical-align: top;\"\n               class=\"pb-2\"> <p   \n                [ngStyle]=\"{\n                  'fontSize':(fontsize && wdth<992)?'small':'15px'\n                 }\" \n                style=\"margin: 0;\">\n                 {{item}}\n               </p></td>    \n             </tr>\n           </table>\n         </div>\n         <!-- end skills -->\n         <div \n         style=\"cursor: move;\"\n         cdkDrag\n        class=\"mb-4\"\n          *ngIf=\"experience?.length\">\n           <h2 \n           [ngStyle]=\"{\n            'fontSize':(fontsize && wdth<992)?'small':'25px'\n           }\" \n           style=\"margin-bottom: 10px;font-weight: bold;\"\n           [style.color]=\"currentColor\">{{heading?.experienceTitle}}</h2>\n             <div \n             *ngFor=\"let item of experience;let experienceIndex=index\"\n             [style.marginBottom]=\"experienceIndex<experience?.length-1 ? '40px' : '0'\"\n  \n             >\n             <table style=\"border: 1px solid transparent;\">\n               <td style=\"padding-right: 5px;vertical-align: top;\">\n                 <svg xmlns=\"http://www.w3.org/2000/svg\"\n                 [style.color]=\"currentColor\"\n                 width=\"10\" height=\"10\" fill=\"currentColor\" class=\"bi bi-square-fill\" viewBox=\"0 0 16 16\">\n                   <path d=\"M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2z\"/>\n                 </svg>\n               </td>\n               <td style=\"vertical-align: top;\">\n                 <h5 \n                 [ngStyle]=\"{\n                  'fontSize':(fontsize && wdth<992)?'small':'20px'\n                 }\" \n                 >\n           \n                   {{item?.jopbTitle}} {{'At ' + item?.employer}}\n               </h5>\n              <p \n              [ngStyle]=\"{\n                'fontSize':(fontsize && wdth<992)?'small':'15px'\n               }\" \n          style=\"margin: 5px 0 10px 0;\">{{item?.startDate}} - {{item?.current ? 'Current' : item?.endDate}}</p>\n              <p \n              [ngStyle]=\"{\n                'fontSize':(fontsize && wdth<992)?'small':'15px'\n               }\" \n              class=\"m-0\">{{item?.summary}}</p>\n               </td>\n             </table>\n            \n             </div>\n         </div>\n         <!-- end experience -->\n         <div \n         style=\"cursor: move;\"\n         cdkDrag\n         class=\"mb-4\"\n          *ngIf=\"education?.length\">\n          <h2    \n          [ngStyle]=\"{\n            'fontSize':(fontsize && wdth<992)?'small':'25px'\n           }\" \n          style=\"\n          font-weight: bold;margin-bottom: 10px;\"\n          [style.color]=\"currentColor\">{{heading?.educationTitle}}</h2>\n     \n            <div \n            *ngFor=\"let item of education;let eduIndex=index\"\n            [style.marginBottom]=\"eduIndex<education?.length-1 ? '40px' : '0'\"\n            >\n         \n           <table style=\"border: 1px solid transparent;\">\n               <tr>\n                 <td style=\"padding-right: 5px;vertical-align: top;\">\n                   <svg xmlns=\"http://www.w3.org/2000/svg\"\n                   [style.color]=\"currentColor\"\n                   width=\"10\" height=\"10\" fill=\"currentColor\" class=\"bi bi-square-fill\" viewBox=\"0 0 16 16\">\n                     <path d=\"M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2z\"/>\n                   </svg>\n                 </td>\n                 <td style=\"vertical-align: top;\"> \n                   <h5\n                   [ngStyle]=\"{\n                    'fontSize':(fontsize && wdth<992)?'small':'20px'\n                   }\" \n                   >\n                     {{item?.university}}</h5>\n                   <p \n                   [ngStyle]=\"{\n                    'fontSize':(fontsize && wdth<992)?'small':'15px'\n                   }\" \n                   class=\"text-secondary m-0\">{{item?.graduationDate}}</p>\n                 </td>\n               </tr>\n           </table>\n            </div>\n        </div>\n        <!-- end education -->\n        <ng-container *ngIf=\"customSection?.length\">\n          <div\n           *ngFor=\"let item of customSection\">\n           <div \n           cdkDrag\n           style=\"cursor: move;\"\n          class=\"mb-4\" >\n             <h2  \n             [ngStyle]=\"{\n              'fontSize':(fontsize && wdth<992)?'small':'25px'\n             }\" \n             *ngIf=\"item?.sectionTitle\"  \n             style=\"margin-bottom: 20px;font-weight: bold;\"\n             [style.color]=\"currentColor\">{{item?.sectionTitle}}</h2>\n             <div \n             [style.marginBottom]=\"contentIndex<item.content?.length-1 ? '10px' : '0'\"\n             *ngFor=\"let content of item.content;let contentIndex=index\">\n               <h5 \n               [ngStyle]=\"{\n                'fontSize':(fontsize && wdth<992)?'small':'20px'\n               }\" \n               *ngIf=\"content?.bold\"\n             \n               class=\"mb-1\">{{content?.bold}}</h5>\n               <p \n               [ngStyle]=\"{\n                'fontSize':(fontsize && wdth<992)?'small':'15px'\n               }\" \n               *ngIf=\"content?.normal\"\n               class=\" mb-1\">{{content?.normal}}</p>\n          \n               <table \n               style=\"border:1px solid transparent\">\n               <ng-container \n               *ngFor=\"let itemList of content?.list;let cstommIndex=index\"\n               >\n                 <tr  \n                 *ngIf=\"itemList.listItem\" \n                 [style.marginBottom]=\"cstommIndex<content?.list?.length-1 ? '10px' : '0'\"\n              >\n                  <td \n                  class=\"pb-2\"\n                  style=\"padding-right: 5px;vertical-align: top;\">\n                   <svg xmlns=\"http://www.w3.org/2000/svg\"\n                   [style.color]=\"currentColor\"\n                   width=\"10\" height=\"10\" fill=\"currentColor\" class=\"bi bi-square-fill\" viewBox=\"0 0 16 16\">\n                     <path d=\"M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2z\"/>\n                   </svg>\n                   \n                  </td>\n                   <td class=\"pb-2\" style=\"vertical-align: top;\"> <p \n                    [ngStyle]=\"{\n                      'fontSize':(fontsize && wdth<992)?'small':'15px'\n                     }\" \n                    class=\"m-0\">\n                     {{itemList.listItem}}\n                   </p></td>    \n                 </tr>\n               </ng-container>\n               \n              \n              </table>\n                \n             </div>\n           </div>\n           \n     \n          </div>\n        </ng-container>\n        <!-- end custom section -->\n         </div>\n        </div>\n      </div>\n    <!-- end template two -->\n  </div>\n</ng-template>\n  </div>\n\n\n  \n     \n    </div>\n  </div>\n  <style>\n    footer a {\n      font-size: small;\n    }\n    .mainName {\n      /* font-weight: bold; */\n      font-family: 'Oxygen', sans-serif;\n      font-weight: 700;\n    }\n  \n  \n  \n    * {\n      word-break: break-word;\n    }\n\n  p{font-weight:  normal !important;}\n  </style>","import { coerceNumberProperty, coerceElement } from '@angular/cdk/coercion';\nimport { InjectionToken, Directive, forwardRef, Input, ɵɵdefineInjectable, ɵɵinject, NgZone, Injectable, Optional, Inject, ElementRef, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, Output, ViewChild, ViewContainerRef, TemplateRef, IterableDiffers, SkipSelf, NgModule } from '@angular/core';\nimport { Subject, of, Observable, fromEvent, animationFrameScheduler, asapScheduler, Subscription, isObservable } from 'rxjs';\nimport { distinctUntilChanged, auditTime, filter, takeUntil, startWith, pairwise, switchMap, shareReplay } from 'rxjs/operators';\nimport { Platform, getRtlScrollAxisType, supportsScrollBehavior, PlatformModule } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { isDataSource, ArrayDataSource, _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy } from '@angular/cdk/collections';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The injection token used to specify the virtual scrolling strategy. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/cdk/collections';\n\nconst _c0 = [\"contentWrapper\"];\nconst _c1 = [\"*\"];\nconst VIRTUAL_SCROLL_STRATEGY = new InjectionToken('VIRTUAL_SCROLL_STRATEGY');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Virtual scrolling strategy for lists with items of known fixed size. */\nclass FixedSizeVirtualScrollStrategy {\n    /**\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    constructor(itemSize, minBufferPx, maxBufferPx) {\n        this._scrolledIndexChange = new Subject();\n        /** @docs-private Implemented as part of VirtualScrollStrategy. */\n        this.scrolledIndexChange = this._scrolledIndexChange.pipe(distinctUntilChanged());\n        /** The attached viewport. */\n        this._viewport = null;\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n    }\n    /**\n     * Attaches this scroll strategy to a viewport.\n     * @param viewport The viewport to attach this strategy to.\n     */\n    attach(viewport) {\n        this._viewport = viewport;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** Detaches this scroll strategy from the currently attached viewport. */\n    detach() {\n        this._scrolledIndexChange.complete();\n        this._viewport = null;\n    }\n    /**\n     * Update the item size and buffer size.\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {\n        if (maxBufferPx < minBufferPx && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n        }\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentScrolled() {\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onDataLengthChanged() {\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentRendered() { }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onRenderedOffsetChanged() { }\n    /**\n     * Scroll to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling.\n     */\n    scrollToIndex(index, behavior) {\n        if (this._viewport) {\n            this._viewport.scrollToOffset(index * this._itemSize, behavior);\n        }\n    }\n    /** Update the viewport's total content size. */\n    _updateTotalContentSize() {\n        if (!this._viewport) {\n            return;\n        }\n        this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n    }\n    /** Update the viewport's rendered range. */\n    _updateRenderedRange() {\n        if (!this._viewport) {\n            return;\n        }\n        const renderedRange = this._viewport.getRenderedRange();\n        const newRange = { start: renderedRange.start, end: renderedRange.end };\n        const viewportSize = this._viewport.getViewportSize();\n        const dataLength = this._viewport.getDataLength();\n        let scrollOffset = this._viewport.measureScrollOffset();\n        // Prevent NaN as result when dividing by zero.\n        let firstVisibleIndex = (this._itemSize > 0) ? scrollOffset / this._itemSize : 0;\n        // If user scrolls to the bottom of the list and data changes to a smaller list\n        if (newRange.end > dataLength) {\n            // We have to recalculate the first visible index based on new data length and viewport size.\n            const maxVisibleItems = Math.ceil(viewportSize / this._itemSize);\n            const newVisibleIndex = Math.max(0, Math.min(firstVisibleIndex, dataLength - maxVisibleItems));\n            // If first visible index changed we must update scroll offset to handle start/end buffers\n            // Current range must also be adjusted to cover the new position (bottom of new list).\n            if (firstVisibleIndex != newVisibleIndex) {\n                firstVisibleIndex = newVisibleIndex;\n                scrollOffset = newVisibleIndex * this._itemSize;\n                newRange.start = Math.floor(firstVisibleIndex);\n            }\n            newRange.end = Math.max(0, Math.min(dataLength, newRange.start + maxVisibleItems));\n        }\n        const startBuffer = scrollOffset - newRange.start * this._itemSize;\n        if (startBuffer < this._minBufferPx && newRange.start != 0) {\n            const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n            newRange.start = Math.max(0, newRange.start - expandStart);\n            newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n        }\n        else {\n            const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n            if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n                const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n                if (expandEnd > 0) {\n                    newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n                    newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n                }\n            }\n        }\n        this._viewport.setRenderedRange(newRange);\n        this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n        this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n    }\n}\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n */\nfunction _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {\n    return fixedSizeDir._scrollStrategy;\n}\n/** A virtual scroll strategy that supports fixed-size items. */\nclass CdkFixedSizeVirtualScroll {\n    constructor() {\n        this._itemSize = 20;\n        this._minBufferPx = 100;\n        this._maxBufferPx = 200;\n        /** The scroll strategy used by this directive. */\n        this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n    /** The size of the items in the list (in pixels). */\n    get itemSize() { return this._itemSize; }\n    set itemSize(value) { this._itemSize = coerceNumberProperty(value); }\n    /**\n     * The minimum amount of buffer rendered beyond the viewport (in pixels).\n     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n     */\n    get minBufferPx() { return this._minBufferPx; }\n    set minBufferPx(value) { this._minBufferPx = coerceNumberProperty(value); }\n    /**\n     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n     */\n    get maxBufferPx() { return this._maxBufferPx; }\n    set maxBufferPx(value) { this._maxBufferPx = coerceNumberProperty(value); }\n    ngOnChanges() {\n        this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n}\nCdkFixedSizeVirtualScroll.ɵfac = function CdkFixedSizeVirtualScroll_Factory(t) { return new (t || CdkFixedSizeVirtualScroll)(); };\nCdkFixedSizeVirtualScroll.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkFixedSizeVirtualScroll, selectors: [[\"cdk-virtual-scroll-viewport\", \"itemSize\", \"\"]], inputs: { itemSize: \"itemSize\", minBufferPx: \"minBufferPx\", maxBufferPx: \"maxBufferPx\" }, features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: VIRTUAL_SCROLL_STRATEGY,\n                useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                deps: [forwardRef(() => CdkFixedSizeVirtualScroll)]\n            }]), ɵngcc0.ɵɵNgOnChangesFeature] });\nCdkFixedSizeVirtualScroll.propDecorators = {\n    itemSize: [{ type: Input }],\n    minBufferPx: [{ type: Input }],\n    maxBufferPx: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFixedSizeVirtualScroll, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-virtual-scroll-viewport[itemSize]',\n                providers: [{\n                        provide: VIRTUAL_SCROLL_STRATEGY,\n                        useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                        deps: [forwardRef(() => CdkFixedSizeVirtualScroll)]\n                    }]\n            }]\n    }], function () { return []; }, { itemSize: [{\n            type: Input\n        }], minBufferPx: [{\n            type: Input\n        }], maxBufferPx: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Time in ms to throttle the scrolling events by default. */\nconst DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nclass ScrollDispatcher {\n    constructor(_ngZone, _platform, document) {\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n        this._scrolled = new Subject();\n        /** Keeps track of the global `scroll` and `resize` subscriptions. */\n        this._globalSubscription = null;\n        /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n        this._scrolledCount = 0;\n        /**\n         * Map of all the scrollable references that are registered with the service and their\n         * scroll event subscriptions.\n         */\n        this.scrollContainers = new Map();\n        this._document = document;\n    }\n    /**\n     * Registers a scrollable instance with the service and listens for its scrolled events. When the\n     * scrollable is scrolled, the service emits the event to its scrolled observable.\n     * @param scrollable Scrollable instance to be registered.\n     */\n    register(scrollable) {\n        if (!this.scrollContainers.has(scrollable)) {\n            this.scrollContainers.set(scrollable, scrollable.elementScrolled()\n                .subscribe(() => this._scrolled.next(scrollable)));\n        }\n    }\n    /**\n     * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param scrollable Scrollable instance to be deregistered.\n     */\n    deregister(scrollable) {\n        const scrollableReference = this.scrollContainers.get(scrollable);\n        if (scrollableReference) {\n            scrollableReference.unsubscribe();\n            this.scrollContainers.delete(scrollable);\n        }\n    }\n    /**\n     * Returns an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     *\n     * **Note:** in order to avoid hitting change detection for every scroll event,\n     * all of the events emitted from this stream will be run outside the Angular zone.\n     * If you need to update any data bindings as a result of a scroll event, you have\n     * to run the callback using `NgZone.run`.\n     */\n    scrolled(auditTimeInMs = DEFAULT_SCROLL_TIME) {\n        if (!this._platform.isBrowser) {\n            return of();\n        }\n        return new Observable((observer) => {\n            if (!this._globalSubscription) {\n                this._addGlobalListener();\n            }\n            // In the case of a 0ms delay, use an observable without auditTime\n            // since it does add a perceptible delay in processing overhead.\n            const subscription = auditTimeInMs > 0 ?\n                this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer) :\n                this._scrolled.subscribe(observer);\n            this._scrolledCount++;\n            return () => {\n                subscription.unsubscribe();\n                this._scrolledCount--;\n                if (!this._scrolledCount) {\n                    this._removeGlobalListener();\n                }\n            };\n        });\n    }\n    ngOnDestroy() {\n        this._removeGlobalListener();\n        this.scrollContainers.forEach((_, container) => this.deregister(container));\n        this._scrolled.complete();\n    }\n    /**\n     * Returns an observable that emits whenever any of the\n     * scrollable ancestors of an element are scrolled.\n     * @param elementOrElementRef Element whose ancestors to listen for.\n     * @param auditTimeInMs Time to throttle the scroll events.\n     */\n    ancestorScrolled(elementOrElementRef, auditTimeInMs) {\n        const ancestors = this.getAncestorScrollContainers(elementOrElementRef);\n        return this.scrolled(auditTimeInMs).pipe(filter(target => {\n            return !target || ancestors.indexOf(target) > -1;\n        }));\n    }\n    /** Returns all registered Scrollables that contain the provided element. */\n    getAncestorScrollContainers(elementOrElementRef) {\n        const scrollingContainers = [];\n        this.scrollContainers.forEach((_subscription, scrollable) => {\n            if (this._scrollableContainsElement(scrollable, elementOrElementRef)) {\n                scrollingContainers.push(scrollable);\n            }\n        });\n        return scrollingContainers;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document.defaultView || window;\n    }\n    /** Returns true if the element is contained within the provided Scrollable. */\n    _scrollableContainsElement(scrollable, elementOrElementRef) {\n        let element = coerceElement(elementOrElementRef);\n        let scrollableElement = scrollable.getElementRef().nativeElement;\n        // Traverse through the element parents until we reach null, checking if any of the elements\n        // are the scrollable's element.\n        do {\n            if (element == scrollableElement) {\n                return true;\n            }\n        } while (element = element.parentElement);\n        return false;\n    }\n    /** Sets up the global scroll listeners. */\n    _addGlobalListener() {\n        this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n            const window = this._getWindow();\n            return fromEvent(window.document, 'scroll').subscribe(() => this._scrolled.next());\n        });\n    }\n    /** Cleans up the global scroll listener. */\n    _removeGlobalListener() {\n        if (this._globalSubscription) {\n            this._globalSubscription.unsubscribe();\n            this._globalSubscription = null;\n        }\n    }\n}\nScrollDispatcher.ɵfac = function ScrollDispatcher_Factory(t) { return new (t || ScrollDispatcher)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(DOCUMENT, 8)); };\nScrollDispatcher.ɵprov = ɵɵdefineInjectable({ factory: function ScrollDispatcher_Factory() { return new ScrollDispatcher(ɵɵinject(NgZone), ɵɵinject(Platform), ɵɵinject(DOCUMENT, 8)); }, token: ScrollDispatcher, providedIn: \"root\" });\nScrollDispatcher.ctorParameters = () => [\n    { type: NgZone },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScrollDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\nclass CdkScrollable {\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        this.elementRef = elementRef;\n        this.scrollDispatcher = scrollDispatcher;\n        this.ngZone = ngZone;\n        this.dir = dir;\n        this._destroyed = new Subject();\n        this._elementScrolled = new Observable((observer) => this.ngZone.runOutsideAngular(() => fromEvent(this.elementRef.nativeElement, 'scroll').pipe(takeUntil(this._destroyed))\n            .subscribe(observer)));\n    }\n    ngOnInit() {\n        this.scrollDispatcher.register(this);\n    }\n    ngOnDestroy() {\n        this.scrollDispatcher.deregister(this);\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Returns observable that emits when a scroll event is fired on the host element. */\n    elementScrolled() {\n        return this._elementScrolled;\n    }\n    /** Gets the ElementRef for the viewport. */\n    getElementRef() {\n        return this.elementRef;\n    }\n    /**\n     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param options specified the offsets to scroll to.\n     */\n    scrollTo(options) {\n        const el = this.elementRef.nativeElement;\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        // Rewrite start & end offsets as right or left offsets.\n        if (options.left == null) {\n            options.left = isRtl ? options.end : options.start;\n        }\n        if (options.right == null) {\n            options.right = isRtl ? options.start : options.end;\n        }\n        // Rewrite the bottom offset as a top offset.\n        if (options.bottom != null) {\n            options.top =\n                el.scrollHeight - el.clientHeight - options.bottom;\n        }\n        // Rewrite the right offset as a left offset.\n        if (isRtl && getRtlScrollAxisType() != 0 /* NORMAL */) {\n            if (options.left != null) {\n                options.right =\n                    el.scrollWidth - el.clientWidth - options.left;\n            }\n            if (getRtlScrollAxisType() == 2 /* INVERTED */) {\n                options.left = options.right;\n            }\n            else if (getRtlScrollAxisType() == 1 /* NEGATED */) {\n                options.left = options.right ? -options.right : options.right;\n            }\n        }\n        else {\n            if (options.right != null) {\n                options.left =\n                    el.scrollWidth - el.clientWidth - options.right;\n            }\n        }\n        this._applyScrollToOptions(options);\n    }\n    _applyScrollToOptions(options) {\n        const el = this.elementRef.nativeElement;\n        if (supportsScrollBehavior()) {\n            el.scrollTo(options);\n        }\n        else {\n            if (options.top != null) {\n                el.scrollTop = options.top;\n            }\n            if (options.left != null) {\n                el.scrollLeft = options.left;\n            }\n        }\n    }\n    /**\n     * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n     * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n     * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param from The edge to measure from.\n     */\n    measureScrollOffset(from) {\n        const LEFT = 'left';\n        const RIGHT = 'right';\n        const el = this.elementRef.nativeElement;\n        if (from == 'top') {\n            return el.scrollTop;\n        }\n        if (from == 'bottom') {\n            return el.scrollHeight - el.clientHeight - el.scrollTop;\n        }\n        // Rewrite start & end as left or right offsets.\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        if (from == 'start') {\n            from = isRtl ? RIGHT : LEFT;\n        }\n        else if (from == 'end') {\n            from = isRtl ? LEFT : RIGHT;\n        }\n        if (isRtl && getRtlScrollAxisType() == 2 /* INVERTED */) {\n            // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n            else {\n                return el.scrollLeft;\n            }\n        }\n        else if (isRtl && getRtlScrollAxisType() == 1 /* NEGATED */) {\n            // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft + el.scrollWidth - el.clientWidth;\n            }\n            else {\n                return -el.scrollLeft;\n            }\n        }\n        else {\n            // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n            // (scrollWidth - clientWidth) when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft;\n            }\n            else {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n        }\n    }\n}\nCdkScrollable.ɵfac = function CdkScrollable_Factory(t) { return new (t || CdkScrollable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8)); };\nCdkScrollable.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkScrollable, selectors: [[\"\", \"cdk-scrollable\", \"\"], [\"\", \"cdkScrollable\", \"\"]] });\nCdkScrollable.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ScrollDispatcher },\n    { type: NgZone },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkScrollable, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-scrollable], [cdkScrollable]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ScrollDispatcher }, { type: ɵngcc0.NgZone }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Time in ms to throttle the resize events by default. */\nconst DEFAULT_RESIZE_TIME = 20;\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * @docs-private\n */\nclass ViewportRuler {\n    constructor(_platform, ngZone, document) {\n        this._platform = _platform;\n        /** Stream of viewport change events. */\n        this._change = new Subject();\n        /** Event listener that will be used to handle the viewport change events. */\n        this._changeListener = (event) => {\n            this._change.next(event);\n        };\n        this._document = document;\n        ngZone.runOutsideAngular(() => {\n            if (_platform.isBrowser) {\n                const window = this._getWindow();\n                // Note that bind the events ourselves, rather than going through something like RxJS's\n                // `fromEvent` so that we can ensure that they're bound outside of the NgZone.\n                window.addEventListener('resize', this._changeListener);\n                window.addEventListener('orientationchange', this._changeListener);\n            }\n            // We don't need to keep track of the subscription,\n            // because we complete the `change` stream on destroy.\n            this.change().subscribe(() => this._updateViewportSize());\n        });\n    }\n    ngOnDestroy() {\n        if (this._platform.isBrowser) {\n            const window = this._getWindow();\n            window.removeEventListener('resize', this._changeListener);\n            window.removeEventListener('orientationchange', this._changeListener);\n        }\n        this._change.complete();\n    }\n    /** Returns the viewport's width and height. */\n    getViewportSize() {\n        if (!this._viewportSize) {\n            this._updateViewportSize();\n        }\n        const output = { width: this._viewportSize.width, height: this._viewportSize.height };\n        // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n        if (!this._platform.isBrowser) {\n            this._viewportSize = null;\n        }\n        return output;\n    }\n    /** Gets a ClientRect for the viewport's bounds. */\n    getViewportRect() {\n        // Use the document element's bounding rect rather than the window scroll properties\n        // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n        // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n        // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n        // can disagree when the page is pinch-zoomed (on devices that support touch).\n        // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n        // We use the documentElement instead of the body because, by default (without a css reset)\n        // browsers typically give the document body an 8px margin, which is not included in\n        // getBoundingClientRect().\n        const scrollPosition = this.getViewportScrollPosition();\n        const { width, height } = this.getViewportSize();\n        return {\n            top: scrollPosition.top,\n            left: scrollPosition.left,\n            bottom: scrollPosition.top + height,\n            right: scrollPosition.left + width,\n            height,\n            width,\n        };\n    }\n    /** Gets the (top, left) scroll position of the viewport. */\n    getViewportScrollPosition() {\n        // While we can get a reference to the fake document\n        // during SSR, it doesn't have getBoundingClientRect.\n        if (!this._platform.isBrowser) {\n            return { top: 0, left: 0 };\n        }\n        // The top-left-corner of the viewport is determined by the scroll position of the document\n        // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n        // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n        // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n        // `document.documentElement` works consistently, where the `top` and `left` values will\n        // equal negative the scroll position.\n        const document = this._document;\n        const window = this._getWindow();\n        const documentElement = document.documentElement;\n        const documentRect = documentElement.getBoundingClientRect();\n        const top = -documentRect.top || document.body.scrollTop || window.scrollY ||\n            documentElement.scrollTop || 0;\n        const left = -documentRect.left || document.body.scrollLeft || window.scrollX ||\n            documentElement.scrollLeft || 0;\n        return { top, left };\n    }\n    /**\n     * Returns a stream that emits whenever the size of the viewport changes.\n     * @param throttleTime Time in milliseconds to throttle the stream.\n     */\n    change(throttleTime = DEFAULT_RESIZE_TIME) {\n        return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document.defaultView || window;\n    }\n    /** Updates the cached viewport size. */\n    _updateViewportSize() {\n        const window = this._getWindow();\n        this._viewportSize = this._platform.isBrowser ?\n            { width: window.innerWidth, height: window.innerHeight } :\n            { width: 0, height: 0 };\n    }\n}\nViewportRuler.ɵfac = function ViewportRuler_Factory(t) { return new (t || ViewportRuler)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT, 8)); };\nViewportRuler.ɵprov = ɵɵdefineInjectable({ factory: function ViewportRuler_Factory() { return new ViewportRuler(ɵɵinject(Platform), ɵɵinject(NgZone), ɵɵinject(DOCUMENT, 8)); }, token: ViewportRuler, providedIn: \"root\" });\nViewportRuler.ctorParameters = () => [\n    { type: Platform },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ViewportRuler, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Checks if the given ranges are equal. */\nfunction rangesEqual(r1, r2) {\n    return r1.start == r2.start && r1.end == r2.end;\n}\n/**\n * Scheduler to be used for scroll events. Needs to fall back to\n * something that doesn't rely on requestAnimationFrame on environments\n * that don't support it (e.g. server-side rendering).\n */\nconst SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\n/** A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`. */\nclass CdkVirtualScrollViewport extends CdkScrollable {\n    constructor(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher, viewportRuler) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n        this.elementRef = elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollStrategy = _scrollStrategy;\n        /** Emits when the viewport is detached from a CdkVirtualForOf. */\n        this._detachedSubject = new Subject();\n        /** Emits when the rendered range changes. */\n        this._renderedRangeSubject = new Subject();\n        this._orientation = 'vertical';\n        // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n        // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n        // depending on how the strategy calculates the scrolled index, it may come at a cost to\n        // performance.\n        /** Emits when the index of the first element visible in the viewport changes. */\n        this.scrolledIndexChange = new Observable((observer) => this._scrollStrategy.scrolledIndexChange.subscribe(index => Promise.resolve().then(() => this.ngZone.run(() => observer.next(index)))));\n        /** A stream that emits whenever the rendered range changes. */\n        this.renderedRangeStream = this._renderedRangeSubject;\n        /**\n         * The total size of all content (in pixels), including content that is not currently rendered.\n         */\n        this._totalContentSize = 0;\n        /** A string representing the `style.width` property value to be used for the spacer element. */\n        this._totalContentWidth = '';\n        /** A string representing the `style.height` property value to be used for the spacer element. */\n        this._totalContentHeight = '';\n        /** The currently rendered range of indices. */\n        this._renderedRange = { start: 0, end: 0 };\n        /** The length of the data bound to this viewport (in number of items). */\n        this._dataLength = 0;\n        /** The size of the viewport (in pixels). */\n        this._viewportSize = 0;\n        /** The last rendered content offset that was set. */\n        this._renderedContentOffset = 0;\n        /**\n         * Whether the last rendered content offset was to the end of the content (and therefore needs to\n         * be rewritten as an offset to the start of the content).\n         */\n        this._renderedContentOffsetNeedsRewrite = false;\n        /** Whether there is a pending change detection cycle. */\n        this._isChangeDetectionPending = false;\n        /** A list of functions to run after the next change detection cycle. */\n        this._runAfterChangeDetection = [];\n        /** Subscription to changes in the viewport size. */\n        this._viewportChanges = Subscription.EMPTY;\n        if (!_scrollStrategy && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n        }\n        this._viewportChanges = viewportRuler.change().subscribe(() => {\n            this.checkViewportSize();\n        });\n    }\n    /** The direction the viewport scrolls. */\n    get orientation() {\n        return this._orientation;\n    }\n    set orientation(orientation) {\n        if (this._orientation !== orientation) {\n            this._orientation = orientation;\n            this._calculateSpacerSize();\n        }\n    }\n    ngOnInit() {\n        super.ngOnInit();\n        // It's still too early to measure the viewport at this point. Deferring with a promise allows\n        // the Viewport to be rendered with the correct size before we measure. We run this outside the\n        // zone to avoid causing more change detection cycles. We handle the change detection loop\n        // ourselves instead.\n        this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n            this._measureViewportSize();\n            this._scrollStrategy.attach(this);\n            this.elementScrolled()\n                .pipe(\n            // Start off with a fake scroll event so we properly detect our initial position.\n            startWith(null), \n            // Collect multiple events into one until the next animation frame. This way if\n            // there are multiple scroll events in the same frame we only need to recheck\n            // our layout once.\n            auditTime(0, SCROLL_SCHEDULER))\n                .subscribe(() => this._scrollStrategy.onContentScrolled());\n            this._markChangeDetectionNeeded();\n        }));\n    }\n    ngOnDestroy() {\n        this.detach();\n        this._scrollStrategy.detach();\n        // Complete all subjects\n        this._renderedRangeSubject.complete();\n        this._detachedSubject.complete();\n        this._viewportChanges.unsubscribe();\n        super.ngOnDestroy();\n    }\n    /** Attaches a `CdkVirtualScrollRepeater` to this viewport. */\n    attach(forOf) {\n        if (this._forOf && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('CdkVirtualScrollViewport is already attached.');\n        }\n        // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n        // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n        // change detection loop ourselves.\n        this.ngZone.runOutsideAngular(() => {\n            this._forOf = forOf;\n            this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe(data => {\n                const newLength = data.length;\n                if (newLength !== this._dataLength) {\n                    this._dataLength = newLength;\n                    this._scrollStrategy.onDataLengthChanged();\n                }\n                this._doChangeDetection();\n            });\n        });\n    }\n    /** Detaches the current `CdkVirtualForOf`. */\n    detach() {\n        this._forOf = null;\n        this._detachedSubject.next();\n    }\n    /** Gets the length of the data bound to this viewport (in number of items). */\n    getDataLength() {\n        return this._dataLength;\n    }\n    /** Gets the size of the viewport (in pixels). */\n    getViewportSize() {\n        return this._viewportSize;\n    }\n    // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n    // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n    // setting it to something else, but its error prone and should probably be split into\n    // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n    /** Get the current rendered range of items. */\n    getRenderedRange() {\n        return this._renderedRange;\n    }\n    /**\n     * Sets the total size of all content (in pixels), including content that is not currently\n     * rendered.\n     */\n    setTotalContentSize(size) {\n        if (this._totalContentSize !== size) {\n            this._totalContentSize = size;\n            this._calculateSpacerSize();\n            this._markChangeDetectionNeeded();\n        }\n    }\n    /** Sets the currently rendered range of indices. */\n    setRenderedRange(range) {\n        if (!rangesEqual(this._renderedRange, range)) {\n            this._renderedRangeSubject.next(this._renderedRange = range);\n            this._markChangeDetectionNeeded(() => this._scrollStrategy.onContentRendered());\n        }\n    }\n    /**\n     * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n     */\n    getOffsetToRenderedContentStart() {\n        return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n    }\n    /**\n     * Sets the offset from the start of the viewport to either the start or end of the rendered data\n     * (in pixels).\n     */\n    setRenderedContentOffset(offset, to = 'to-start') {\n        // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n        // in the negative direction.\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        const isHorizontal = this.orientation == 'horizontal';\n        const axis = isHorizontal ? 'X' : 'Y';\n        const axisDirection = isHorizontal && isRtl ? -1 : 1;\n        let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;\n        this._renderedContentOffset = offset;\n        if (to === 'to-end') {\n            transform += ` translate${axis}(-100%)`;\n            // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n            // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n            // expand upward).\n            this._renderedContentOffsetNeedsRewrite = true;\n        }\n        if (this._renderedContentTransform != transform) {\n            // We know this value is safe because we parse `offset` with `Number()` before passing it\n            // into the string.\n            this._renderedContentTransform = transform;\n            this._markChangeDetectionNeeded(() => {\n                if (this._renderedContentOffsetNeedsRewrite) {\n                    this._renderedContentOffset -= this.measureRenderedContentSize();\n                    this._renderedContentOffsetNeedsRewrite = false;\n                    this.setRenderedContentOffset(this._renderedContentOffset);\n                }\n                else {\n                    this._scrollStrategy.onRenderedOffsetChanged();\n                }\n            });\n        }\n    }\n    /**\n     * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n     * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n     * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n     * @param offset The offset to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToOffset(offset, behavior = 'auto') {\n        const options = { behavior };\n        if (this.orientation === 'horizontal') {\n            options.start = offset;\n        }\n        else {\n            options.top = offset;\n        }\n        this.scrollTo(options);\n    }\n    /**\n     * Scrolls to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     */\n    scrollToIndex(index, behavior = 'auto') {\n        this._scrollStrategy.scrollToIndex(index, behavior);\n    }\n    /**\n     * Gets the current scroll offset from the start of the viewport (in pixels).\n     * @param from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n     *     in horizontal mode.\n     */\n    measureScrollOffset(from) {\n        return from ?\n            super.measureScrollOffset(from) :\n            super.measureScrollOffset(this.orientation === 'horizontal' ? 'start' : 'top');\n    }\n    /** Measure the combined size of all of the rendered items. */\n    measureRenderedContentSize() {\n        const contentEl = this._contentWrapper.nativeElement;\n        return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n    }\n    /**\n     * Measure the total combined size of the given range. Throws if the range includes items that are\n     * not rendered.\n     */\n    measureRangeSize(range) {\n        if (!this._forOf) {\n            return 0;\n        }\n        return this._forOf.measureRangeSize(range, this.orientation);\n    }\n    /** Update the viewport dimensions and re-render. */\n    checkViewportSize() {\n        // TODO: Cleanup later when add logic for handling content resize\n        this._measureViewportSize();\n        this._scrollStrategy.onDataLengthChanged();\n    }\n    /** Measure the viewport size. */\n    _measureViewportSize() {\n        const viewportEl = this.elementRef.nativeElement;\n        this._viewportSize = this.orientation === 'horizontal' ?\n            viewportEl.clientWidth : viewportEl.clientHeight;\n    }\n    /** Queue up change detection to run. */\n    _markChangeDetectionNeeded(runAfter) {\n        if (runAfter) {\n            this._runAfterChangeDetection.push(runAfter);\n        }\n        // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n        // properties sequentially we only have to run `_doChangeDetection` once at the end.\n        if (!this._isChangeDetectionPending) {\n            this._isChangeDetectionPending = true;\n            this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n                this._doChangeDetection();\n            }));\n        }\n    }\n    /** Run change detection. */\n    _doChangeDetection() {\n        this._isChangeDetectionPending = false;\n        // Apply the content transform. The transform can't be set via an Angular binding because\n        // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n        // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n        // the `Number` function first to coerce it to a numeric value.\n        this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n        // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n        // from the root, since the repeated items are content projected in. Calling `detectChanges`\n        // instead does not properly check the projected content.\n        this.ngZone.run(() => this._changeDetectorRef.markForCheck());\n        const runAfterChangeDetection = this._runAfterChangeDetection;\n        this._runAfterChangeDetection = [];\n        for (const fn of runAfterChangeDetection) {\n            fn();\n        }\n    }\n    /** Calculates the `style.width` and `style.height` for the spacer element. */\n    _calculateSpacerSize() {\n        this._totalContentHeight =\n            this.orientation === 'horizontal' ? '' : `${this._totalContentSize}px`;\n        this._totalContentWidth =\n            this.orientation === 'horizontal' ? `${this._totalContentSize}px` : '';\n    }\n}\nCdkVirtualScrollViewport.ɵfac = function CdkVirtualScrollViewport_Factory(t) { return new (t || CdkVirtualScrollViewport)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(VIRTUAL_SCROLL_STRATEGY, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ViewportRuler)); };\nCdkVirtualScrollViewport.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CdkVirtualScrollViewport, selectors: [[\"cdk-virtual-scroll-viewport\"]], viewQuery: function CdkVirtualScrollViewport_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 3);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentWrapper = _t.first);\n    } }, hostAttrs: [1, \"cdk-virtual-scroll-viewport\"], hostVars: 4, hostBindings: function CdkVirtualScrollViewport_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"cdk-virtual-scroll-orientation-horizontal\", ctx.orientation === \"horizontal\")(\"cdk-virtual-scroll-orientation-vertical\", ctx.orientation !== \"horizontal\");\n    } }, inputs: { orientation: \"orientation\" }, outputs: { scrolledIndexChange: \"scrolledIndexChange\" }, features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: CdkScrollable,\n                useExisting: CdkVirtualScrollViewport\n            }]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 4, vars: 4, consts: [[1, \"cdk-virtual-scroll-content-wrapper\"], [\"contentWrapper\", \"\"], [1, \"cdk-virtual-scroll-spacer\"]], template: function CdkVirtualScrollViewport_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(3, \"div\", 2);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx._totalContentWidth)(\"height\", ctx._totalContentHeight);\n    } }, styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\\n\"], encapsulation: 2, changeDetection: 0 });\nCdkVirtualScrollViewport.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [VIRTUAL_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: ScrollDispatcher },\n    { type: ViewportRuler }\n];\nCdkVirtualScrollViewport.propDecorators = {\n    orientation: [{ type: Input }],\n    scrolledIndexChange: [{ type: Output }],\n    _contentWrapper: [{ type: ViewChild, args: ['contentWrapper', { static: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkVirtualScrollViewport, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-virtual-scroll-viewport',\n                template: \"<!--\\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\\n  position.\\n-->\\n<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\">\\n  <ng-content></ng-content>\\n</div>\\n<!--\\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\\n  so that the scrollbar captures the size of the entire data set.\\n-->\\n<div class=\\\"cdk-virtual-scroll-spacer\\\"\\n     [style.width]=\\\"_totalContentWidth\\\" [style.height]=\\\"_totalContentHeight\\\"></div>\\n\",\n                host: {\n                    'class': 'cdk-virtual-scroll-viewport',\n                    '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n                    '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== \"horizontal\"'\n                },\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                providers: [{\n                        provide: CdkScrollable,\n                        useExisting: CdkVirtualScrollViewport\n                    }],\n                styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [VIRTUAL_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ScrollDispatcher }, { type: ViewportRuler }]; }, { scrolledIndexChange: [{\n            type: Output\n        }], orientation: [{\n            type: Input\n        }], _contentWrapper: [{\n            type: ViewChild,\n            args: ['contentWrapper', { static: true }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Helper to extract the offset of a DOM Node in a certain direction. */\nfunction getOffset(orientation, direction, node) {\n    const el = node;\n    if (!el.getBoundingClientRect) {\n        return 0;\n    }\n    const rect = el.getBoundingClientRect();\n    if (orientation === 'horizontal') {\n        return direction === 'start' ? rect.left : rect.right;\n    }\n    return direction === 'start' ? rect.top : rect.bottom;\n}\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n */\nclass CdkVirtualForOf {\n    constructor(\n    /** The view container to add items to. */\n    _viewContainerRef, \n    /** The template to use when stamping out new items. */\n    _template, \n    /** The set of available differs. */\n    _differs, \n    /** The strategy used to render items in the virtual scroll viewport. */\n    _viewRepeater, \n    /** The virtual scrolling viewport that these items are being rendered in. */\n    _viewport, ngZone) {\n        this._viewContainerRef = _viewContainerRef;\n        this._template = _template;\n        this._differs = _differs;\n        this._viewRepeater = _viewRepeater;\n        this._viewport = _viewport;\n        /** Emits when the rendered view of the data changes. */\n        this.viewChange = new Subject();\n        /** Subject that emits when a new DataSource instance is given. */\n        this._dataSourceChanges = new Subject();\n        /** Emits whenever the data in the current DataSource changes. */\n        this.dataStream = this._dataSourceChanges\n            .pipe(\n        // Start off with null `DataSource`.\n        startWith(null), \n        // Bundle up the previous and current data sources so we can work with both.\n        pairwise(), \n        // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n        // new one, passing back a stream of data changes which we run through `switchMap` to give\n        // us a data stream that emits the latest data from whatever the current `DataSource` is.\n        switchMap(([prev, cur]) => this._changeDataSource(prev, cur)), \n        // Replay the last emitted data when someone subscribes.\n        shareReplay(1));\n        /** The differ used to calculate changes to the data. */\n        this._differ = null;\n        /** Whether the rendered data should be updated during the next ngDoCheck cycle. */\n        this._needsUpdate = false;\n        this._destroyed = new Subject();\n        this.dataStream.subscribe(data => {\n            this._data = data;\n            this._onRenderedDataChange();\n        });\n        this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(range => {\n            this._renderedRange = range;\n            ngZone.run(() => this.viewChange.next(this._renderedRange));\n            this._onRenderedDataChange();\n        });\n        this._viewport.attach(this);\n    }\n    /** The DataSource to display. */\n    get cdkVirtualForOf() {\n        return this._cdkVirtualForOf;\n    }\n    set cdkVirtualForOf(value) {\n        this._cdkVirtualForOf = value;\n        if (isDataSource(value)) {\n            this._dataSourceChanges.next(value);\n        }\n        else {\n            // If value is an an NgIterable, convert it to an array.\n            this._dataSourceChanges.next(new ArrayDataSource(isObservable(value) ? value : Array.from(value || [])));\n        }\n    }\n    /**\n     * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n     * the item and produces a value to be used as the item's identity when tracking changes.\n     */\n    get cdkVirtualForTrackBy() {\n        return this._cdkVirtualForTrackBy;\n    }\n    set cdkVirtualForTrackBy(fn) {\n        this._needsUpdate = true;\n        this._cdkVirtualForTrackBy = fn ?\n            (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item) :\n            undefined;\n    }\n    /** The template used to stamp out new elements. */\n    set cdkVirtualForTemplate(value) {\n        if (value) {\n            this._needsUpdate = true;\n            this._template = value;\n        }\n    }\n    /**\n     * The size of the cache used to store templates that are not being used for re-use later.\n     * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n     */\n    get cdkVirtualForTemplateCacheSize() {\n        return this._viewRepeater.viewCacheSize;\n    }\n    set cdkVirtualForTemplateCacheSize(size) {\n        this._viewRepeater.viewCacheSize = coerceNumberProperty(size);\n    }\n    /**\n     * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n     * in the specified range. Throws an error if the range includes items that are not currently\n     * rendered.\n     */\n    measureRangeSize(range, orientation) {\n        if (range.start >= range.end) {\n            return 0;\n        }\n        if ((range.start < this._renderedRange.start || range.end > this._renderedRange.end) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Error: attempted to measure an item that isn't rendered.`);\n        }\n        // The index into the list of rendered views for the first item in the range.\n        const renderedStartIndex = range.start - this._renderedRange.start;\n        // The length of the range we're measuring.\n        const rangeLen = range.end - range.start;\n        // Loop over all the views, find the first and land node and compute the size by subtracting\n        // the top of the first node from the bottom of the last one.\n        let firstNode;\n        let lastNode;\n        // Find the first node by starting from the beginning and going forwards.\n        for (let i = 0; i < rangeLen; i++) {\n            const view = this._viewContainerRef.get(i + renderedStartIndex);\n            if (view && view.rootNodes.length) {\n                firstNode = lastNode = view.rootNodes[0];\n                break;\n            }\n        }\n        // Find the last node by starting from the end and going backwards.\n        for (let i = rangeLen - 1; i > -1; i--) {\n            const view = this._viewContainerRef.get(i + renderedStartIndex);\n            if (view && view.rootNodes.length) {\n                lastNode = view.rootNodes[view.rootNodes.length - 1];\n                break;\n            }\n        }\n        return firstNode && lastNode ?\n            getOffset(orientation, 'end', lastNode) - getOffset(orientation, 'start', firstNode) : 0;\n    }\n    ngDoCheck() {\n        if (this._differ && this._needsUpdate) {\n            // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n            // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n            // changing (need to do this diff).\n            const changes = this._differ.diff(this._renderedItems);\n            if (!changes) {\n                this._updateContext();\n            }\n            else {\n                this._applyChanges(changes);\n            }\n            this._needsUpdate = false;\n        }\n    }\n    ngOnDestroy() {\n        this._viewport.detach();\n        this._dataSourceChanges.next(undefined);\n        this._dataSourceChanges.complete();\n        this.viewChange.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._viewRepeater.detach();\n    }\n    /** React to scroll state changes in the viewport. */\n    _onRenderedDataChange() {\n        if (!this._renderedRange) {\n            return;\n        }\n        this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n        if (!this._differ) {\n            // Use a wrapper function for the `trackBy` so any new values are\n            // picked up automatically without having to recreate the differ.\n            this._differ = this._differs.find(this._renderedItems).create((index, item) => {\n                return this.cdkVirtualForTrackBy ? this.cdkVirtualForTrackBy(index, item) : item;\n            });\n        }\n        this._needsUpdate = true;\n    }\n    /** Swap out one `DataSource` for another. */\n    _changeDataSource(oldDs, newDs) {\n        if (oldDs) {\n            oldDs.disconnect(this);\n        }\n        this._needsUpdate = true;\n        return newDs ? newDs.connect(this) : of();\n    }\n    /** Update the `CdkVirtualForOfContext` for all views. */\n    _updateContext() {\n        const count = this._data.length;\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            const view = this._viewContainerRef.get(i);\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n            view.detectChanges();\n        }\n    }\n    /** Apply changes to the DOM. */\n    _applyChanges(changes) {\n        this._viewRepeater.applyChanges(changes, this._viewContainerRef, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record, currentIndex), (record) => record.item);\n        // Update $implicit for any items that had an identity change.\n        changes.forEachIdentityChange((record) => {\n            const view = this._viewContainerRef.get(record.currentIndex);\n            view.context.$implicit = record.item;\n        });\n        // Update the context variables on all items.\n        const count = this._data.length;\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            const view = this._viewContainerRef.get(i);\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n        }\n    }\n    /** Update the computed properties on the `CdkVirtualForOfContext`. */\n    _updateComputedContextProperties(context) {\n        context.first = context.index === 0;\n        context.last = context.index === context.count - 1;\n        context.even = context.index % 2 === 0;\n        context.odd = !context.even;\n    }\n    _getEmbeddedViewArgs(record, index) {\n        // Note that it's important that we insert the item directly at the proper index,\n        // rather than inserting it and the moving it in place, because if there's a directive\n        // on the same node that injects the `ViewContainerRef`, Angular will insert another\n        // comment node which can throw off the move when it's being repeated for all items.\n        return {\n            templateRef: this._template,\n            context: {\n                $implicit: record.item,\n                // It's guaranteed that the iterable is not \"undefined\" or \"null\" because we only\n                // generate views for elements if the \"cdkVirtualForOf\" iterable has elements.\n                cdkVirtualForOf: this._cdkVirtualForOf,\n                index: -1,\n                count: -1,\n                first: false,\n                last: false,\n                odd: false,\n                even: false\n            },\n            index,\n        };\n    }\n}\nCdkVirtualForOf.ɵfac = function CdkVirtualForOf_Factory(t) { return new (t || CdkVirtualForOf)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(_VIEW_REPEATER_STRATEGY), ɵngcc0.ɵɵdirectiveInject(CdkVirtualScrollViewport, 4), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nCdkVirtualForOf.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkVirtualForOf, selectors: [[\"\", \"cdkVirtualFor\", \"\", \"cdkVirtualForOf\", \"\"]], inputs: { cdkVirtualForOf: \"cdkVirtualForOf\", cdkVirtualForTrackBy: \"cdkVirtualForTrackBy\", cdkVirtualForTemplate: \"cdkVirtualForTemplate\", cdkVirtualForTemplateCacheSize: \"cdkVirtualForTemplateCacheSize\" }, features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy },\n        ])] });\nCdkVirtualForOf.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: TemplateRef },\n    { type: IterableDiffers },\n    { type: _RecycleViewRepeaterStrategy, decorators: [{ type: Inject, args: [_VIEW_REPEATER_STRATEGY,] }] },\n    { type: CdkVirtualScrollViewport, decorators: [{ type: SkipSelf }] },\n    { type: NgZone }\n];\nCdkVirtualForOf.propDecorators = {\n    cdkVirtualForOf: [{ type: Input }],\n    cdkVirtualForTrackBy: [{ type: Input }],\n    cdkVirtualForTemplate: [{ type: Input }],\n    cdkVirtualForTemplateCacheSize: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkVirtualForOf, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkVirtualFor][cdkVirtualForOf]',\n                providers: [\n                    { provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy },\n                ]\n            }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }, { type: ɵngcc3._RecycleViewRepeaterStrategy, decorators: [{\n                type: Inject,\n                args: [_VIEW_REPEATER_STRATEGY]\n            }] }, { type: CdkVirtualScrollViewport, decorators: [{\n                type: SkipSelf\n            }] }, { type: ɵngcc0.NgZone }]; }, { cdkVirtualForOf: [{\n            type: Input\n        }], cdkVirtualForTrackBy: [{\n            type: Input\n        }], cdkVirtualForTemplate: [{\n            type: Input\n        }], cdkVirtualForTemplateCacheSize: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass CdkScrollableModule {\n}\nCdkScrollableModule.ɵfac = function CdkScrollableModule_Factory(t) { return new (t || CdkScrollableModule)(); };\nCdkScrollableModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: CdkScrollableModule });\nCdkScrollableModule.ɵinj = ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkScrollableModule, { declarations: [CdkScrollable], exports: [CdkScrollable] }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkScrollableModule, [{\n        type: NgModule,\n        args: [{\n                exports: [CdkScrollable],\n                declarations: [CdkScrollable]\n            }]\n    }], null, null); })();\n/**\n * @docs-primary-export\n */\nclass ScrollingModule {\n}\nScrollingModule.ɵfac = function ScrollingModule_Factory(t) { return new (t || ScrollingModule)(); };\nScrollingModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ScrollingModule });\nScrollingModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[\n            BidiModule,\n            PlatformModule,\n            CdkScrollableModule\n        ], BidiModule, CdkScrollableModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ScrollingModule, { declarations: function () { return [CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport]; }, imports: function () { return [BidiModule,\n        PlatformModule, CdkScrollableModule]; }, exports: function () { return [BidiModule, CdkScrollableModule, CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScrollingModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    BidiModule,\n                    PlatformModule,\n                    CdkScrollableModule\n                ],\n                exports: [\n                    BidiModule,\n                    CdkScrollableModule,\n                    CdkFixedSizeVirtualScroll,\n                    CdkVirtualForOf,\n                    CdkVirtualScrollViewport,\n                ],\n                declarations: [\n                    CdkFixedSizeVirtualScroll,\n                    CdkVirtualForOf,\n                    CdkVirtualScrollViewport,\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkFixedSizeVirtualScroll, CdkScrollable, CdkScrollableModule, CdkVirtualForOf, CdkVirtualScrollViewport, DEFAULT_RESIZE_TIME, DEFAULT_SCROLL_TIME, FixedSizeVirtualScrollStrategy, ScrollDispatcher, ScrollingModule, VIRTUAL_SCROLL_STRATEGY, ViewportRuler, _fixedSizeVirtualScrollStrategyFactory };\n\n//# sourceMappingURL=scrolling.js.map"],"sourceRoot":"webpack:///"}